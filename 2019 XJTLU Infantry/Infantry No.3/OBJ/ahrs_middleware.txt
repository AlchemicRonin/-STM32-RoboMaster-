; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\ahrs_middleware.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\ahrs_middleware.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\ahrs_middleware.crf ..\AHRS\AHRS_middleware.c]
                          THUMB

                          AREA ||i.AHRS_acosf||, CODE, READONLY, ALIGN=1

                  AHRS_acosf PROC
;;;122    
;;;123    fp32 AHRS_acosf(fp32 cos)
000000  b510              PUSH     {r4,lr}
;;;124    {
000002  ed2d8b02          VPUSH    {d8}
000006  eeb08a40          VMOV.F32 s16,s0
;;;125    
;;;126        return acosf(cos);
00000a  eeb00a48          VMOV.F32 s0,s16
00000e  f7fffffe          BL       __hardfp_acosf
;;;127    }
000012  ecbd8b02          VPOP     {d8}
000016  bd10              POP      {r4,pc}
;;;128    
                          ENDP


                          AREA ||i.AHRS_asinf||, CODE, READONLY, ALIGN=1

                  AHRS_asinf PROC
;;;110    
;;;111    fp32 AHRS_asinf(fp32 sin)
000000  b510              PUSH     {r4,lr}
;;;112    {
000002  ed2d8b02          VPUSH    {d8}
000006  eeb08a40          VMOV.F32 s16,s0
;;;113        return asinf(sin);
00000a  eeb00a48          VMOV.F32 s0,s16
00000e  f7fffffe          BL       __hardfp_asinf
;;;114    }
000012  ecbd8b02          VPOP     {d8}
000016  bd10              POP      {r4,pc}
;;;115    
                          ENDP


                          AREA ||i.AHRS_atan2f||, CODE, READONLY, ALIGN=1

                  AHRS_atan2f PROC
;;;136    
;;;137    fp32 AHRS_atan2f(fp32 y, fp32 x)
000000  b510              PUSH     {r4,lr}
;;;138    {
000002  ed2d8b02          VPUSH    {d8}
000006  eeb08a40          VMOV.F32 s16,s0
00000a  eef08a60          VMOV.F32 s17,s1
;;;139        return atan2f(y, x);
00000e  eef00a68          VMOV.F32 s1,s17
000012  eeb00a48          VMOV.F32 s0,s16
000016  f7fffffe          BL       __hardfp_atan2f
;;;140    }
00001a  ecbd8b02          VPOP     {d8}
00001e  bd10              POP      {r4,pc}
;;;141    void _ttywrch(int ch)
                          ENDP


                          AREA ||i.AHRS_cosf||, CODE, READONLY, ALIGN=1

                  AHRS_cosf PROC
;;;87     
;;;88     fp32 AHRS_cosf(fp32 angle)
000000  b510              PUSH     {r4,lr}
;;;89     {
000002  ed2d8b02          VPUSH    {d8}
000006  eeb08a40          VMOV.F32 s16,s0
;;;90         return arm_cos_f32(angle);
00000a  eeb00a48          VMOV.F32 s0,s16
00000e  f7fffffe          BL       arm_cos_f32
;;;91     }
000012  ecbd8b02          VPOP     {d8}
000016  bd10              POP      {r4,pc}
;;;92     
                          ENDP


                          AREA ||i.AHRS_get_height||, CODE, READONLY, ALIGN=2

                  AHRS_get_height PROC
;;;28     
;;;29     void AHRS_get_height(fp32 *high)
000000  b118              CBZ      r0,|L5.10|
;;;30     {
;;;31         if (high != NULL)
;;;32         {
;;;33             *high = 0.0f;
000002  ed9f0a02          VLDR     s0,|L5.12|
000006  ed800a00          VSTR     s0,[r0,#0]
                  |L5.10|
;;;34         }
;;;35     }
00000a  4770              BX       lr
;;;36     
                          ENDP

                  |L5.12|
00000c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i.AHRS_get_latitude||, CODE, READONLY, ALIGN=1

                  AHRS_get_latitude PROC
;;;43     
;;;44     void AHRS_get_latitude(fp32 *latitude)
000000  4770              BX       lr
;;;45     {
;;;46         if (latitude != NULL)
;;;47         {
;;;48     //        *latitude = Latitude_At_ShenZhen;
;;;49         }
;;;50     }
;;;51     
                          ENDP


                          AREA ||i.AHRS_invSqrt||, CODE, READONLY, ALIGN=2

                  AHRS_invSqrt PROC
;;;58     
;;;59     fp32 AHRS_invSqrt(fp32 num)
000000  eef00a40          VMOV.F32 s1,s0
;;;60     {
;;;61         fp32 halfnum = 0.5f * num;
000004  eef61a00          VMOV.F32 s3,#0.50000000
000008  ee601aa1          VMUL.F32 s3,s1,s3
00000c  eeb01a61          VMOV.F32 s2,s3
;;;62         fp32 y = num;
000010  eeb00a60          VMOV.F32 s0,s1
;;;63         long i = *(long *)&y;
000014  ee100a10          VMOV     r0,s0
;;;64         i = 0x5f3759df - (i >> 1);
000018  4907              LDR      r1,|L7.56|
00001a  eba10060          SUB      r0,r1,r0,ASR #1
;;;65         y = *(fp32 *)&i;
00001e  ee000a10          VMOV     s0,r0
;;;66         y = y * (1.5f - (halfnum * y * y));
000022  ee212a00          VMUL.F32 s4,s2,s0
000026  eef71a08          VMOV.F32 s3,#1.50000000
00002a  ee421a40          VMLS.F32 s3,s4,s0
00002e  ee611a80          VMUL.F32 s3,s3,s0
000032  eeb00a61          VMOV.F32 s0,s3
;;;67         return y;
;;;68     }
000036  4770              BX       lr
;;;69     
                          ENDP

                  |L7.56|
                          DCD      0x5f3759df

                          AREA ||i.AHRS_sinf||, CODE, READONLY, ALIGN=1

                  AHRS_sinf PROC
;;;76     
;;;77     fp32 AHRS_sinf(fp32 angle)
000000  b510              PUSH     {r4,lr}
;;;78     {
000002  ed2d8b02          VPUSH    {d8}
000006  eeb08a40          VMOV.F32 s16,s0
;;;79         return arm_sin_f32(angle);
00000a  eeb00a48          VMOV.F32 s0,s16
00000e  f7fffffe          BL       arm_sin_f32
;;;80     }
000012  ecbd8b02          VPOP     {d8}
000016  bd10              POP      {r4,pc}
;;;81     /**
                          ENDP


                          AREA ||i.AHRS_tanf||, CODE, READONLY, ALIGN=1

                  AHRS_tanf PROC
;;;99     
;;;100    fp32 AHRS_tanf(fp32 angle)
000000  b510              PUSH     {r4,lr}
;;;101    {
000002  ed2d8b02          VPUSH    {d8}
000006  eeb08a40          VMOV.F32 s16,s0
;;;102        return tanf(angle);
00000a  eeb00a48          VMOV.F32 s0,s16
00000e  f7fffffe          BL       __hardfp_tanf
;;;103    }
000012  ecbd8b02          VPOP     {d8}
000016  bd10              POP      {r4,pc}
;;;104    /**
                          ENDP


                          AREA ||i._ttywrch||, CODE, READONLY, ALIGN=1

                  _ttywrch PROC
;;;140    }
;;;141    void _ttywrch(int ch)
000000  4770              BX       lr
;;;142    {
;;;143    	
;;;144    }
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\AHRS\\AHRS_middleware.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_AHRS_middleware_c_8381f0eb____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___17_AHRS_middleware_c_8381f0eb____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_AHRS_middleware_c_8381f0eb____REVSH|
#line 153
|__asm___17_AHRS_middleware_c_8381f0eb____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_AHRS_middleware_c_8381f0eb____RRX|
#line 328
|__asm___17_AHRS_middleware_c_8381f0eb____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
