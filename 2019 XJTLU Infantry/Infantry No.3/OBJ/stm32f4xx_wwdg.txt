; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\stm32f4xx_wwdg.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32f4xx_wwdg.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\stm32f4xx_wwdg.crf ..\FWLIB\src\stm32f4xx_wwdg.c]
                          THUMB

                          AREA ||i.WWDG_ClearFlag||, CODE, READONLY, ALIGN=2

                  WWDG_ClearFlag PROC
;;;285      */
;;;286    void WWDG_ClearFlag(void)
000000  2000              MOVS     r0,#0
;;;287    {
;;;288      WWDG->SR = (uint32_t)RESET;
000002  4901              LDR      r1,|L1.8|
000004  6008              STR      r0,[r1,#0]
;;;289    }
000006  4770              BX       lr
;;;290    
                          ENDP

                  |L1.8|
                          DCD      0x40002c08

                          AREA ||i.WWDG_DeInit||, CODE, READONLY, ALIGN=1

                  WWDG_DeInit PROC
;;;137      */
;;;138    void WWDG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;139    {
;;;140      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, ENABLE);
000002  2101              MOVS     r1,#1
000004  02c8              LSLS     r0,r1,#11
000006  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;141      RCC_APB1PeriphResetCmd(RCC_APB1Periph_WWDG, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f44f6000          MOV      r0,#0x800
000010  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;142    }
000014  bd10              POP      {r4,pc}
;;;143    
                          ENDP


                          AREA ||i.WWDG_Enable||, CODE, READONLY, ALIGN=2

                  WWDG_Enable PROC
;;;238      */
;;;239    void WWDG_Enable(uint8_t Counter)
000000  f0400180          ORR      r1,r0,#0x80
;;;240    {
;;;241      /* Check the parameters */
;;;242      assert_param(IS_WWDG_COUNTER(Counter));
;;;243      WWDG->CR = WWDG_CR_WDGA | Counter;
000004  4a01              LDR      r2,|L3.12|
000006  6011              STR      r1,[r2,#0]
;;;244    }
000008  4770              BX       lr
;;;245    /**
                          ENDP

00000a  0000              DCW      0x0000
                  |L3.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_EnableIT||, CODE, READONLY, ALIGN=2

                  WWDG_EnableIT PROC
;;;195      */
;;;196    void WWDG_EnableIT(void)
000000  2001              MOVS     r0,#1
;;;197    {
;;;198      *(__IO uint32_t *) CFR_EWI_BB = (uint32_t)ENABLE;
000002  4901              LDR      r1,|L4.8|
000004  6008              STR      r0,[r1,#0]
;;;199    }
000006  4770              BX       lr
;;;200    
                          ENDP

                  |L4.8|
                          DCD      0x420580a4

                          AREA ||i.WWDG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  WWDG_GetFlagStatus PROC
;;;265      */
;;;266    FlagStatus WWDG_GetFlagStatus(void)
000000  2000              MOVS     r0,#0
;;;267    {
;;;268      FlagStatus bitstatus = RESET;
;;;269        
;;;270      if ((WWDG->SR) != (uint32_t)RESET)
000002  4903              LDR      r1,|L5.16|
000004  6809              LDR      r1,[r1,#0]
000006  b109              CBZ      r1,|L5.12|
;;;271      {
;;;272        bitstatus = SET;
000008  2001              MOVS     r0,#1
00000a  e000              B        |L5.14|
                  |L5.12|
;;;273      }
;;;274      else
;;;275      {
;;;276        bitstatus = RESET;
00000c  2000              MOVS     r0,#0
                  |L5.14|
;;;277      }
;;;278      return bitstatus;
;;;279    }
00000e  4770              BX       lr
;;;280    
                          ENDP

                  |L5.16|
                          DCD      0x40002c08

                          AREA ||i.WWDG_SetCounter||, CODE, READONLY, ALIGN=2

                  WWDG_SetCounter PROC
;;;207      */
;;;208    void WWDG_SetCounter(uint8_t Counter)
000000  f000017f          AND      r1,r0,#0x7f
;;;209    {
;;;210      /* Check the parameters */
;;;211      assert_param(IS_WWDG_COUNTER(Counter));
;;;212      /* Write to T[6:0] bits to configure the counter value, no need to do
;;;213         a read-modify-write; writing a 0 to WDGA bit does nothing */
;;;214      WWDG->CR = Counter & BIT_MASK;
000004  4a01              LDR      r2,|L6.12|
000006  6011              STR      r1,[r2,#0]
;;;215    }
000008  4770              BX       lr
;;;216    /**
                          ENDP

00000a  0000              DCW      0x0000
                  |L6.12|
                          DCD      0x40002c00

                          AREA ||i.WWDG_SetPrescaler||, CODE, READONLY, ALIGN=2

                  WWDG_SetPrescaler PROC
;;;153      */
;;;154    void WWDG_SetPrescaler(uint32_t WWDG_Prescaler)
000000  2100              MOVS     r1,#0
;;;155    {
;;;156      uint32_t tmpreg = 0;
;;;157      /* Check the parameters */
;;;158      assert_param(IS_WWDG_PRESCALER(WWDG_Prescaler));
;;;159      /* Clear WDGTB[1:0] bits */
;;;160      tmpreg = WWDG->CFR & CFR_WDGTB_MASK;
000002  4a04              LDR      r2,|L7.20|
000004  6812              LDR      r2,[r2,#0]
000006  f42271c0          BIC      r1,r2,#0x180
;;;161      /* Set WDGTB[1:0] bits according to WWDG_Prescaler value */
;;;162      tmpreg |= WWDG_Prescaler;
00000a  4301              ORRS     r1,r1,r0
;;;163      /* Store the new value */
;;;164      WWDG->CFR = tmpreg;
00000c  4a01              LDR      r2,|L7.20|
00000e  6011              STR      r1,[r2,#0]
;;;165    }
000010  4770              BX       lr
;;;166    
                          ENDP

000012  0000              DCW      0x0000
                  |L7.20|
                          DCD      0x40002c04

                          AREA ||i.WWDG_SetWindowValue||, CODE, READONLY, ALIGN=2

                  WWDG_SetWindowValue PROC
;;;172      */
;;;173    void WWDG_SetWindowValue(uint8_t WindowValue)
000000  b508              PUSH     {r3,lr}
;;;174    {
;;;175      __IO uint32_t tmpreg = 0;
000002  2100              MOVS     r1,#0
000004  9100              STR      r1,[sp,#0]
;;;176    
;;;177      /* Check the parameters */
;;;178      assert_param(IS_WWDG_WINDOW_VALUE(WindowValue));
;;;179      /* Clear W[6:0] bits */
;;;180    
;;;181      tmpreg = WWDG->CFR & CFR_W_MASK;
000006  4907              LDR      r1,|L8.36|
000008  6809              LDR      r1,[r1,#0]
00000a  f021017f          BIC      r1,r1,#0x7f
00000e  9100              STR      r1,[sp,#0]
;;;182    
;;;183      /* Set W[6:0] bits according to WindowValue value */
;;;184      tmpreg |= WindowValue & (uint32_t) BIT_MASK;
000010  f000017f          AND      r1,r0,#0x7f
000014  9a00              LDR      r2,[sp,#0]
000016  4311              ORRS     r1,r1,r2
000018  9100              STR      r1,[sp,#0]
;;;185    
;;;186      /* Store the new value */
;;;187      WWDG->CFR = tmpreg;
00001a  4a02              LDR      r2,|L8.36|
00001c  9900              LDR      r1,[sp,#0]
00001e  6011              STR      r1,[r2,#0]
;;;188    }
000020  bd08              POP      {r3,pc}
;;;189    
                          ENDP

000022  0000              DCW      0x0000
                  |L8.36|
                          DCD      0x40002c04

;*** Start embedded assembler ***

#line 1 "..\\FWLIB\\src\\stm32f4xx_wwdg.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_wwdg_c_9668c0ca____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___16_stm32f4xx_wwdg_c_9668c0ca____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_wwdg_c_9668c0ca____REVSH|
#line 153
|__asm___16_stm32f4xx_wwdg_c_9668c0ca____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_wwdg_c_9668c0ca____RRX|
#line 328
|__asm___16_stm32f4xx_wwdg_c_9668c0ca____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
