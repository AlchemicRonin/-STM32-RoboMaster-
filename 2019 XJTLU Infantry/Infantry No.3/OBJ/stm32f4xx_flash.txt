; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\stm32f4xx_flash.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32f4xx_flash.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\stm32f4xx_flash.crf ..\FWLIB\src\stm32f4xx_flash.c]
                          THUMB

                          AREA ||i.FLASH_ClearFlag||, CODE, READONLY, ALIGN=2

                  FLASH_ClearFlag PROC
;;;1519     */
;;;1520   void FLASH_ClearFlag(uint32_t FLASH_FLAG)
000000  4901              LDR      r1,|L1.8|
;;;1521   {
;;;1522     /* Check the parameters */
;;;1523     assert_param(IS_FLASH_CLEAR_FLAG(FLASH_FLAG));
;;;1524     
;;;1525     /* Clear the flags */
;;;1526     FLASH->SR = FLASH_FLAG;
000002  6008              STR      r0,[r1,#0]
;;;1527   }
000004  4770              BX       lr
;;;1528   
                          ENDP

000006  0000              DCW      0x0000
                  |L1.8|
                          DCD      0x40023c0c

                          AREA ||i.FLASH_DataCacheCmd||, CODE, READONLY, ALIGN=2

                  FLASH_DataCacheCmd PROC
;;;334      */
;;;335    void FLASH_DataCacheCmd(FunctionalState NewState)
000000  b130              CBZ      r0,|L2.16|
;;;336    {
;;;337      /* Check the parameters */
;;;338      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;339      
;;;340      if(NewState != DISABLE)
;;;341      {
;;;342        FLASH->ACR |= FLASH_ACR_DCEN;
000002  4907              LDR      r1,|L2.32|
000004  6809              LDR      r1,[r1,#0]
000006  f4416180          ORR      r1,r1,#0x400
00000a  4a05              LDR      r2,|L2.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L2.28|
                  |L2.16|
;;;343      }
;;;344      else
;;;345      {
;;;346        FLASH->ACR &= (~FLASH_ACR_DCEN);
000010  4903              LDR      r1,|L2.32|
000012  6809              LDR      r1,[r1,#0]
000014  f4216180          BIC      r1,r1,#0x400
000018  4a01              LDR      r2,|L2.32|
00001a  6011              STR      r1,[r2,#0]
                  |L2.28|
;;;347      }
;;;348    }
00001c  4770              BX       lr
;;;349    
                          ENDP

00001e  0000              DCW      0x0000
                  |L2.32|
                          DCD      0x40023c00

                          AREA ||i.FLASH_DataCacheReset||, CODE, READONLY, ALIGN=2

                  FLASH_DataCacheReset PROC
;;;366      */
;;;367    void FLASH_DataCacheReset(void)
000000  4803              LDR      r0,|L3.16|
;;;368    {
;;;369      FLASH->ACR |= FLASH_ACR_DCRST;
000002  6800              LDR      r0,[r0,#0]
000004  f4405080          ORR      r0,r0,#0x1000
000008  4901              LDR      r1,|L3.16|
00000a  6008              STR      r0,[r1,#0]
;;;370    }
00000c  4770              BX       lr
;;;371    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      0x40023c00

                          AREA ||i.FLASH_EraseAllBank1Sectors||, CODE, READONLY, ALIGN=2

                  FLASH_EraseAllBank1Sectors PROC
;;;623      */
;;;624    FLASH_Status FLASH_EraseAllBank1Sectors(uint8_t VoltageRange)
000000  b530              PUSH     {r4,r5,lr}
;;;625    {
000002  4602              MOV      r2,r0
;;;626      uint32_t tmp_psize = 0x0;
000004  2500              MOVS     r5,#0
;;;627      FLASH_Status status = FLASH_COMPLETE;
000006  2409              MOVS     r4,#9
;;;628      
;;;629      /* Wait for last operation to be completed */
;;;630      status = FLASH_WaitForLastOperation();
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4604              MOV      r4,r0
;;;631      assert_param(IS_VOLTAGERANGE(VoltageRange));
;;;632      
;;;633      if(VoltageRange == VoltageRange_1)
00000e  b902              CBNZ     r2,|L4.18|
;;;634      {
;;;635         tmp_psize = FLASH_PSIZE_BYTE;
000010  e009              B        |L4.38|
                  |L4.18|
;;;636      }
;;;637      else if(VoltageRange == VoltageRange_2)
000012  2a01              CMP      r2,#1
000014  d101              BNE      |L4.26|
;;;638      {
;;;639        tmp_psize = FLASH_PSIZE_HALF_WORD;
000016  0215              LSLS     r5,r2,#8
000018  e005              B        |L4.38|
                  |L4.26|
;;;640      }
;;;641      else if(VoltageRange == VoltageRange_3)
00001a  2a02              CMP      r2,#2
00001c  d101              BNE      |L4.34|
;;;642      {
;;;643        tmp_psize = FLASH_PSIZE_WORD;
00001e  0215              LSLS     r5,r2,#8
000020  e001              B        |L4.38|
                  |L4.34|
;;;644      }
;;;645      else
;;;646      {
;;;647        tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
000022  f44f7540          MOV      r5,#0x300
                  |L4.38|
;;;648      }  
;;;649      if(status == FLASH_COMPLETE)
000026  2c09              CMP      r4,#9
000028  d11c              BNE      |L4.100|
;;;650      {
;;;651        /* if the previous operation is completed, proceed to erase all sectors */
;;;652         FLASH->CR &= CR_PSIZE_MASK;
00002a  480f              LDR      r0,|L4.104|
00002c  6800              LDR      r0,[r0,#0]
00002e  f4207040          BIC      r0,r0,#0x300
000032  490d              LDR      r1,|L4.104|
000034  6008              STR      r0,[r1,#0]
;;;653         FLASH->CR |= tmp_psize;
000036  4608              MOV      r0,r1
000038  6800              LDR      r0,[r0,#0]
00003a  4328              ORRS     r0,r0,r5
00003c  6008              STR      r0,[r1,#0]
;;;654         FLASH->CR |= FLASH_CR_MER1;
00003e  4608              MOV      r0,r1
000040  6800              LDR      r0,[r0,#0]
000042  f0400004          ORR      r0,r0,#4
000046  6008              STR      r0,[r1,#0]
;;;655         FLASH->CR |= FLASH_CR_STRT;
000048  4608              MOV      r0,r1
00004a  6800              LDR      r0,[r0,#0]
00004c  f4403080          ORR      r0,r0,#0x10000
000050  6008              STR      r0,[r1,#0]
;;;656        
;;;657        /* Wait for last operation to be completed */
;;;658        status = FLASH_WaitForLastOperation();
000052  f7fffffe          BL       FLASH_WaitForLastOperation
000056  4604              MOV      r4,r0
;;;659    
;;;660        /* if the erase operation is completed, disable the MER Bit */
;;;661        FLASH->CR &= (~FLASH_CR_MER1);
000058  4803              LDR      r0,|L4.104|
00005a  6800              LDR      r0,[r0,#0]
00005c  f0200004          BIC      r0,r0,#4
000060  4901              LDR      r1,|L4.104|
000062  6008              STR      r0,[r1,#0]
                  |L4.100|
;;;662    
;;;663      }   
;;;664      /* Return the Erase Status */
;;;665      return status;
000064  4620              MOV      r0,r4
;;;666    }
000066  bd30              POP      {r4,r5,pc}
;;;667    
                          ENDP

                  |L4.104|
                          DCD      0x40023c10

                          AREA ||i.FLASH_EraseAllBank2Sectors||, CODE, READONLY, ALIGN=2

                  FLASH_EraseAllBank2Sectors PROC
;;;690      */
;;;691    FLASH_Status FLASH_EraseAllBank2Sectors(uint8_t VoltageRange)
000000  b530              PUSH     {r4,r5,lr}
;;;692    {
000002  4602              MOV      r2,r0
;;;693      uint32_t tmp_psize = 0x0;
000004  2500              MOVS     r5,#0
;;;694      FLASH_Status status = FLASH_COMPLETE;
000006  2409              MOVS     r4,#9
;;;695      
;;;696      /* Wait for last operation to be completed */
;;;697      status = FLASH_WaitForLastOperation();
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4604              MOV      r4,r0
;;;698      assert_param(IS_VOLTAGERANGE(VoltageRange));
;;;699      
;;;700      if(VoltageRange == VoltageRange_1)
00000e  b902              CBNZ     r2,|L5.18|
;;;701      {
;;;702         tmp_psize = FLASH_PSIZE_BYTE;
000010  e009              B        |L5.38|
                  |L5.18|
;;;703      }
;;;704      else if(VoltageRange == VoltageRange_2)
000012  2a01              CMP      r2,#1
000014  d101              BNE      |L5.26|
;;;705      {
;;;706        tmp_psize = FLASH_PSIZE_HALF_WORD;
000016  0215              LSLS     r5,r2,#8
000018  e005              B        |L5.38|
                  |L5.26|
;;;707      }
;;;708      else if(VoltageRange == VoltageRange_3)
00001a  2a02              CMP      r2,#2
00001c  d101              BNE      |L5.34|
;;;709      {
;;;710        tmp_psize = FLASH_PSIZE_WORD;
00001e  0215              LSLS     r5,r2,#8
000020  e001              B        |L5.38|
                  |L5.34|
;;;711      }
;;;712      else
;;;713      {
;;;714        tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
000022  f44f7540          MOV      r5,#0x300
                  |L5.38|
;;;715      }  
;;;716      if(status == FLASH_COMPLETE)
000026  2c09              CMP      r4,#9
000028  d11c              BNE      |L5.100|
;;;717      {
;;;718        /* if the previous operation is completed, proceed to erase all sectors */
;;;719         FLASH->CR &= CR_PSIZE_MASK;
00002a  480f              LDR      r0,|L5.104|
00002c  6800              LDR      r0,[r0,#0]
00002e  f4207040          BIC      r0,r0,#0x300
000032  490d              LDR      r1,|L5.104|
000034  6008              STR      r0,[r1,#0]
;;;720         FLASH->CR |= tmp_psize;
000036  4608              MOV      r0,r1
000038  6800              LDR      r0,[r0,#0]
00003a  4328              ORRS     r0,r0,r5
00003c  6008              STR      r0,[r1,#0]
;;;721         FLASH->CR |= FLASH_CR_MER2;
00003e  4608              MOV      r0,r1
000040  6800              LDR      r0,[r0,#0]
000042  f4404000          ORR      r0,r0,#0x8000
000046  6008              STR      r0,[r1,#0]
;;;722         FLASH->CR |= FLASH_CR_STRT;
000048  4608              MOV      r0,r1
00004a  6800              LDR      r0,[r0,#0]
00004c  f4403080          ORR      r0,r0,#0x10000
000050  6008              STR      r0,[r1,#0]
;;;723        
;;;724        /* Wait for last operation to be completed */
;;;725        status = FLASH_WaitForLastOperation();
000052  f7fffffe          BL       FLASH_WaitForLastOperation
000056  4604              MOV      r4,r0
;;;726    
;;;727        /* if the erase operation is completed, disable the MER Bit */
;;;728        FLASH->CR &= (~FLASH_CR_MER2);
000058  4803              LDR      r0,|L5.104|
00005a  6800              LDR      r0,[r0,#0]
00005c  f4204000          BIC      r0,r0,#0x8000
000060  4901              LDR      r1,|L5.104|
000062  6008              STR      r0,[r1,#0]
                  |L5.100|
;;;729    
;;;730      }   
;;;731      /* Return the Erase Status */
;;;732      return status;
000064  4620              MOV      r0,r4
;;;733    }
000066  bd30              POP      {r4,r5,pc}
;;;734    
                          ENDP

                  |L5.104|
                          DCD      0x40023c10

                          AREA ||i.FLASH_EraseAllSectors||, CODE, READONLY, ALIGN=2

                  FLASH_EraseAllSectors PROC
;;;542      */
;;;543    FLASH_Status FLASH_EraseAllSectors(uint8_t VoltageRange)
000000  b530              PUSH     {r4,r5,lr}
;;;544    {
000002  4602              MOV      r2,r0
;;;545      uint32_t tmp_psize = 0x0;
000004  2500              MOVS     r5,#0
;;;546      FLASH_Status status = FLASH_COMPLETE;
000006  2409              MOVS     r4,#9
;;;547      
;;;548      /* Wait for last operation to be completed */
;;;549      status = FLASH_WaitForLastOperation();
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4604              MOV      r4,r0
;;;550      assert_param(IS_VOLTAGERANGE(VoltageRange));
;;;551      
;;;552      if(VoltageRange == VoltageRange_1)
00000e  b902              CBNZ     r2,|L6.18|
;;;553      {
;;;554         tmp_psize = FLASH_PSIZE_BYTE;
000010  e009              B        |L6.38|
                  |L6.18|
;;;555      }
;;;556      else if(VoltageRange == VoltageRange_2)
000012  2a01              CMP      r2,#1
000014  d101              BNE      |L6.26|
;;;557      {
;;;558        tmp_psize = FLASH_PSIZE_HALF_WORD;
000016  0215              LSLS     r5,r2,#8
000018  e005              B        |L6.38|
                  |L6.26|
;;;559      }
;;;560      else if(VoltageRange == VoltageRange_3)
00001a  2a02              CMP      r2,#2
00001c  d101              BNE      |L6.34|
;;;561      {
;;;562        tmp_psize = FLASH_PSIZE_WORD;
00001e  0215              LSLS     r5,r2,#8
000020  e001              B        |L6.38|
                  |L6.34|
;;;563      }
;;;564      else
;;;565      {
;;;566        tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
000022  f44f7540          MOV      r5,#0x300
                  |L6.38|
;;;567      }  
;;;568      if(status == FLASH_COMPLETE)
000026  2c09              CMP      r4,#9
000028  d11e              BNE      |L6.104|
;;;569      {
;;;570        /* if the previous operation is completed, proceed to erase all sectors */
;;;571    #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)
;;;572        FLASH->CR &= CR_PSIZE_MASK;
00002a  4810              LDR      r0,|L6.108|
00002c  6800              LDR      r0,[r0,#0]
00002e  f4207040          BIC      r0,r0,#0x300
000032  490e              LDR      r1,|L6.108|
000034  6008              STR      r0,[r1,#0]
;;;573        FLASH->CR |= tmp_psize;
000036  4608              MOV      r0,r1
000038  6800              LDR      r0,[r0,#0]
00003a  4328              ORRS     r0,r0,r5
00003c  6008              STR      r0,[r1,#0]
;;;574        FLASH->CR |= (FLASH_CR_MER1 | FLASH_CR_MER2);
00003e  4608              MOV      r0,r1
000040  6800              LDR      r0,[r0,#0]
000042  13c9              ASRS     r1,r1,#15
000044  4308              ORRS     r0,r0,r1
000046  4909              LDR      r1,|L6.108|
000048  6008              STR      r0,[r1,#0]
;;;575        FLASH->CR |= FLASH_CR_STRT;
00004a  4608              MOV      r0,r1
00004c  6800              LDR      r0,[r0,#0]
00004e  f4403080          ORR      r0,r0,#0x10000
000052  6008              STR      r0,[r1,#0]
;;;576        
;;;577        /* Wait for last operation to be completed */
;;;578        status = FLASH_WaitForLastOperation();
000054  f7fffffe          BL       FLASH_WaitForLastOperation
000058  4604              MOV      r4,r0
;;;579    
;;;580        /* if the erase operation is completed, disable the MER Bit */
;;;581        FLASH->CR &= ~(FLASH_CR_MER1 | FLASH_CR_MER2);
00005a  4804              LDR      r0,|L6.108|
00005c  6800              LDR      r0,[r0,#0]
00005e  f2480104          MOV      r1,#0x8004
000062  4388              BICS     r0,r0,r1
000064  4901              LDR      r1,|L6.108|
000066  6008              STR      r0,[r1,#0]
                  |L6.104|
;;;582    #endif /* STM32F427_437xx ||  STM32F429_439xx ||  STM32F469_479xx */
;;;583    
;;;584    #if defined(STM32F40_41xxx) || defined(STM32F401xx) || defined(STM32F410xx) || defined(STM32F411xE) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
;;;585        FLASH->CR &= CR_PSIZE_MASK;
;;;586        FLASH->CR |= tmp_psize;
;;;587        FLASH->CR |= FLASH_CR_MER;
;;;588        FLASH->CR |= FLASH_CR_STRT;
;;;589        
;;;590        /* Wait for last operation to be completed */
;;;591        status = FLASH_WaitForLastOperation();
;;;592    
;;;593        /* if the erase operation is completed, disable the MER Bit */
;;;594        FLASH->CR &= (~FLASH_CR_MER);
;;;595    #endif /* STM32F40_41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F412xG || STM32F413_423xx || STM32F446xx */
;;;596    
;;;597      }   
;;;598      /* Return the Erase Status */
;;;599      return status;
000068  4620              MOV      r0,r4
;;;600    }
00006a  bd30              POP      {r4,r5,pc}
;;;601    
                          ENDP

                  |L6.108|
                          DCD      0x40023c10

                          AREA ||i.FLASH_EraseSector||, CODE, READONLY, ALIGN=2

                  FLASH_EraseSector PROC
;;;474      */
;;;475    FLASH_Status FLASH_EraseSector(uint32_t FLASH_Sector, uint8_t VoltageRange)
000000  b570              PUSH     {r4-r6,lr}
;;;476    {
000002  4604              MOV      r4,r0
000004  460a              MOV      r2,r1
;;;477      uint32_t tmp_psize = 0x0;
000006  2600              MOVS     r6,#0
;;;478      FLASH_Status status = FLASH_COMPLETE;
000008  2509              MOVS     r5,#9
;;;479    
;;;480      /* Check the parameters */
;;;481      assert_param(IS_FLASH_SECTOR(FLASH_Sector));
;;;482      assert_param(IS_VOLTAGERANGE(VoltageRange));
;;;483      
;;;484      if(VoltageRange == VoltageRange_1)
00000a  b902              CBNZ     r2,|L7.14|
;;;485      {
;;;486         tmp_psize = FLASH_PSIZE_BYTE;
00000c  e009              B        |L7.34|
                  |L7.14|
;;;487      }
;;;488      else if(VoltageRange == VoltageRange_2)
00000e  2a01              CMP      r2,#1
000010  d101              BNE      |L7.22|
;;;489      {
;;;490        tmp_psize = FLASH_PSIZE_HALF_WORD;
000012  0216              LSLS     r6,r2,#8
000014  e005              B        |L7.34|
                  |L7.22|
;;;491      }
;;;492      else if(VoltageRange == VoltageRange_3)
000016  2a02              CMP      r2,#2
000018  d101              BNE      |L7.30|
;;;493      {
;;;494        tmp_psize = FLASH_PSIZE_WORD;
00001a  0216              LSLS     r6,r2,#8
00001c  e001              B        |L7.34|
                  |L7.30|
;;;495      }
;;;496      else
;;;497      {
;;;498        tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
00001e  f44f7640          MOV      r6,#0x300
                  |L7.34|
;;;499      }
;;;500      /* Wait for last operation to be completed */
;;;501      status = FLASH_WaitForLastOperation();
000022  f7fffffe          BL       FLASH_WaitForLastOperation
000026  4605              MOV      r5,r0
;;;502      
;;;503      if(status == FLASH_COMPLETE)
000028  2d09              CMP      r5,#9
00002a  d128              BNE      |L7.126|
;;;504      { 
;;;505        /* if the previous operation is completed, proceed to erase the sector */
;;;506        FLASH->CR &= CR_PSIZE_MASK;
00002c  4815              LDR      r0,|L7.132|
00002e  6800              LDR      r0,[r0,#0]
000030  f4207040          BIC      r0,r0,#0x300
000034  4913              LDR      r1,|L7.132|
000036  6008              STR      r0,[r1,#0]
;;;507        FLASH->CR |= tmp_psize;
000038  4608              MOV      r0,r1
00003a  6800              LDR      r0,[r0,#0]
00003c  4330              ORRS     r0,r0,r6
00003e  6008              STR      r0,[r1,#0]
;;;508        FLASH->CR &= SECTOR_MASK;
000040  4608              MOV      r0,r1
000042  6800              LDR      r0,[r0,#0]
000044  f02000f8          BIC      r0,r0,#0xf8
000048  6008              STR      r0,[r1,#0]
;;;509        FLASH->CR |= FLASH_CR_SER | FLASH_Sector;
00004a  4608              MOV      r0,r1
00004c  6800              LDR      r0,[r0,#0]
00004e  f0440102          ORR      r1,r4,#2
000052  4308              ORRS     r0,r0,r1
000054  490b              LDR      r1,|L7.132|
000056  6008              STR      r0,[r1,#0]
;;;510        FLASH->CR |= FLASH_CR_STRT;
000058  4608              MOV      r0,r1
00005a  6800              LDR      r0,[r0,#0]
00005c  f4403080          ORR      r0,r0,#0x10000
000060  6008              STR      r0,[r1,#0]
;;;511        
;;;512        /* Wait for last operation to be completed */
;;;513        status = FLASH_WaitForLastOperation();
000062  f7fffffe          BL       FLASH_WaitForLastOperation
000066  4605              MOV      r5,r0
;;;514        
;;;515        /* if the erase operation is completed, disable the SER Bit */
;;;516        FLASH->CR &= (~FLASH_CR_SER);
000068  4806              LDR      r0,|L7.132|
00006a  6800              LDR      r0,[r0,#0]
00006c  f0200002          BIC      r0,r0,#2
000070  4904              LDR      r1,|L7.132|
000072  6008              STR      r0,[r1,#0]
;;;517        FLASH->CR &= SECTOR_MASK; 
000074  4608              MOV      r0,r1
000076  6800              LDR      r0,[r0,#0]
000078  f02000f8          BIC      r0,r0,#0xf8
00007c  6008              STR      r0,[r1,#0]
                  |L7.126|
;;;518      }
;;;519      /* Return the Erase Status */
;;;520      return status;
00007e  4628              MOV      r0,r5
;;;521    }
000080  bd70              POP      {r4-r6,pc}
;;;522    
                          ENDP

000082  0000              DCW      0x0000
                  |L7.132|
                          DCD      0x40023c10

                          AREA ||i.FLASH_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  FLASH_GetFlagStatus PROC
;;;1488     */
;;;1489   FlagStatus FLASH_GetFlagStatus(uint32_t FLASH_FLAG)
000000  4601              MOV      r1,r0
;;;1490   {
;;;1491     FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1492     /* Check the parameters */
;;;1493     assert_param(IS_FLASH_GET_FLAG(FLASH_FLAG));
;;;1494   
;;;1495     if((FLASH->SR & FLASH_FLAG) != (uint32_t)RESET)
000004  4a03              LDR      r2,|L8.20|
000006  6812              LDR      r2,[r2,#0]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L8.16|
;;;1496     {
;;;1497       bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L8.18|
                  |L8.16|
;;;1498     }
;;;1499     else
;;;1500     {
;;;1501       bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L8.18|
;;;1502     }
;;;1503     /* Return the new state of FLASH_FLAG (SET or RESET) */
;;;1504     return bitstatus; 
;;;1505   }
000012  4770              BX       lr
;;;1506   
                          ENDP

                  |L8.20|
                          DCD      0x40023c0c

                          AREA ||i.FLASH_GetStatus||, CODE, READONLY, ALIGN=2

                  FLASH_GetStatus PROC
;;;1534     */
;;;1535   FLASH_Status FLASH_GetStatus(void)
000000  2009              MOVS     r0,#9
;;;1536   {
;;;1537     FLASH_Status flashstatus = FLASH_COMPLETE;
;;;1538     
;;;1539     if((FLASH->SR & FLASH_FLAG_BSY) == FLASH_FLAG_BSY) 
000002  4913              LDR      r1,|L9.80|
000004  6809              LDR      r1,[r1,#0]
000006  f4013180          AND      r1,r1,#0x10000
00000a  f5b13f80          CMP      r1,#0x10000
00000e  d101              BNE      |L9.20|
;;;1540     {
;;;1541       flashstatus = FLASH_BUSY;
000010  2001              MOVS     r0,#1
000012  e01c              B        |L9.78|
                  |L9.20|
;;;1542     }
;;;1543     else 
;;;1544     {  
;;;1545       if((FLASH->SR & FLASH_FLAG_WRPERR) != (uint32_t)0x00)
000014  490e              LDR      r1,|L9.80|
000016  6809              LDR      r1,[r1,#0]
000018  f0010110          AND      r1,r1,#0x10
00001c  b109              CBZ      r1,|L9.34|
;;;1546       { 
;;;1547         flashstatus = FLASH_ERROR_WRP;
00001e  2006              MOVS     r0,#6
000020  e015              B        |L9.78|
                  |L9.34|
;;;1548       }
;;;1549       else
;;;1550       {
;;;1551         if((FLASH->SR & FLASH_FLAG_RDERR) != (uint32_t)0x00)
000022  490b              LDR      r1,|L9.80|
000024  6809              LDR      r1,[r1,#0]
000026  f4017180          AND      r1,r1,#0x100
00002a  b109              CBZ      r1,|L9.48|
;;;1552         { 
;;;1553           flashstatus = FLASH_ERROR_RD;
00002c  2002              MOVS     r0,#2
00002e  e00e              B        |L9.78|
                  |L9.48|
;;;1554         } 
;;;1555         else 
;;;1556         {
;;;1557           if((FLASH->SR & (uint32_t)0xE0) != (uint32_t)0x00)
000030  4907              LDR      r1,|L9.80|
000032  6809              LDR      r1,[r1,#0]
000034  f00101e0          AND      r1,r1,#0xe0
000038  b109              CBZ      r1,|L9.62|
;;;1558           {
;;;1559             flashstatus = FLASH_ERROR_PROGRAM; 
00003a  2007              MOVS     r0,#7
00003c  e007              B        |L9.78|
                  |L9.62|
;;;1560           }
;;;1561           else
;;;1562           {
;;;1563             if((FLASH->SR & FLASH_FLAG_OPERR) != (uint32_t)0x00)
00003e  4904              LDR      r1,|L9.80|
000040  6809              LDR      r1,[r1,#0]
000042  f0010102          AND      r1,r1,#2
000046  b109              CBZ      r1,|L9.76|
;;;1564             {
;;;1565               flashstatus = FLASH_ERROR_OPERATION;
000048  2008              MOVS     r0,#8
00004a  e000              B        |L9.78|
                  |L9.76|
;;;1566             }
;;;1567             else
;;;1568             {
;;;1569               flashstatus = FLASH_COMPLETE;
00004c  2009              MOVS     r0,#9
                  |L9.78|
;;;1570             }
;;;1571           }
;;;1572         }
;;;1573       }
;;;1574     }
;;;1575     /* Return the FLASH Status */
;;;1576     return flashstatus;
;;;1577   }
00004e  4770              BX       lr
;;;1578   
                          ENDP

                  |L9.80|
                          DCD      0x40023c0c

                          AREA ||i.FLASH_ITConfig||, CODE, READONLY, ALIGN=2

                  FLASH_ITConfig PROC
;;;1456     */
;;;1457   void FLASH_ITConfig(uint32_t FLASH_IT, FunctionalState NewState)
000000  b129              CBZ      r1,|L10.14|
;;;1458   {
;;;1459     /* Check the parameters */
;;;1460     assert_param(IS_FLASH_IT(FLASH_IT)); 
;;;1461     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1462   
;;;1463     if(NewState != DISABLE)
;;;1464     {
;;;1465       /* Enable the interrupt sources */
;;;1466       FLASH->CR |= FLASH_IT;
000002  4a06              LDR      r2,|L10.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L10.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L10.24|
                  |L10.14|
;;;1467     }
;;;1468     else
;;;1469     {
;;;1470       /* Disable the interrupt sources */
;;;1471       FLASH->CR &= ~(uint32_t)FLASH_IT;
00000e  4a03              LDR      r2,|L10.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L10.28|
000016  601a              STR      r2,[r3,#0]
                  |L10.24|
;;;1472     }
;;;1473   }
000018  4770              BX       lr
;;;1474   
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      0x40023c10

                          AREA ||i.FLASH_InstructionCacheCmd||, CODE, READONLY, ALIGN=2

                  FLASH_InstructionCacheCmd PROC
;;;313      */
;;;314    void FLASH_InstructionCacheCmd(FunctionalState NewState)
000000  b130              CBZ      r0,|L11.16|
;;;315    {
;;;316      /* Check the parameters */
;;;317      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;318      
;;;319      if(NewState != DISABLE)
;;;320      {
;;;321        FLASH->ACR |= FLASH_ACR_ICEN;
000002  4907              LDR      r1,|L11.32|
000004  6809              LDR      r1,[r1,#0]
000006  f4417100          ORR      r1,r1,#0x200
00000a  4a05              LDR      r2,|L11.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L11.28|
                  |L11.16|
;;;322      }
;;;323      else
;;;324      {
;;;325        FLASH->ACR &= (~FLASH_ACR_ICEN);
000010  4903              LDR      r1,|L11.32|
000012  6809              LDR      r1,[r1,#0]
000014  f4217100          BIC      r1,r1,#0x200
000018  4a01              LDR      r2,|L11.32|
00001a  6011              STR      r1,[r2,#0]
                  |L11.28|
;;;326      }
;;;327    }
00001c  4770              BX       lr
;;;328    
                          ENDP

00001e  0000              DCW      0x0000
                  |L11.32|
                          DCD      0x40023c00

                          AREA ||i.FLASH_InstructionCacheReset||, CODE, READONLY, ALIGN=2

                  FLASH_InstructionCacheReset PROC
;;;355      */
;;;356    void FLASH_InstructionCacheReset(void)
000000  4803              LDR      r0,|L12.16|
;;;357    {
;;;358      FLASH->ACR |= FLASH_ACR_ICRST;
000002  6800              LDR      r0,[r0,#0]
000004  f4406000          ORR      r0,r0,#0x800
000008  4901              LDR      r1,|L12.16|
00000a  6008              STR      r0,[r1,#0]
;;;359    }
00000c  4770              BX       lr
;;;360    
                          ENDP

00000e  0000              DCW      0x0000
                  |L12.16|
                          DCD      0x40023c00

                          AREA ||i.FLASH_Lock||, CODE, READONLY, ALIGN=2

                  FLASH_Lock PROC
;;;428      */
;;;429    void FLASH_Lock(void)
000000  4803              LDR      r0,|L13.16|
;;;430    {
;;;431      /* Set the LOCK Bit to lock the FLASH Registers access */
;;;432      FLASH->CR |= FLASH_CR_LOCK;
000002  6800              LDR      r0,[r0,#0]
000004  f0404000          ORR      r0,r0,#0x80000000
000008  4901              LDR      r1,|L13.16|
00000a  6008              STR      r0,[r1,#0]
;;;433    }
00000c  4770              BX       lr
;;;434    
                          ENDP

00000e  0000              DCW      0x0000
                  |L13.16|
                          DCD      0x40023c10

                          AREA ||i.FLASH_OB_BORConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_BORConfig PROC
;;;1301     */
;;;1302   void FLASH_OB_BORConfig(uint8_t OB_BOR)
000000  4905              LDR      r1,|L14.24|
;;;1303   {
;;;1304     /* Check the parameters */
;;;1305     assert_param(IS_OB_BOR(OB_BOR));
;;;1306   
;;;1307     /* Set the BOR Level */
;;;1308     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BOR_LEV);
000002  7809              LDRB     r1,[r1,#0]
000004  f021010c          BIC      r1,r1,#0xc
000008  4a03              LDR      r2,|L14.24|
00000a  7011              STRB     r1,[r2,#0]
;;;1309     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOR;
00000c  4611              MOV      r1,r2
00000e  7809              LDRB     r1,[r1,#0]
000010  4301              ORRS     r1,r1,r0
000012  7011              STRB     r1,[r2,#0]
;;;1310   
;;;1311   }
000014  4770              BX       lr
;;;1312   
                          ENDP

000016  0000              DCW      0x0000
                  |L14.24|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_BootConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_BootConfig PROC
;;;1280     */
;;;1281   void FLASH_OB_BootConfig(uint8_t OB_BOOT)
000000  4905              LDR      r1,|L15.24|
;;;1282   {
;;;1283     /* Check the parameters */
;;;1284     assert_param(IS_OB_BOOT(OB_BOOT));
;;;1285   
;;;1286     /* Set Dual Bank Boot */
;;;1287     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS &= (~FLASH_OPTCR_BFB2);
000002  7809              LDRB     r1,[r1,#0]
000004  f0210110          BIC      r1,r1,#0x10
000008  4a03              LDR      r2,|L15.24|
00000a  7011              STRB     r1,[r2,#0]
;;;1288     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= OB_BOOT;
00000c  4611              MOV      r1,r2
00000e  7809              LDRB     r1,[r1,#0]
000010  4301              ORRS     r1,r1,r0
000012  7011              STRB     r1,[r2,#0]
;;;1289   
;;;1290   }
000014  4770              BX       lr
;;;1291   
                          ENDP

000016  0000              DCW      0x0000
                  |L15.24|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_GetBOR||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetBOR PROC
;;;1427     */
;;;1428   uint8_t FLASH_OB_GetBOR(void)
000000  4802              LDR      r0,|L16.12|
;;;1429   {
;;;1430     /* Return the FLASH BOR level */
;;;1431     return (uint8_t)(*(__IO uint8_t *)(OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0C);
000002  7800              LDRB     r0,[r0,#0]
000004  f000000c          AND      r0,r0,#0xc
;;;1432   }
000008  4770              BX       lr
;;;1433   
                          ENDP

00000a  0000              DCW      0x0000
                  |L16.12|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_GetPCROP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetPCROP PROC
;;;1376     */
;;;1377   uint16_t FLASH_OB_GetPCROP(void)
000000  4801              LDR      r0,|L17.8|
;;;1378   {
;;;1379     /* Return the FLASH PC Read/write protection Register value */
;;;1380     return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
000002  8800              LDRH     r0,[r0,#0]
;;;1381   }
000004  4770              BX       lr
;;;1382   
                          ENDP

000006  0000              DCW      0x0000
                  |L17.8|
                          DCD      0x40023c16

                          AREA ||i.FLASH_OB_GetPCROP1||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetPCROP1 PROC
;;;1390     */
;;;1391   uint16_t FLASH_OB_GetPCROP1(void)
000000  4801              LDR      r0,|L18.8|
;;;1392   {
;;;1393     /* Return the FLASH write protection Register value */
;;;1394     return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
000002  8800              LDRH     r0,[r0,#0]
;;;1395   }
000004  4770              BX       lr
;;;1396   
                          ENDP

000006  0000              DCW      0x0000
                  |L18.8|
                          DCD      0x40023c1a

                          AREA ||i.FLASH_OB_GetRDP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetRDP PROC
;;;1403     */
;;;1404   FlagStatus FLASH_OB_GetRDP(void)
000000  2000              MOVS     r0,#0
;;;1405   {
;;;1406     FlagStatus readstatus = RESET;
;;;1407   
;;;1408     if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS) != (uint8_t)OB_RDP_Level_0))
000002  4904              LDR      r1,|L19.20|
000004  7809              LDRB     r1,[r1,#0]
000006  29aa              CMP      r1,#0xaa
000008  d001              BEQ      |L19.14|
;;;1409     {
;;;1410       readstatus = SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L19.16|
                  |L19.14|
;;;1411     }
;;;1412     else
;;;1413     {
;;;1414       readstatus = RESET;
00000e  2000              MOVS     r0,#0
                  |L19.16|
;;;1415     }
;;;1416     return readstatus;
;;;1417   }
000010  4770              BX       lr
;;;1418   
                          ENDP

000012  0000              DCW      0x0000
                  |L19.20|
                          DCD      0x40023c15

                          AREA ||i.FLASH_OB_GetUser||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetUser PROC
;;;1337     */
;;;1338   uint8_t FLASH_OB_GetUser(void)
000000  4802              LDR      r0,|L20.12|
;;;1339   {
;;;1340     /* Return the User Option Byte */
;;;1341     return (uint8_t)(FLASH->OPTCR >> 5);
000002  6800              LDR      r0,[r0,#0]
000004  f3c01047          UBFX     r0,r0,#5,#8
;;;1342   }
000008  4770              BX       lr
;;;1343   
                          ENDP

00000a  0000              DCW      0x0000
                  |L20.12|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_GetWRP||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetWRP PROC
;;;1348     */
;;;1349   uint16_t FLASH_OB_GetWRP(void)
000000  4801              LDR      r0,|L21.8|
;;;1350   {
;;;1351     /* Return the FLASH write protection Register value */
;;;1352     return (*(__IO uint16_t *)(OPTCR_BYTE2_ADDRESS));
000002  8800              LDRH     r0,[r0,#0]
;;;1353   }
000004  4770              BX       lr
;;;1354   
                          ENDP

000006  0000              DCW      0x0000
                  |L21.8|
                          DCD      0x40023c16

                          AREA ||i.FLASH_OB_GetWRP1||, CODE, READONLY, ALIGN=2

                  FLASH_OB_GetWRP1 PROC
;;;1362     */
;;;1363   uint16_t FLASH_OB_GetWRP1(void)
000000  4801              LDR      r0,|L22.8|
;;;1364   {
;;;1365     /* Return the FLASH write protection Register value */
;;;1366     return (*(__IO uint16_t *)(OPTCR1_BYTE2_ADDRESS));
000002  8800              LDRH     r0,[r0,#0]
;;;1367   }
000004  4770              BX       lr
;;;1368   
                          ENDP

000006  0000              DCW      0x0000
                  |L22.8|
                          DCD      0x40023c1a

                          AREA ||i.FLASH_OB_Launch||, CODE, READONLY, ALIGN=2

                  FLASH_OB_Launch PROC
;;;1318     */
;;;1319   FLASH_Status FLASH_OB_Launch(void)
000000  b500              PUSH     {lr}
;;;1320   {
;;;1321     FLASH_Status status = FLASH_COMPLETE;
000002  2209              MOVS     r2,#9
;;;1322   
;;;1323     /* Set the OPTSTRT bit in OPTCR register */
;;;1324     *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS |= FLASH_OPTCR_OPTSTRT;
000004  4805              LDR      r0,|L23.28|
000006  7800              LDRB     r0,[r0,#0]
000008  f0400002          ORR      r0,r0,#2
00000c  4903              LDR      r1,|L23.28|
00000e  7008              STRB     r0,[r1,#0]
;;;1325   
;;;1326     /* Wait for last operation to be completed */
;;;1327     status = FLASH_WaitForLastOperation();
000010  f7fffffe          BL       FLASH_WaitForLastOperation
000014  4602              MOV      r2,r0
;;;1328   
;;;1329     return status;
000016  4610              MOV      r0,r2
;;;1330   }
000018  bd00              POP      {pc}
;;;1331   
                          ENDP

00001a  0000              DCW      0x0000
                  |L23.28|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_Lock||, CODE, READONLY, ALIGN=2

                  FLASH_OB_Lock PROC
;;;988      */
;;;989    void FLASH_OB_Lock(void)
000000  4803              LDR      r0,|L24.16|
;;;990    {
;;;991      /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
;;;992      FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
000002  6800              LDR      r0,[r0,#0]
000004  f0400001          ORR      r0,r0,#1
000008  4901              LDR      r1,|L24.16|
00000a  6008              STR      r0,[r1,#0]
;;;993    }
00000c  4770              BX       lr
;;;994    
                          ENDP

00000e  0000              DCW      0x0000
                  |L24.16|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_PCROP1Config||, CODE, READONLY, ALIGN=2

                  FLASH_OB_PCROP1Config PROC
;;;1171     */
;;;1172   void FLASH_OB_PCROP1Config(uint32_t OB_PCROP, FunctionalState NewState)
000000  b530              PUSH     {r4,r5,lr}
;;;1173   { 
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;1174     FLASH_Status status = FLASH_COMPLETE;
000006  2509              MOVS     r5,#9
;;;1175     
;;;1176     /* Check the parameters */
;;;1177     assert_param(IS_OB_PCROP(OB_PCROP));
;;;1178     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1179       
;;;1180     status = FLASH_WaitForLastOperation();
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4605              MOV      r5,r0
;;;1181   
;;;1182     if(status == FLASH_COMPLETE)
00000e  2d09              CMP      r5,#9
000010  d10c              BNE      |L25.44|
;;;1183     { 
;;;1184       if(NewState != DISABLE)
000012  b134              CBZ      r4,|L25.34|
;;;1185       {
;;;1186         *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;
000014  4806              LDR      r0,|L25.48|
000016  8800              LDRH     r0,[r0,#0]
000018  b291              UXTH     r1,r2
00001a  4308              ORRS     r0,r0,r1
00001c  4904              LDR      r1,|L25.48|
00001e  8008              STRH     r0,[r1,#0]
000020  e004              B        |L25.44|
                  |L25.34|
;;;1187       }
;;;1188       else
;;;1189       {
;;;1190         *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_PCROP);
000022  4803              LDR      r0,|L25.48|
000024  8800              LDRH     r0,[r0,#0]
000026  4390              BICS     r0,r0,r2
000028  4901              LDR      r1,|L25.48|
00002a  8008              STRH     r0,[r1,#0]
                  |L25.44|
;;;1191       }
;;;1192     }
;;;1193   }
00002c  bd30              POP      {r4,r5,pc}
;;;1194   
                          ENDP

00002e  0000              DCW      0x0000
                  |L25.48|
                          DCD      0x40023c1a

                          AREA ||i.FLASH_OB_PCROPConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_PCROPConfig PROC
;;;1134     */
;;;1135   void FLASH_OB_PCROPConfig(uint32_t OB_PCROP, FunctionalState NewState)
000000  b530              PUSH     {r4,r5,lr}
;;;1136   { 
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;1137     FLASH_Status status = FLASH_COMPLETE;
000006  2509              MOVS     r5,#9
;;;1138     
;;;1139     /* Check the parameters */
;;;1140     assert_param(IS_OB_PCROP(OB_PCROP));
;;;1141     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1142       
;;;1143     status = FLASH_WaitForLastOperation();
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4605              MOV      r5,r0
;;;1144   
;;;1145     if(status == FLASH_COMPLETE)
00000e  2d09              CMP      r5,#9
000010  d10c              BNE      |L26.44|
;;;1146     { 
;;;1147       if(NewState != DISABLE)
000012  b134              CBZ      r4,|L26.34|
;;;1148       {
;;;1149         *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_PCROP;    
000014  4806              LDR      r0,|L26.48|
000016  8800              LDRH     r0,[r0,#0]
000018  b291              UXTH     r1,r2
00001a  4308              ORRS     r0,r0,r1
00001c  4904              LDR      r1,|L26.48|
00001e  8008              STRH     r0,[r1,#0]
000020  e004              B        |L26.44|
                  |L26.34|
;;;1150       }
;;;1151       else
;;;1152       {
;;;1153         *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_PCROP);
000022  4803              LDR      r0,|L26.48|
000024  8800              LDRH     r0,[r0,#0]
000026  4390              BICS     r0,r0,r2
000028  4901              LDR      r1,|L26.48|
00002a  8008              STRH     r0,[r1,#0]
                  |L26.44|
;;;1154       }
;;;1155     }
;;;1156   }
00002c  bd30              POP      {r4,r5,pc}
;;;1157   
                          ENDP

00002e  0000              DCW      0x0000
                  |L26.48|
                          DCD      0x40023c16

                          AREA ||i.FLASH_OB_PCROPSelectionConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_PCROPSelectionConfig PROC
;;;1103     */
;;;1104   void FLASH_OB_PCROPSelectionConfig(uint8_t OB_PcROP)
000000  21ff              MOVS     r1,#0xff
;;;1105   {  
;;;1106     uint8_t optiontmp = 0xFF;
;;;1107         
;;;1108     /* Check the parameters */
;;;1109     assert_param(IS_OB_PCROP_SELECT(OB_PcROP));
;;;1110     
;;;1111     /* Mask SPRMOD bit */
;;;1112     optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE3_ADDRESS) & (uint8_t)0x7F); 
000002  4a04              LDR      r2,|L27.20|
000004  7812              LDRB     r2,[r2,#0]
000006  f002017f          AND      r1,r2,#0x7f
;;;1113     /* Update Option Byte */
;;;1114     *(__IO uint8_t *)OPTCR_BYTE3_ADDRESS = (uint8_t)(OB_PcROP | optiontmp); 
00000a  ea400201          ORR      r2,r0,r1
00000e  4b01              LDR      r3,|L27.20|
000010  701a              STRB     r2,[r3,#0]
;;;1115       
;;;1116   }
000012  4770              BX       lr
;;;1117   
                          ENDP

                  |L27.20|
                          DCD      0x40023c17

                          AREA ||i.FLASH_OB_RDPConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_RDPConfig PROC
;;;1207     */
;;;1208   void FLASH_OB_RDPConfig(uint8_t OB_RDP)
000000  b510              PUSH     {r4,lr}
;;;1209   {
000002  4602              MOV      r2,r0
;;;1210     FLASH_Status status = FLASH_COMPLETE;
000004  2409              MOVS     r4,#9
;;;1211   
;;;1212     /* Check the parameters */
;;;1213     assert_param(IS_OB_RDP(OB_RDP));
;;;1214   
;;;1215     status = FLASH_WaitForLastOperation();
000006  f7fffffe          BL       FLASH_WaitForLastOperation
00000a  4604              MOV      r4,r0
;;;1216   
;;;1217     if(status == FLASH_COMPLETE)
00000c  2c09              CMP      r4,#9
00000e  d101              BNE      |L28.20|
;;;1218     {
;;;1219       *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = OB_RDP;
000010  4801              LDR      r0,|L28.24|
000012  7002              STRB     r2,[r0,#0]
                  |L28.20|
;;;1220   
;;;1221     }
;;;1222   }
000014  bd10              POP      {r4,pc}
;;;1223   
                          ENDP

000016  0000              DCW      0x0000
                  |L28.24|
                          DCD      0x40023c15

                          AREA ||i.FLASH_OB_Unlock||, CODE, READONLY, ALIGN=2

                  FLASH_OB_Unlock PROC
;;;973      */
;;;974    void FLASH_OB_Unlock(void)
000000  4805              LDR      r0,|L29.24|
;;;975    {
;;;976      if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
000002  6800              LDR      r0,[r0,#0]
000004  f0000001          AND      r0,r0,#1
000008  b128              CBZ      r0,|L29.22|
;;;977      {
;;;978        /* Authorizes the Option Byte register programming */
;;;979        FLASH->OPTKEYR = FLASH_OPT_KEY1;
00000a  4804              LDR      r0,|L29.28|
00000c  4902              LDR      r1,|L29.24|
00000e  390c              SUBS     r1,r1,#0xc
000010  6008              STR      r0,[r1,#0]
;;;980        FLASH->OPTKEYR = FLASH_OPT_KEY2;
000012  4803              LDR      r0,|L29.32|
000014  6008              STR      r0,[r1,#0]
                  |L29.22|
;;;981      }  
;;;982    }
000016  4770              BX       lr
;;;983    
                          ENDP

                  |L29.24|
                          DCD      0x40023c14
                  |L29.28|
                          DCD      0x08192a3b
                  |L29.32|
                          DCD      0x4c5d6e7f

                          AREA ||i.FLASH_OB_UserConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_UserConfig PROC
;;;1239     */
;;;1240   void FLASH_OB_UserConfig(uint8_t OB_IWDG, uint8_t OB_STOP, uint8_t OB_STDBY)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1241   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1242     uint8_t optiontmp = 0xFF;
000006  26ff              MOVS     r6,#0xff
;;;1243     FLASH_Status status = FLASH_COMPLETE; 
000008  2709              MOVS     r7,#9
;;;1244   
;;;1245     /* Check the parameters */
;;;1246     assert_param(IS_OB_IWDG_SOURCE(OB_IWDG));
;;;1247     assert_param(IS_OB_STOP_SOURCE(OB_STOP));
;;;1248     assert_param(IS_OB_STDBY_SOURCE(OB_STDBY));
;;;1249   
;;;1250     /* Wait for last operation to be completed */
;;;1251     status = FLASH_WaitForLastOperation();
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
00000e  4607              MOV      r7,r0
;;;1252     
;;;1253     if(status == FLASH_COMPLETE)
000010  2f09              CMP      r7,#9
000012  d109              BNE      |L30.40|
;;;1254     { 
;;;1255   #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)
;;;1256       /* Mask OPTLOCK, OPTSTRT, BOR_LEV and BFB2 bits */
;;;1257       optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x1F);
000014  4805              LDR      r0,|L30.44|
000016  7800              LDRB     r0,[r0,#0]
000018  f000061f          AND      r6,r0,#0x1f
;;;1258   #endif /* STM32F427_437xx ||  STM32F429_439xx ||  STM32F469_479xx */
;;;1259   
;;;1260   #if defined(STM32F40_41xxx) || defined(STM32F401xx) || defined(STM32F410xx) || defined(STM32F411xE) || defined(STM32F446xx)
;;;1261       /* Mask OPTLOCK, OPTSTRT and BOR_LEV bits */
;;;1262       optiontmp =  (uint8_t)((*(__IO uint8_t *)OPTCR_BYTE0_ADDRESS) & (uint8_t)0x0F); 
;;;1263   #endif /* STM32F40_41xxx || STM32F401xx || STM32F410xx || STM32F411xE || STM32F446xx */ 
;;;1264   
;;;1265       /* Update User Option Byte */
;;;1266       *(__IO uint8_t *)OPTCR_BYTE0_ADDRESS = OB_IWDG | (uint8_t)(OB_STDBY | (uint8_t)(OB_STOP | ((uint8_t)optiontmp))); 
00001c  ea450006          ORR      r0,r5,r6
000020  4310              ORRS     r0,r0,r2
000022  4320              ORRS     r0,r0,r4
000024  4901              LDR      r1,|L30.44|
000026  7008              STRB     r0,[r1,#0]
                  |L30.40|
;;;1267     }  
;;;1268   }
000028  bdf0              POP      {r4-r7,pc}
;;;1269   
                          ENDP

00002a  0000              DCW      0x0000
                  |L30.44|
                          DCD      0x40023c14

                          AREA ||i.FLASH_OB_WRP1Config||, CODE, READONLY, ALIGN=2

                  FLASH_OB_WRP1Config PROC
;;;1053     */
;;;1054   void FLASH_OB_WRP1Config(uint32_t OB_WRP, FunctionalState NewState)
000000  b530              PUSH     {r4,r5,lr}
;;;1055   { 
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;1056     FLASH_Status status = FLASH_COMPLETE;
000006  2509              MOVS     r5,#9
;;;1057     
;;;1058     /* Check the parameters */
;;;1059     assert_param(IS_OB_WRP(OB_WRP));
;;;1060     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1061       
;;;1062     status = FLASH_WaitForLastOperation();
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4605              MOV      r5,r0
;;;1063   
;;;1064     if(status == FLASH_COMPLETE)
00000e  2d09              CMP      r5,#9
000010  d10c              BNE      |L31.44|
;;;1065     { 
;;;1066       if(NewState != DISABLE)
000012  b12c              CBZ      r4,|L31.32|
;;;1067       {
;;;1068         *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS &= (~OB_WRP);
000014  4806              LDR      r0,|L31.48|
000016  8800              LDRH     r0,[r0,#0]
000018  4390              BICS     r0,r0,r2
00001a  4905              LDR      r1,|L31.48|
00001c  8008              STRH     r0,[r1,#0]
00001e  e005              B        |L31.44|
                  |L31.32|
;;;1069       }
;;;1070       else
;;;1071       {
;;;1072         *(__IO uint16_t*)OPTCR1_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
000020  4803              LDR      r0,|L31.48|
000022  8800              LDRH     r0,[r0,#0]
000024  b291              UXTH     r1,r2
000026  4308              ORRS     r0,r0,r1
000028  4901              LDR      r1,|L31.48|
00002a  8008              STRH     r0,[r1,#0]
                  |L31.44|
;;;1073       }
;;;1074     }
;;;1075   }
00002c  bd30              POP      {r4,r5,pc}
;;;1076   
                          ENDP

00002e  0000              DCW      0x0000
                  |L31.48|
                          DCD      0x40023c1a

                          AREA ||i.FLASH_OB_WRPConfig||, CODE, READONLY, ALIGN=2

                  FLASH_OB_WRPConfig PROC
;;;1011     */
;;;1012   void FLASH_OB_WRPConfig(uint32_t OB_WRP, FunctionalState NewState)
000000  b530              PUSH     {r4,r5,lr}
;;;1013   { 
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;1014     FLASH_Status status = FLASH_COMPLETE;
000006  2509              MOVS     r5,#9
;;;1015     
;;;1016     /* Check the parameters */
;;;1017     assert_param(IS_OB_WRP(OB_WRP));
;;;1018     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1019       
;;;1020     status = FLASH_WaitForLastOperation();
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4605              MOV      r5,r0
;;;1021   
;;;1022     if(status == FLASH_COMPLETE)
00000e  2d09              CMP      r5,#9
000010  d10c              BNE      |L32.44|
;;;1023     { 
;;;1024       if(NewState != DISABLE)
000012  b12c              CBZ      r4,|L32.32|
;;;1025       {
;;;1026         *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS &= (~OB_WRP);
000014  4806              LDR      r0,|L32.48|
000016  8800              LDRH     r0,[r0,#0]
000018  4390              BICS     r0,r0,r2
00001a  4905              LDR      r1,|L32.48|
00001c  8008              STRH     r0,[r1,#0]
00001e  e005              B        |L32.44|
                  |L32.32|
;;;1027       }
;;;1028       else
;;;1029       {
;;;1030         *(__IO uint16_t*)OPTCR_BYTE2_ADDRESS |= (uint16_t)OB_WRP;
000020  4803              LDR      r0,|L32.48|
000022  8800              LDRH     r0,[r0,#0]
000024  b291              UXTH     r1,r2
000026  4308              ORRS     r0,r0,r1
000028  4901              LDR      r1,|L32.48|
00002a  8008              STRH     r0,[r1,#0]
                  |L32.44|
;;;1031       }
;;;1032     }
;;;1033   }
00002c  bd30              POP      {r4,r5,pc}
;;;1034   
                          ENDP

00002e  0000              DCW      0x0000
                  |L32.48|
                          DCD      0x40023c16

                          AREA ||i.FLASH_PrefetchBufferCmd||, CODE, READONLY, ALIGN=2

                  FLASH_PrefetchBufferCmd PROC
;;;291      */
;;;292    void FLASH_PrefetchBufferCmd(FunctionalState NewState)
000000  b130              CBZ      r0,|L33.16|
;;;293    {
;;;294      /* Check the parameters */
;;;295      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;296      
;;;297      /* Enable or disable the Prefetch Buffer */
;;;298      if(NewState != DISABLE)
;;;299      {
;;;300        FLASH->ACR |= FLASH_ACR_PRFTEN;
000002  4907              LDR      r1,|L33.32|
000004  6809              LDR      r1,[r1,#0]
000006  f4417180          ORR      r1,r1,#0x100
00000a  4a05              LDR      r2,|L33.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L33.28|
                  |L33.16|
;;;301      }
;;;302      else
;;;303      {
;;;304        FLASH->ACR &= (~FLASH_ACR_PRFTEN);
000010  4903              LDR      r1,|L33.32|
000012  6809              LDR      r1,[r1,#0]
000014  f4217180          BIC      r1,r1,#0x100
000018  4a01              LDR      r2,|L33.32|
00001a  6011              STR      r1,[r2,#0]
                  |L33.28|
;;;305      }
;;;306    }
00001c  4770              BX       lr
;;;307    
                          ENDP

00001e  0000              DCW      0x0000
                  |L33.32|
                          DCD      0x40023c00

                          AREA ||i.FLASH_ProgramByte||, CODE, READONLY, ALIGN=2

                  FLASH_ProgramByte PROC
;;;874      */
;;;875    FLASH_Status FLASH_ProgramByte(uint32_t Address, uint8_t Data)
000000  b530              PUSH     {r4,r5,lr}
;;;876    {
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;877      FLASH_Status status = FLASH_COMPLETE;
000006  2509              MOVS     r5,#9
;;;878    
;;;879      /* Check the parameters */
;;;880      assert_param(IS_FLASH_ADDRESS(Address));
;;;881    
;;;882      /* Wait for last operation to be completed */
;;;883      status = FLASH_WaitForLastOperation();
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4605              MOV      r5,r0
;;;884      
;;;885      if(status == FLASH_COMPLETE)
00000e  2d09              CMP      r5,#9
000010  d117              BNE      |L34.66|
;;;886      {
;;;887        /* if the previous operation is completed, proceed to program the new data */
;;;888        FLASH->CR &= CR_PSIZE_MASK;
000012  480d              LDR      r0,|L34.72|
000014  6800              LDR      r0,[r0,#0]
000016  f4207040          BIC      r0,r0,#0x300
00001a  490b              LDR      r1,|L34.72|
00001c  6008              STR      r0,[r1,#0]
;;;889        FLASH->CR |= FLASH_PSIZE_BYTE;
00001e  4608              MOV      r0,r1
000020  6800              LDR      r0,[r0,#0]
000022  6008              STR      r0,[r1,#0]
;;;890        FLASH->CR |= FLASH_CR_PG;
000024  4608              MOV      r0,r1
000026  6800              LDR      r0,[r0,#0]
000028  f0400001          ORR      r0,r0,#1
00002c  6008              STR      r0,[r1,#0]
;;;891      
;;;892        *(__IO uint8_t*)Address = Data;
00002e  7014              STRB     r4,[r2,#0]
;;;893            
;;;894        /* Wait for last operation to be completed */
;;;895        status = FLASH_WaitForLastOperation();
000030  f7fffffe          BL       FLASH_WaitForLastOperation
000034  4605              MOV      r5,r0
;;;896    
;;;897        /* if the program operation is completed, disable the PG Bit */
;;;898        FLASH->CR &= (~FLASH_CR_PG);
000036  4804              LDR      r0,|L34.72|
000038  6800              LDR      r0,[r0,#0]
00003a  f0200001          BIC      r0,r0,#1
00003e  4902              LDR      r1,|L34.72|
000040  6008              STR      r0,[r1,#0]
                  |L34.66|
;;;899      } 
;;;900    
;;;901      /* Return the Program Status */
;;;902      return status;
000042  4628              MOV      r0,r5
;;;903    }
000044  bd30              POP      {r4,r5,pc}
;;;904    
                          ENDP

000046  0000              DCW      0x0000
                  |L34.72|
                          DCD      0x40023c10

                          AREA ||i.FLASH_ProgramDoubleWord||, CODE, READONLY, ALIGN=2

                  FLASH_ProgramDoubleWord PROC
;;;747      */
;;;748    FLASH_Status FLASH_ProgramDoubleWord(uint32_t Address, uint64_t Data)
000000  b570              PUSH     {r4-r6,lr}
;;;749    {
000002  4606              MOV      r6,r0
000004  4614              MOV      r4,r2
000006  461d              MOV      r5,r3
;;;750      FLASH_Status status = FLASH_COMPLETE;
000008  2209              MOVS     r2,#9
;;;751    
;;;752      /* Check the parameters */
;;;753      assert_param(IS_FLASH_ADDRESS(Address));
;;;754    
;;;755      /* Wait for last operation to be completed */
;;;756      status = FLASH_WaitForLastOperation();
00000a  f7fffffe          BL       FLASH_WaitForLastOperation
00000e  4602              MOV      r2,r0
;;;757      
;;;758      if(status == FLASH_COMPLETE)
000010  2a09              CMP      r2,#9
000012  d11a              BNE      |L35.74|
;;;759      {
;;;760        /* if the previous operation is completed, proceed to program the new data */
;;;761        FLASH->CR &= CR_PSIZE_MASK;
000014  480e              LDR      r0,|L35.80|
000016  6800              LDR      r0,[r0,#0]
000018  f4207040          BIC      r0,r0,#0x300
00001c  490c              LDR      r1,|L35.80|
00001e  6008              STR      r0,[r1,#0]
;;;762        FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
000020  4608              MOV      r0,r1
000022  6800              LDR      r0,[r0,#0]
000024  f4407040          ORR      r0,r0,#0x300
000028  6008              STR      r0,[r1,#0]
;;;763        FLASH->CR |= FLASH_CR_PG;
00002a  4608              MOV      r0,r1
00002c  6800              LDR      r0,[r0,#0]
00002e  f0400001          ORR      r0,r0,#1
000032  6008              STR      r0,[r1,#0]
;;;764      
;;;765        *(__IO uint64_t*)Address = Data;
000034  6034              STR      r4,[r6,#0]
000036  6075              STR      r5,[r6,#4]
;;;766            
;;;767        /* Wait for last operation to be completed */
;;;768        status = FLASH_WaitForLastOperation();
000038  f7fffffe          BL       FLASH_WaitForLastOperation
00003c  4602              MOV      r2,r0
;;;769    
;;;770        /* if the program operation is completed, disable the PG Bit */
;;;771        FLASH->CR &= (~FLASH_CR_PG);
00003e  4804              LDR      r0,|L35.80|
000040  6800              LDR      r0,[r0,#0]
000042  f0200001          BIC      r0,r0,#1
000046  4902              LDR      r1,|L35.80|
000048  6008              STR      r0,[r1,#0]
                  |L35.74|
;;;772      } 
;;;773      /* Return the Program Status */
;;;774      return status;
00004a  4610              MOV      r0,r2
;;;775    }
00004c  bd70              POP      {r4-r6,pc}
;;;776    
                          ENDP

00004e  0000              DCW      0x0000
                  |L35.80|
                          DCD      0x40023c10

                          AREA ||i.FLASH_ProgramHalfWord||, CODE, READONLY, ALIGN=2

                  FLASH_ProgramHalfWord PROC
;;;832      */
;;;833    FLASH_Status FLASH_ProgramHalfWord(uint32_t Address, uint16_t Data)
000000  b530              PUSH     {r4,r5,lr}
;;;834    {
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;835      FLASH_Status status = FLASH_COMPLETE;
000006  2509              MOVS     r5,#9
;;;836    
;;;837      /* Check the parameters */
;;;838      assert_param(IS_FLASH_ADDRESS(Address));
;;;839    
;;;840      /* Wait for last operation to be completed */
;;;841      status = FLASH_WaitForLastOperation();
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4605              MOV      r5,r0
;;;842      
;;;843      if(status == FLASH_COMPLETE)
00000e  2d09              CMP      r5,#9
000010  d119              BNE      |L36.70|
;;;844      {
;;;845        /* if the previous operation is completed, proceed to program the new data */
;;;846        FLASH->CR &= CR_PSIZE_MASK;
000012  480e              LDR      r0,|L36.76|
000014  6800              LDR      r0,[r0,#0]
000016  f4207040          BIC      r0,r0,#0x300
00001a  490c              LDR      r1,|L36.76|
00001c  6008              STR      r0,[r1,#0]
;;;847        FLASH->CR |= FLASH_PSIZE_HALF_WORD;
00001e  4608              MOV      r0,r1
000020  6800              LDR      r0,[r0,#0]
000022  f4407080          ORR      r0,r0,#0x100
000026  6008              STR      r0,[r1,#0]
;;;848        FLASH->CR |= FLASH_CR_PG;
000028  4608              MOV      r0,r1
00002a  6800              LDR      r0,[r0,#0]
00002c  f0400001          ORR      r0,r0,#1
000030  6008              STR      r0,[r1,#0]
;;;849      
;;;850        *(__IO uint16_t*)Address = Data;
000032  8014              STRH     r4,[r2,#0]
;;;851            
;;;852        /* Wait for last operation to be completed */
;;;853        status = FLASH_WaitForLastOperation();
000034  f7fffffe          BL       FLASH_WaitForLastOperation
000038  4605              MOV      r5,r0
;;;854    
;;;855        /* if the program operation is completed, disable the PG Bit */
;;;856        FLASH->CR &= (~FLASH_CR_PG);
00003a  4804              LDR      r0,|L36.76|
00003c  6800              LDR      r0,[r0,#0]
00003e  f0200001          BIC      r0,r0,#1
000042  4902              LDR      r1,|L36.76|
000044  6008              STR      r0,[r1,#0]
                  |L36.70|
;;;857      } 
;;;858      /* Return the Program Status */
;;;859      return status;
000046  4628              MOV      r0,r5
;;;860    }
000048  bd30              POP      {r4,r5,pc}
;;;861    
                          ENDP

00004a  0000              DCW      0x0000
                  |L36.76|
                          DCD      0x40023c10

                          AREA ||i.FLASH_ProgramWord||, CODE, READONLY, ALIGN=2

                  FLASH_ProgramWord PROC
;;;790      */
;;;791    FLASH_Status FLASH_ProgramWord(uint32_t Address, uint32_t Data)
000000  b530              PUSH     {r4,r5,lr}
;;;792    {
000002  4602              MOV      r2,r0
000004  460c              MOV      r4,r1
;;;793      FLASH_Status status = FLASH_COMPLETE;
000006  2509              MOVS     r5,#9
;;;794    
;;;795      /* Check the parameters */
;;;796      assert_param(IS_FLASH_ADDRESS(Address));
;;;797    
;;;798      /* Wait for last operation to be completed */
;;;799      status = FLASH_WaitForLastOperation();
000008  f7fffffe          BL       FLASH_WaitForLastOperation
00000c  4605              MOV      r5,r0
;;;800      
;;;801      if(status == FLASH_COMPLETE)
00000e  2d09              CMP      r5,#9
000010  d119              BNE      |L37.70|
;;;802      {
;;;803        /* if the previous operation is completed, proceed to program the new data */
;;;804        FLASH->CR &= CR_PSIZE_MASK;
000012  480e              LDR      r0,|L37.76|
000014  6800              LDR      r0,[r0,#0]
000016  f4207040          BIC      r0,r0,#0x300
00001a  490c              LDR      r1,|L37.76|
00001c  6008              STR      r0,[r1,#0]
;;;805        FLASH->CR |= FLASH_PSIZE_WORD;
00001e  4608              MOV      r0,r1
000020  6800              LDR      r0,[r0,#0]
000022  f4407000          ORR      r0,r0,#0x200
000026  6008              STR      r0,[r1,#0]
;;;806        FLASH->CR |= FLASH_CR_PG;
000028  4608              MOV      r0,r1
00002a  6800              LDR      r0,[r0,#0]
00002c  f0400001          ORR      r0,r0,#1
000030  6008              STR      r0,[r1,#0]
;;;807      
;;;808        *(__IO uint32_t*)Address = Data;
000032  6014              STR      r4,[r2,#0]
;;;809            
;;;810        /* Wait for last operation to be completed */
;;;811        status = FLASH_WaitForLastOperation();
000034  f7fffffe          BL       FLASH_WaitForLastOperation
000038  4605              MOV      r5,r0
;;;812    
;;;813        /* if the program operation is completed, disable the PG Bit */
;;;814        FLASH->CR &= (~FLASH_CR_PG);
00003a  4804              LDR      r0,|L37.76|
00003c  6800              LDR      r0,[r0,#0]
00003e  f0200001          BIC      r0,r0,#1
000042  4902              LDR      r1,|L37.76|
000044  6008              STR      r0,[r1,#0]
                  |L37.70|
;;;815      } 
;;;816      /* Return the Program Status */
;;;817      return status;
000046  4628              MOV      r0,r5
;;;818    }
000048  bd30              POP      {r4,r5,pc}
;;;819    
                          ENDP

00004a  0000              DCW      0x0000
                  |L37.76|
                          DCD      0x40023c10

                          AREA ||i.FLASH_SetLatency||, CODE, READONLY, ALIGN=2

                  FLASH_SetLatency PROC
;;;276      */
;;;277    void FLASH_SetLatency(uint32_t FLASH_Latency)
000000  4a01              LDR      r2,|L38.8|
;;;278    {
;;;279      /* Check the parameters */
;;;280      assert_param(IS_FLASH_LATENCY(FLASH_Latency));
;;;281      
;;;282      /* Perform Byte access to FLASH_ACR[8:0] to set the Latency value */
;;;283      *(__IO uint8_t *)ACR_BYTE0_ADDRESS = (uint8_t)FLASH_Latency;
000002  7010              STRB     r0,[r2,#0]
;;;284    }
000004  4770              BX       lr
;;;285    
                          ENDP

000006  0000              DCW      0x0000
                  |L38.8|
                          DCD      0x40023c00

                          AREA ||i.FLASH_Unlock||, CODE, READONLY, ALIGN=2

                  FLASH_Unlock PROC
;;;413      */
;;;414    void FLASH_Unlock(void)
000000  4805              LDR      r0,|L39.24|
;;;415    {
;;;416      if((FLASH->CR & FLASH_CR_LOCK) != RESET)
000002  6800              LDR      r0,[r0,#0]
000004  f0004000          AND      r0,r0,#0x80000000
000008  b128              CBZ      r0,|L39.22|
;;;417      {
;;;418        /* Authorize the FLASH Registers access */
;;;419        FLASH->KEYR = FLASH_KEY1;
00000a  4804              LDR      r0,|L39.28|
00000c  4902              LDR      r1,|L39.24|
00000e  390c              SUBS     r1,r1,#0xc
000010  6008              STR      r0,[r1,#0]
;;;420        FLASH->KEYR = FLASH_KEY2;
000012  4803              LDR      r0,|L39.32|
000014  6008              STR      r0,[r1,#0]
                  |L39.22|
;;;421      }  
;;;422    }
000016  4770              BX       lr
;;;423    
                          ENDP

                  |L39.24|
                          DCD      0x40023c10
                  |L39.28|
                          DCD      0x45670123
                  |L39.32|
                          DCD      0xcdef89ab

                          AREA ||i.FLASH_WaitForLastOperation||, CODE, READONLY, ALIGN=1

                  FLASH_WaitForLastOperation PROC
;;;1584     */
;;;1585   FLASH_Status FLASH_WaitForLastOperation(void)
000000  b508              PUSH     {r3,lr}
;;;1586   { 
;;;1587     __IO FLASH_Status status = FLASH_COMPLETE;
000002  2009              MOVS     r0,#9
000004  9000              STR      r0,[sp,#0]
;;;1588      
;;;1589     /* Check for the FLASH Status */
;;;1590     status = FLASH_GetStatus();
000006  f7fffffe          BL       FLASH_GetStatus
00000a  9000              STR      r0,[sp,#0]
;;;1591   
;;;1592     /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
;;;1593        Even if the FLASH operation fails, the BUSY flag will be reset and an error
;;;1594        flag will be set */
;;;1595     while(status == FLASH_BUSY)
00000c  e002              B        |L40.20|
                  |L40.14|
;;;1596     {
;;;1597       status = FLASH_GetStatus();
00000e  f7fffffe          BL       FLASH_GetStatus
000012  9000              STR      r0,[sp,#0]
                  |L40.20|
000014  f89d0000          LDRB     r0,[sp,#0]            ;1595
000018  2801              CMP      r0,#1                 ;1595
00001a  d0f8              BEQ      |L40.14|
;;;1598     }
;;;1599     /* Return the operation status */
;;;1600     return status;
00001c  f89d0000          LDRB     r0,[sp,#0]
;;;1601   }
000020  bd08              POP      {r3,pc}
;;;1602   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\FWLIB\\src\\stm32f4xx_flash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f4xx_flash_c_a2a150d6____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___17_stm32f4xx_flash_c_a2a150d6____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f4xx_flash_c_a2a150d6____REVSH|
#line 153
|__asm___17_stm32f4xx_flash_c_a2a150d6____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___17_stm32f4xx_flash_c_a2a150d6____RRX|
#line 328
|__asm___17_stm32f4xx_flash_c_a2a150d6____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
