; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\system_stm32f4xx.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\system_stm32f4xx.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\system_stm32f4xx.crf system_stm32f4xx.c]
                          THUMB

                          AREA ||i.SetSysClock||, CODE, READONLY, ALIGN=2

                  SetSysClock PROC
;;;298      */
;;;299    static void SetSysClock(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;300    {
;;;301    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
;;;302    /******************************************************************************/
;;;303    /*            PLL (clocked by HSE) used as System clock source                */
;;;304    /******************************************************************************/
;;;305      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
000002  2000              MOVS     r0,#0
000004  9001              STR      r0,[sp,#4]
000006  9000              STR      r0,[sp,#0]
;;;306      
;;;307      /* Enable HSE */
;;;308      RCC->CR |= ((uint32_t)RCC_CR_HSEON);
000008  4841              LDR      r0,|L1.272|
00000a  6800              LDR      r0,[r0,#0]
00000c  f4403080          ORR      r0,r0,#0x10000
000010  493f              LDR      r1,|L1.272|
000012  6008              STR      r0,[r1,#0]
;;;309     
;;;310      /* Wait till HSE is ready and if Time out is reached exit */
;;;311      do
000014  bf00              NOP      
                  |L1.22|
;;;312      {
;;;313        HSEStatus = RCC->CR & RCC_CR_HSERDY;
000016  483e              LDR      r0,|L1.272|
000018  6800              LDR      r0,[r0,#0]
00001a  f4003000          AND      r0,r0,#0x20000
00001e  9000              STR      r0,[sp,#0]
;;;314        StartUpCounter++;
000020  9801              LDR      r0,[sp,#4]
000022  1c40              ADDS     r0,r0,#1
000024  9001              STR      r0,[sp,#4]
;;;315      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
000026  9800              LDR      r0,[sp,#0]
000028  b918              CBNZ     r0,|L1.50|
00002a  9801              LDR      r0,[sp,#4]
00002c  f5b04fa0          CMP      r0,#0x5000
000030  d1f1              BNE      |L1.22|
                  |L1.50|
;;;316    
;;;317      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
000032  4837              LDR      r0,|L1.272|
000034  6800              LDR      r0,[r0,#0]
000036  f4003000          AND      r0,r0,#0x20000
00003a  b110              CBZ      r0,|L1.66|
;;;318      {
;;;319        HSEStatus = (uint32_t)0x01;
00003c  2001              MOVS     r0,#1
00003e  9000              STR      r0,[sp,#0]
000040  e001              B        |L1.70|
                  |L1.66|
;;;320      }
;;;321      else
;;;322      {
;;;323        HSEStatus = (uint32_t)0x00;
000042  2000              MOVS     r0,#0
000044  9000              STR      r0,[sp,#0]
                  |L1.70|
;;;324      }
;;;325    
;;;326      if (HSEStatus == (uint32_t)0x01)
000046  9800              LDR      r0,[sp,#0]
000048  2801              CMP      r0,#1
00004a  d160              BNE      |L1.270|
;;;327      {
;;;328        /* Select regulator voltage output Scale 1 mode */
;;;329        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
00004c  4830              LDR      r0,|L1.272|
00004e  3040              ADDS     r0,r0,#0x40
000050  6800              LDR      r0,[r0,#0]
000052  f0405080          ORR      r0,r0,#0x10000000
000056  492e              LDR      r1,|L1.272|
000058  3140              ADDS     r1,r1,#0x40
00005a  6008              STR      r0,[r1,#0]
;;;330        PWR->CR |= PWR_CR_VOS;
00005c  482d              LDR      r0,|L1.276|
00005e  6800              LDR      r0,[r0,#0]
000060  f4404040          ORR      r0,r0,#0xc000
000064  492b              LDR      r1,|L1.276|
000066  6008              STR      r0,[r1,#0]
;;;331    
;;;332        /* HCLK = SYSCLK / 1*/
;;;333        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
000068  4829              LDR      r0,|L1.272|
00006a  3008              ADDS     r0,r0,#8
00006c  6800              LDR      r0,[r0,#0]
00006e  4928              LDR      r1,|L1.272|
000070  3108              ADDS     r1,r1,#8
000072  6008              STR      r0,[r1,#0]
;;;334    
;;;335    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
;;;336        /* PCLK2 = HCLK / 2*/
;;;337        RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
000074  4608              MOV      r0,r1
000076  6800              LDR      r0,[r0,#0]
000078  f4404000          ORR      r0,r0,#0x8000
00007c  6008              STR      r0,[r1,#0]
;;;338        
;;;339        /* PCLK1 = HCLK / 4*/
;;;340        RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
00007e  4608              MOV      r0,r1
000080  6800              LDR      r0,[r0,#0]
000082  f44050a0          ORR      r0,r0,#0x1400
000086  6008              STR      r0,[r1,#0]
;;;341    #endif /* STM32F40_41xxx || STM32F427_437x || STM32F429_439xx  || STM32F412xG || STM32F446xx || STM32F469_479xx */
;;;342    
;;;343    #if defined(STM32F401xx) || defined(STM32F413_423xx)
;;;344        /* PCLK2 = HCLK / 1*/
;;;345        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;346        
;;;347        /* PCLK1 = HCLK / 2*/
;;;348        RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;349    #endif /* STM32F401xx || STM32F413_423xx */
;;;350    
;;;351    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F469_479xx)    
;;;352        /* Configure the main PLL */
;;;353        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
000088  4823              LDR      r0,|L1.280|
00008a  1f09              SUBS     r1,r1,#4
00008c  6008              STR      r0,[r1,#0]
;;;354                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;355    #endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */
;;;356    
;;;357    #if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
;;;358        /* Configure the main PLL */
;;;359        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
;;;360                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
;;;361    #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
;;;362        
;;;363        /* Enable the main PLL */
;;;364        RCC->CR |= RCC_CR_PLLON;
00008e  1f08              SUBS     r0,r1,#4
000090  6800              LDR      r0,[r0,#0]
000092  f0407080          ORR      r0,r0,#0x1000000
000096  1f09              SUBS     r1,r1,#4
000098  6008              STR      r0,[r1,#0]
;;;365    
;;;366        /* Wait till the main PLL is ready */
;;;367        while((RCC->CR & RCC_CR_PLLRDY) == 0)
00009a  bf00              NOP      
                  |L1.156|
00009c  481c              LDR      r0,|L1.272|
00009e  6800              LDR      r0,[r0,#0]
0000a0  f0007000          AND      r0,r0,#0x2000000
0000a4  2800              CMP      r0,#0
0000a6  d0f9              BEQ      |L1.156|
;;;368        {
;;;369        }
;;;370       
;;;371    #if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
;;;372        /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
;;;373        PWR->CR |= PWR_CR_ODEN;
0000a8  481a              LDR      r0,|L1.276|
0000aa  6800              LDR      r0,[r0,#0]
0000ac  f4403080          ORR      r0,r0,#0x10000
0000b0  4918              LDR      r1,|L1.276|
0000b2  6008              STR      r0,[r1,#0]
;;;374        while((PWR->CSR & PWR_CSR_ODRDY) == 0)
0000b4  bf00              NOP      
                  |L1.182|
0000b6  4817              LDR      r0,|L1.276|
0000b8  6840              LDR      r0,[r0,#4]
0000ba  f4003080          AND      r0,r0,#0x10000
0000be  2800              CMP      r0,#0
0000c0  d0f9              BEQ      |L1.182|
;;;375        {
;;;376        }
;;;377        PWR->CR |= PWR_CR_ODSWEN;
0000c2  4814              LDR      r0,|L1.276|
0000c4  6800              LDR      r0,[r0,#0]
0000c6  f4403000          ORR      r0,r0,#0x20000
0000ca  4912              LDR      r1,|L1.276|
0000cc  6008              STR      r0,[r1,#0]
;;;378        while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
0000ce  bf00              NOP      
                  |L1.208|
0000d0  4810              LDR      r0,|L1.276|
0000d2  6840              LDR      r0,[r0,#4]
0000d4  f4003000          AND      r0,r0,#0x20000
0000d8  2800              CMP      r0,#0
0000da  d0f9              BEQ      |L1.208|
;;;379        {
;;;380        }      
;;;381        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;382        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
0000dc  f2407005          MOV      r0,#0x705
0000e0  490e              LDR      r1,|L1.284|
0000e2  6008              STR      r0,[r1,#0]
;;;383    #endif /* STM32F427_437x || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
;;;384    
;;;385    #if defined(STM32F40_41xxx)  || defined(STM32F412xG)  
;;;386        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;387        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
;;;388    #endif /* STM32F40_41xxx  || STM32F412xG */
;;;389    
;;;390    #if defined(STM32F413_423xx)  
;;;391        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;392        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_3WS;
;;;393    #endif /* STM32F413_423xx */
;;;394    
;;;395    #if defined(STM32F401xx)
;;;396        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;397        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;398    #endif /* STM32F401xx */
;;;399    
;;;400        /* Select the main PLL as system clock source */
;;;401        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
0000e4  480a              LDR      r0,|L1.272|
0000e6  3008              ADDS     r0,r0,#8
0000e8  6800              LDR      r0,[r0,#0]
0000ea  f0200003          BIC      r0,r0,#3
0000ee  4908              LDR      r1,|L1.272|
0000f0  3108              ADDS     r1,r1,#8
0000f2  6008              STR      r0,[r1,#0]
;;;402        RCC->CFGR |= RCC_CFGR_SW_PLL;
0000f4  4608              MOV      r0,r1
0000f6  6800              LDR      r0,[r0,#0]
0000f8  f0400002          ORR      r0,r0,#2
0000fc  6008              STR      r0,[r1,#0]
;;;403    
;;;404        /* Wait till the main PLL is used as system clock source */
;;;405        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
0000fe  bf00              NOP      
                  |L1.256|
000100  4803              LDR      r0,|L1.272|
000102  3008              ADDS     r0,r0,#8
000104  6800              LDR      r0,[r0,#0]
000106  f000000c          AND      r0,r0,#0xc
00010a  2808              CMP      r0,#8
00010c  d1f8              BNE      |L1.256|
                  |L1.270|
;;;406        {
;;;407        }
;;;408      }
;;;409      else
;;;410      { /* If HSE fails to start-up, the application will have wrong clock
;;;411             configuration. User can add here some code to deal with this error */
;;;412      }
;;;413    #elif defined(STM32F410xx) || defined(STM32F411xE)
;;;414    #if defined(USE_HSE_BYPASS) 
;;;415    /******************************************************************************/
;;;416    /*            PLL (clocked by HSE) used as System clock source                */
;;;417    /******************************************************************************/
;;;418      __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
;;;419      
;;;420      /* Enable HSE and HSE BYPASS */
;;;421      RCC->CR |= ((uint32_t)RCC_CR_HSEON | RCC_CR_HSEBYP);
;;;422     
;;;423      /* Wait till HSE is ready and if Time out is reached exit */
;;;424      do
;;;425      {
;;;426        HSEStatus = RCC->CR & RCC_CR_HSERDY;
;;;427        StartUpCounter++;
;;;428      } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
;;;429    
;;;430      if ((RCC->CR & RCC_CR_HSERDY) != RESET)
;;;431      {
;;;432        HSEStatus = (uint32_t)0x01;
;;;433      }
;;;434      else
;;;435      {
;;;436        HSEStatus = (uint32_t)0x00;
;;;437      }
;;;438    
;;;439      if (HSEStatus == (uint32_t)0x01)
;;;440      {
;;;441        /* Select regulator voltage output Scale 1 mode */
;;;442        RCC->APB1ENR |= RCC_APB1ENR_PWREN;
;;;443        PWR->CR |= PWR_CR_VOS;
;;;444    
;;;445        /* HCLK = SYSCLK / 1*/
;;;446        RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
;;;447    
;;;448        /* PCLK2 = HCLK / 2*/
;;;449        RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;450        
;;;451        /* PCLK1 = HCLK / 4*/
;;;452        RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;453    
;;;454        /* Configure the main PLL */
;;;455        RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
;;;456                       (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
;;;457        
;;;458        /* Enable the main PLL */
;;;459        RCC->CR |= RCC_CR_PLLON;
;;;460    
;;;461        /* Wait till the main PLL is ready */
;;;462        while((RCC->CR & RCC_CR_PLLRDY) == 0)
;;;463        {
;;;464        }
;;;465    
;;;466        /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;467        FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;468    
;;;469        /* Select the main PLL as system clock source */
;;;470        RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
;;;471        RCC->CFGR |= RCC_CFGR_SW_PLL;
;;;472    
;;;473        /* Wait till the main PLL is used as system clock source */
;;;474        while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
;;;475        {
;;;476        }
;;;477      }
;;;478      else
;;;479      { /* If HSE fails to start-up, the application will have wrong clock
;;;480             configuration. User can add here some code to deal with this error */
;;;481      }
;;;482    #else /* HSI will be used as PLL clock source */
;;;483      /* Select regulator voltage output Scale 1 mode */
;;;484      RCC->APB1ENR |= RCC_APB1ENR_PWREN;
;;;485      PWR->CR |= PWR_CR_VOS;
;;;486      
;;;487      /* HCLK = SYSCLK / 1*/
;;;488      RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
;;;489      
;;;490      /* PCLK2 = HCLK / 2*/
;;;491      RCC->CFGR |= RCC_CFGR_PPRE2_DIV1;
;;;492      
;;;493      /* PCLK1 = HCLK / 4*/
;;;494      RCC->CFGR |= RCC_CFGR_PPRE1_DIV2;
;;;495      
;;;496      /* Configure the main PLL */
;;;497      RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) | (PLL_Q << 24); 
;;;498      
;;;499      /* Enable the main PLL */
;;;500      RCC->CR |= RCC_CR_PLLON;
;;;501      
;;;502      /* Wait till the main PLL is ready */
;;;503      while((RCC->CR & RCC_CR_PLLRDY) == 0)
;;;504      {
;;;505      }
;;;506      
;;;507      /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
;;;508      FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
;;;509      
;;;510      /* Select the main PLL as system clock source */
;;;511      RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
;;;512      RCC->CFGR |= RCC_CFGR_SW_PLL;
;;;513      
;;;514      /* Wait till the main PLL is used as system clock source */
;;;515      while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
;;;516      {
;;;517      }
;;;518    #endif /* USE_HSE_BYPASS */  
;;;519    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
;;;520    }
00010e  bd0c              POP      {r2,r3,pc}
;;;521    #if defined (DATA_IN_ExtSRAM) && defined (DATA_IN_ExtSDRAM)
                          ENDP

                  |L1.272|
                          DCD      0x40023800
                  |L1.276|
                          DCD      0x40007000
                  |L1.280|
                          DCD      0x08402d06
                  |L1.284|
                          DCD      0x40023c00

                          AREA ||i.SystemCoreClockUpdate||, CODE, READONLY, ALIGN=2

                  SystemCoreClockUpdate PROC
;;;204      */
;;;205    void SystemCoreClockUpdate(void)
000000  b570              PUSH     {r4-r6,lr}
;;;206    {
;;;207      uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
000002  2000              MOVS     r0,#0
000004  2200              MOVS     r2,#0
000006  2302              MOVS     r3,#2
000008  2400              MOVS     r4,#0
00000a  2102              MOVS     r1,#2
;;;208    #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
;;;209      uint32_t pllr = 2;
;;;210    #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
;;;211      /* Get SYSCLK source -------------------------------------------------------*/
;;;212      tmp = RCC->CFGR & RCC_CFGR_SWS;
00000c  4d27              LDR      r5,|L2.172|
00000e  682d              LDR      r5,[r5,#0]
000010  f005000c          AND      r0,r5,#0xc
;;;213    
;;;214      switch (tmp)
000014  b120              CBZ      r0,|L2.32|
000016  2804              CMP      r0,#4
000018  d006              BEQ      |L2.40|
00001a  2808              CMP      r0,#8
00001c  d134              BNE      |L2.136|
00001e  e007              B        |L2.48|
                  |L2.32|
;;;215      {
;;;216        case 0x00:  /* HSI used as system clock source */
;;;217          SystemCoreClock = HSI_VALUE;
000020  4d23              LDR      r5,|L2.176|
000022  4e24              LDR      r6,|L2.180|
000024  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;218          break;
000026  e033              B        |L2.144|
                  |L2.40|
;;;219        case 0x04:  /* HSE used as system clock source */
;;;220          SystemCoreClock = HSE_VALUE;
000028  4d23              LDR      r5,|L2.184|
00002a  4e22              LDR      r6,|L2.180|
00002c  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;221          break;
00002e  e02f              B        |L2.144|
                  |L2.48|
;;;222        case 0x08:  /* PLL P used as system clock source */
;;;223           /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;224             SYSCLK = PLL_VCO / PLL_P
;;;225             */    
;;;226          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
000030  4d1e              LDR      r5,|L2.172|
000032  1f2d              SUBS     r5,r5,#4
000034  682d              LDR      r5,[r5,#0]
000036  f3c55480          UBFX     r4,r5,#22,#1
;;;227          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
00003a  4d1c              LDR      r5,|L2.172|
00003c  1f2d              SUBS     r5,r5,#4
00003e  682d              LDR      r5,[r5,#0]
000040  f005013f          AND      r1,r5,#0x3f
;;;228          
;;;229    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
;;;230          if (pllsource != 0)
000044  b154              CBZ      r4,|L2.92|
;;;231          {
;;;232            /* HSE used as PLL clock source */
;;;233            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
000046  4d1c              LDR      r5,|L2.184|
000048  fbb5f5f1          UDIV     r5,r5,r1
00004c  4e17              LDR      r6,|L2.172|
00004e  1f36              SUBS     r6,r6,#4
000050  6836              LDR      r6,[r6,#0]
000052  f3c61688          UBFX     r6,r6,#6,#9
000056  fb05f206          MUL      r2,r5,r6
00005a  e009              B        |L2.112|
                  |L2.92|
;;;234          }
;;;235          else
;;;236          {
;;;237            /* HSI used as PLL clock source */
;;;238            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
00005c  4d14              LDR      r5,|L2.176|
00005e  fbb5f5f1          UDIV     r5,r5,r1
000062  4e12              LDR      r6,|L2.172|
000064  1f36              SUBS     r6,r6,#4
000066  6836              LDR      r6,[r6,#0]
000068  f3c61688          UBFX     r6,r6,#6,#9
00006c  fb05f206          MUL      r2,r5,r6
                  |L2.112|
;;;239          }
;;;240    #elif defined(STM32F410xx) || defined(STM32F411xE)
;;;241    #if defined(USE_HSE_BYPASS)
;;;242          if (pllsource != 0)
;;;243          {
;;;244            /* HSE used as PLL clock source */
;;;245            pllvco = (HSE_BYPASS_INPUT_FREQUENCY / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;246          }  
;;;247    #else  
;;;248          if (pllsource == 0)
;;;249          {
;;;250            /* HSI used as PLL clock source */
;;;251            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;252          }  
;;;253    #endif /* USE_HSE_BYPASS */  
;;;254    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
;;;255          pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
000070  4d0e              LDR      r5,|L2.172|
000072  1f2d              SUBS     r5,r5,#4
000074  682d              LDR      r5,[r5,#0]
000076  f3c54501          UBFX     r5,r5,#16,#2
00007a  1c6d              ADDS     r5,r5,#1
00007c  006b              LSLS     r3,r5,#1
;;;256          SystemCoreClock = pllvco/pllp;      
00007e  fbb2f5f3          UDIV     r5,r2,r3
000082  4e0c              LDR      r6,|L2.180|
000084  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;257          break;
000086  e003              B        |L2.144|
                  |L2.136|
;;;258    #if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)      
;;;259          case 0x0C:  /* PLL R used as system clock source */
;;;260           /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
;;;261             SYSCLK = PLL_VCO / PLL_R
;;;262             */    
;;;263          pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
;;;264          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
;;;265          if (pllsource != 0)
;;;266          {
;;;267            /* HSE used as PLL clock source */
;;;268            pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
;;;269          }
;;;270          else
;;;271          {
;;;272            /* HSI used as PLL clock source */
;;;273            pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
;;;274          }
;;;275     
;;;276          pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
;;;277          SystemCoreClock = pllvco/pllr;      
;;;278          break;
;;;279    #endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
;;;280        default:
;;;281          SystemCoreClock = HSI_VALUE;
000088  4d09              LDR      r5,|L2.176|
00008a  4e0a              LDR      r6,|L2.180|
00008c  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;282          break;
00008e  bf00              NOP      
                  |L2.144|
000090  bf00              NOP                            ;218
;;;283      }
;;;284      /* Compute HCLK frequency --------------------------------------------------*/
;;;285      /* Get HCLK prescaler */
;;;286      tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
000092  4d06              LDR      r5,|L2.172|
000094  682d              LDR      r5,[r5,#0]
000096  f3c51503          UBFX     r5,r5,#4,#4
00009a  4e08              LDR      r6,|L2.188|
00009c  5d70              LDRB     r0,[r6,r5]
;;;287      /* HCLK frequency */
;;;288      SystemCoreClock >>= tmp;
00009e  4d05              LDR      r5,|L2.180|
0000a0  682d              LDR      r5,[r5,#0]  ; SystemCoreClock
0000a2  40c5              LSRS     r5,r5,r0
0000a4  4e03              LDR      r6,|L2.180|
0000a6  6035              STR      r5,[r6,#0]  ; SystemCoreClock
;;;289    }
0000a8  bd70              POP      {r4-r6,pc}
;;;290    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L2.172|
                          DCD      0x40023808
                  |L2.176|
                          DCD      0x00f42400
                  |L2.180|
                          DCD      SystemCoreClock
                  |L2.184|
                          DCD      0x00b71b00
                  |L2.188|
                          DCD      AHBPrescTable

                          AREA ||i.SystemInit||, CODE, READONLY, ALIGN=2

                  SystemInit PROC
;;;127      */
;;;128    void SystemInit(void)
000000  b510              PUSH     {r4,lr}
;;;129    {
;;;130      /* FPU settings ------------------------------------------------------------*/
;;;131      #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;;;132        SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
000002  4815              LDR      r0,|L3.88|
000004  6800              LDR      r0,[r0,#0]
000006  f4400070          ORR      r0,r0,#0xf00000
00000a  4913              LDR      r1,|L3.88|
00000c  6008              STR      r0,[r1,#0]
;;;133      #endif
;;;134      /* Reset the RCC clock configuration to the default reset state ------------*/
;;;135      /* Set HSION bit */
;;;136      RCC->CR |= (uint32_t)0x00000001;
00000e  4813              LDR      r0,|L3.92|
000010  6800              LDR      r0,[r0,#0]
000012  f0400001          ORR      r0,r0,#1
000016  4911              LDR      r1,|L3.92|
000018  6008              STR      r0,[r1,#0]
;;;137    
;;;138      /* Reset CFGR register */
;;;139      RCC->CFGR = 0x00000000;
00001a  2000              MOVS     r0,#0
00001c  490f              LDR      r1,|L3.92|
00001e  3108              ADDS     r1,r1,#8
000020  6008              STR      r0,[r1,#0]
;;;140    
;;;141      /* Reset HSEON, CSSON and PLLON bits */
;;;142      RCC->CR &= (uint32_t)0xFEF6FFFF;
000022  480e              LDR      r0,|L3.92|
000024  6800              LDR      r0,[r0,#0]
000026  490e              LDR      r1,|L3.96|
000028  4008              ANDS     r0,r0,r1
00002a  490c              LDR      r1,|L3.92|
00002c  6008              STR      r0,[r1,#0]
;;;143    
;;;144      /* Reset PLLCFGR register */
;;;145      RCC->PLLCFGR = 0x24003010;
00002e  480d              LDR      r0,|L3.100|
000030  1d09              ADDS     r1,r1,#4
000032  6008              STR      r0,[r1,#0]
;;;146    
;;;147      /* Reset HSEBYP bit */
;;;148      RCC->CR &= (uint32_t)0xFFFBFFFF;
000034  1f08              SUBS     r0,r1,#4
000036  6800              LDR      r0,[r0,#0]
000038  f4202080          BIC      r0,r0,#0x40000
00003c  1f09              SUBS     r1,r1,#4
00003e  6008              STR      r0,[r1,#0]
;;;149    
;;;150      /* Disable all interrupts */
;;;151      RCC->CIR = 0x00000000;
000040  2000              MOVS     r0,#0
000042  4906              LDR      r1,|L3.92|
000044  310c              ADDS     r1,r1,#0xc
000046  6008              STR      r0,[r1,#0]
;;;152    
;;;153    #if defined(DATA_IN_ExtSRAM) || defined(DATA_IN_ExtSDRAM)
;;;154      SystemInit_ExtMemCtl(); 
;;;155    #endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
;;;156             
;;;157      /* Configure the System clock source, PLL Multiplier and Divider factors, 
;;;158         AHB/APBx prescalers and Flash settings ----------------------------------*/
;;;159      SetSysClock();
000048  f7fffffe          BL       SetSysClock
;;;160    
;;;161      /* Configure the Vector Table location add offset address ------------------*/
;;;162    #ifdef VECT_TAB_SRAM
;;;163      SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
;;;164    #else
;;;165      SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
00004c  f04f6000          MOV      r0,#0x8000000
000050  4901              LDR      r1,|L3.88|
000052  3980              SUBS     r1,r1,#0x80
000054  6008              STR      r0,[r1,#0]
;;;166    #endif
;;;167    }
000056  bd10              POP      {r4,pc}
;;;168    
                          ENDP

                  |L3.88|
                          DCD      0xe000ed88
                  |L3.92|
                          DCD      0x40023800
                  |L3.96|
                          DCD      0xfef6ffff
                  |L3.100|
                          DCD      0x24003010

                          AREA ||.data||, DATA, ALIGN=2

                  SystemCoreClock
                          DCD      0x0aba9500
                  AHBPrescTable
000004  00000000          DCB      0x00,0x00,0x00,0x00
000008  00000000          DCB      0x00,0x00,0x00,0x00
00000c  01020304          DCB      0x01,0x02,0x03,0x04
000010  06070809          DCB      0x06,0x07,0x08,0x09

;*** Start embedded assembler ***

#line 1 "system_stm32f4xx.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___18_system_stm32f4xx_c_5d646a67____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____REVSH|
#line 153
|__asm___18_system_stm32f4xx_c_5d646a67____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_system_stm32f4xx_c_5d646a67____RRX|
#line 328
|__asm___18_system_stm32f4xx_c_5d646a67____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
