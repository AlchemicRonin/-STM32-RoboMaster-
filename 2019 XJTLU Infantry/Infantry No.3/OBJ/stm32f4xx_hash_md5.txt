; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\stm32f4xx_hash_md5.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32f4xx_hash_md5.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\stm32f4xx_hash_md5.crf ..\FWLIB\src\stm32f4xx_hash_md5.c]
                          THUMB

                          AREA ||i.HASH_MD5||, CODE, READONLY, ALIGN=1

                  HASH_MD5 PROC
;;;92       */
;;;93     ErrorStatus HASH_MD5(uint8_t *Input, uint32_t Ilen, uint8_t Output[16])
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;94     {
000004  b08f              SUB      sp,sp,#0x3c
000006  4606              MOV      r6,r0
000008  460d              MOV      r5,r1
00000a  4617              MOV      r7,r2
;;;95       HASH_InitTypeDef MD5_HASH_InitStructure;
;;;96       HASH_MsgDigest MD5_MessageDigest;
;;;97       __IO uint16_t nbvalidbitsdata = 0;
00000c  2000              MOVS     r0,#0
00000e  9002              STR      r0,[sp,#8]
;;;98       uint32_t i = 0;
000010  4680              MOV      r8,r0
;;;99       __IO uint32_t counter = 0;
000012  9001              STR      r0,[sp,#4]
;;;100      uint32_t busystatus = 0;
000014  4681              MOV      r9,r0
;;;101      ErrorStatus status = SUCCESS;
000016  f04f0b01          MOV      r11,#1
;;;102      uint32_t inputaddr  = (uint32_t)Input;
00001a  46b2              MOV      r10,r6
;;;103      uint32_t outputaddr = (uint32_t)Output;
00001c  463c              MOV      r4,r7
;;;104    
;;;105    
;;;106      /* Number of valid bits in last word of the Input data */
;;;107      nbvalidbitsdata = 8 * (Ilen % 4);
00001e  07a8              LSLS     r0,r5,#30
000020  0ec0              LSRS     r0,r0,#27
000022  9002              STR      r0,[sp,#8]
;;;108    
;;;109      /* HASH peripheral initialization */
;;;110      HASH_DeInit();
000024  f7fffffe          BL       HASH_DeInit
;;;111    
;;;112      /* HASH Configuration */
;;;113      MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
000028  2080              MOVS     r0,#0x80
00002a  900b              STR      r0,[sp,#0x2c]
;;;114      MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HASH;
00002c  2000              MOVS     r0,#0
00002e  900c              STR      r0,[sp,#0x30]
;;;115      MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
000030  2020              MOVS     r0,#0x20
000032  900d              STR      r0,[sp,#0x34]
;;;116      HASH_Init(&MD5_HASH_InitStructure);
000034  a80b              ADD      r0,sp,#0x2c
000036  f7fffffe          BL       HASH_Init
;;;117    
;;;118      /* Configure the number of valid bits in last word of the data */
;;;119      HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
00003a  f8bd0008          LDRH     r0,[sp,#8]
00003e  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;120    
;;;121      /* Write the Input block in the IN FIFO */
;;;122      for(i=0; i<Ilen; i+=4)
000042  bf00              NOP      
000044  e007              B        |L1.86|
                  |L1.70|
;;;123      {
;;;124        HASH_DataIn(*(uint32_t*)inputaddr);
000046  f8da0000          LDR      r0,[r10,#0]
00004a  f7fffffe          BL       HASH_DataIn
;;;125        inputaddr+=4;
00004e  f10a0a04          ADD      r10,r10,#4
000052  f1080804          ADD      r8,r8,#4              ;122
                  |L1.86|
000056  45a8              CMP      r8,r5                 ;122
000058  d3f5              BCC      |L1.70|
;;;126      }
;;;127    
;;;128      /* Start the HASH processor */
;;;129      HASH_StartDigest();
00005a  f7fffffe          BL       HASH_StartDigest
;;;130    
;;;131      /* wait until the Busy flag is RESET */
;;;132      do
00005e  bf00              NOP      
                  |L1.96|
;;;133      {
;;;134        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
000060  2008              MOVS     r0,#8
000062  f7fffffe          BL       HASH_GetFlagStatus
000066  4681              MOV      r9,r0
;;;135        counter++;
000068  9801              LDR      r0,[sp,#4]
00006a  1c40              ADDS     r0,r0,#1
00006c  9001              STR      r0,[sp,#4]
;;;136      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
00006e  9801              LDR      r0,[sp,#4]
000070  f5b03f80          CMP      r0,#0x10000
000074  d002              BEQ      |L1.124|
000076  f1b90f00          CMP      r9,#0
00007a  d1f1              BNE      |L1.96|
                  |L1.124|
;;;137    
;;;138      if (busystatus != RESET)
00007c  f1b90f00          CMP      r9,#0
000080  d002              BEQ      |L1.136|
;;;139      {
;;;140         status = ERROR;
000082  f04f0b00          MOV      r11,#0
000086  e011              B        |L1.172|
                  |L1.136|
;;;141      }
;;;142      else
;;;143      {
;;;144        /* Read the message digest */
;;;145        HASH_GetDigest(&MD5_MessageDigest);
000088  a803              ADD      r0,sp,#0xc
00008a  f7fffffe          BL       HASH_GetDigest
;;;146        *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
00008e  9803              LDR      r0,[sp,#0xc]
000090  ba00              REV      r0,r0
000092  6020              STR      r0,[r4,#0]
;;;147        outputaddr+=4;
000094  1d24              ADDS     r4,r4,#4
;;;148        *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
000096  9804              LDR      r0,[sp,#0x10]
000098  ba00              REV      r0,r0
00009a  6020              STR      r0,[r4,#0]
;;;149        outputaddr+=4;
00009c  1d24              ADDS     r4,r4,#4
;;;150        *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
00009e  9805              LDR      r0,[sp,#0x14]
0000a0  ba00              REV      r0,r0
0000a2  6020              STR      r0,[r4,#0]
;;;151        outputaddr+=4;
0000a4  1d24              ADDS     r4,r4,#4
;;;152        *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
0000a6  9806              LDR      r0,[sp,#0x18]
0000a8  ba00              REV      r0,r0
0000aa  6020              STR      r0,[r4,#0]
                  |L1.172|
;;;153      }
;;;154      return status; 
0000ac  4658              MOV      r0,r11
;;;155    }
0000ae  b00f              ADD      sp,sp,#0x3c
0000b0  e8bd8ff0          POP      {r4-r11,pc}
;;;156    
                          ENDP


                          AREA ||i.HMAC_MD5||, CODE, READONLY, ALIGN=1

                  HMAC_MD5 PROC
;;;167      */
;;;168    ErrorStatus HMAC_MD5(uint8_t *Key, uint32_t Keylen, uint8_t *Input, 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;169                         uint32_t Ilen, uint8_t Output[16])
;;;170    {
000004  b091              SUB      sp,sp,#0x44
000006  4681              MOV      r9,r0
000008  460f              MOV      r7,r1
00000a  4693              MOV      r11,r2
00000c  469a              MOV      r10,r3
;;;171      HASH_InitTypeDef MD5_HASH_InitStructure;
;;;172      HASH_MsgDigest MD5_MessageDigest;
;;;173      __IO uint16_t nbvalidbitsdata = 0;
00000e  2000              MOVS     r0,#0
000010  9004              STR      r0,[sp,#0x10]
;;;174      __IO uint16_t nbvalidbitskey = 0;
000012  9003              STR      r0,[sp,#0xc]
;;;175      uint32_t i = 0;
000014  2500              MOVS     r5,#0
;;;176      __IO uint32_t counter = 0;
000016  9002              STR      r0,[sp,#8]
;;;177      uint32_t busystatus = 0;
000018  2600              MOVS     r6,#0
;;;178      ErrorStatus status = SUCCESS;
00001a  2001              MOVS     r0,#1
00001c  9001              STR      r0,[sp,#4]
;;;179      uint32_t keyaddr    = (uint32_t)Key;
00001e  46c8              MOV      r8,r9
;;;180      uint32_t inputaddr  = (uint32_t)Input;
000020  f8cdb000          STR      r11,[sp,#0]
;;;181      uint32_t outputaddr = (uint32_t)Output;
000024  9c1a              LDR      r4,[sp,#0x68]
;;;182    
;;;183      /* Number of valid bits in last word of the Input data */
;;;184      nbvalidbitsdata = 8 * (Ilen % 4);
000026  ea4f708a          LSL      r0,r10,#30
00002a  0ec0              LSRS     r0,r0,#27
00002c  9004              STR      r0,[sp,#0x10]
;;;185    
;;;186      /* Number of valid bits in last word of the Key */
;;;187      nbvalidbitskey = 8 * (Keylen % 4);
00002e  07b8              LSLS     r0,r7,#30
000030  0ec0              LSRS     r0,r0,#27
000032  9003              STR      r0,[sp,#0xc]
;;;188       
;;;189      /* HASH peripheral initialization */
;;;190      HASH_DeInit();
000034  f7fffffe          BL       HASH_DeInit
;;;191    
;;;192      /* HASH Configuration */
;;;193      MD5_HASH_InitStructure.HASH_AlgoSelection = HASH_AlgoSelection_MD5;
000038  2080              MOVS     r0,#0x80
00003a  900d              STR      r0,[sp,#0x34]
;;;194      MD5_HASH_InitStructure.HASH_AlgoMode = HASH_AlgoMode_HMAC;
00003c  2040              MOVS     r0,#0x40
00003e  900e              STR      r0,[sp,#0x38]
;;;195      MD5_HASH_InitStructure.HASH_DataType = HASH_DataType_8b;
000040  2020              MOVS     r0,#0x20
000042  900f              STR      r0,[sp,#0x3c]
;;;196      if(Keylen > 64)
000044  2f40              CMP      r7,#0x40
000046  d902              BLS      |L2.78|
;;;197      {
;;;198        /* HMAC long Key */
;;;199        MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_LongKey;
000048  02c0              LSLS     r0,r0,#11
00004a  9010              STR      r0,[sp,#0x40]
00004c  e001              B        |L2.82|
                  |L2.78|
;;;200      }
;;;201      else
;;;202      {
;;;203        /* HMAC short Key */
;;;204        MD5_HASH_InitStructure.HASH_HMACKeyType = HASH_HMACKeyType_ShortKey;
00004e  2000              MOVS     r0,#0
000050  9010              STR      r0,[sp,#0x40]
                  |L2.82|
;;;205      }
;;;206      HASH_Init(&MD5_HASH_InitStructure);
000052  a80d              ADD      r0,sp,#0x34
000054  f7fffffe          BL       HASH_Init
;;;207    
;;;208      /* Configure the number of valid bits in last word of the Key */
;;;209      HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
000058  f8bd000c          LDRH     r0,[sp,#0xc]
00005c  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;210    
;;;211      /* Write the Key */
;;;212      for(i=0; i<Keylen; i+=4)
000060  2500              MOVS     r5,#0
000062  e006              B        |L2.114|
                  |L2.100|
;;;213      {
;;;214        HASH_DataIn(*(uint32_t*)keyaddr);
000064  f8d80000          LDR      r0,[r8,#0]
000068  f7fffffe          BL       HASH_DataIn
;;;215        keyaddr+=4;
00006c  f1080804          ADD      r8,r8,#4
000070  1d2d              ADDS     r5,r5,#4              ;212
                  |L2.114|
000072  42bd              CMP      r5,r7                 ;212
000074  d3f6              BCC      |L2.100|
;;;216      }
;;;217      
;;;218      /* Start the HASH processor */
;;;219      HASH_StartDigest();
000076  f7fffffe          BL       HASH_StartDigest
;;;220    
;;;221      /* wait until the Busy flag is RESET */
;;;222      do
00007a  bf00              NOP      
                  |L2.124|
;;;223      {
;;;224        busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
00007c  2008              MOVS     r0,#8
00007e  f7fffffe          BL       HASH_GetFlagStatus
000082  4606              MOV      r6,r0
;;;225        counter++;
000084  9802              LDR      r0,[sp,#8]
000086  1c40              ADDS     r0,r0,#1
000088  9002              STR      r0,[sp,#8]
;;;226      }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
00008a  9802              LDR      r0,[sp,#8]
00008c  f5b03f80          CMP      r0,#0x10000
000090  d001              BEQ      |L2.150|
000092  2e00              CMP      r6,#0
000094  d1f2              BNE      |L2.124|
                  |L2.150|
;;;227    
;;;228      if (busystatus != RESET)
000096  b116              CBZ      r6,|L2.158|
;;;229      {
;;;230         status = ERROR;
000098  2000              MOVS     r0,#0
00009a  9001              STR      r0,[sp,#4]
00009c  e05d              B        |L2.346|
                  |L2.158|
;;;231      }
;;;232      else
;;;233      {
;;;234        /* Configure the number of valid bits in last word of the Input data */
;;;235        HASH_SetLastWordValidBitsNbr(nbvalidbitsdata);
00009e  f8bd0010          LDRH     r0,[sp,#0x10]
0000a2  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;236    
;;;237        /* Write the Input block in the IN FIFO */
;;;238        for(i=0; i<Ilen; i+=4)
0000a6  2500              MOVS     r5,#0
0000a8  e007              B        |L2.186|
                  |L2.170|
;;;239        {
;;;240          HASH_DataIn(*(uint32_t*)inputaddr);
0000aa  9900              LDR      r1,[sp,#0]
0000ac  6808              LDR      r0,[r1,#0]
0000ae  f7fffffe          BL       HASH_DataIn
;;;241          inputaddr+=4;
0000b2  9800              LDR      r0,[sp,#0]
0000b4  1d00              ADDS     r0,r0,#4
0000b6  9000              STR      r0,[sp,#0]
0000b8  1d2d              ADDS     r5,r5,#4              ;238
                  |L2.186|
0000ba  4555              CMP      r5,r10                ;238
0000bc  d3f5              BCC      |L2.170|
;;;242        }
;;;243    
;;;244        /* Start the HASH processor */
;;;245        HASH_StartDigest();
0000be  f7fffffe          BL       HASH_StartDigest
;;;246    
;;;247        /* wait until the Busy flag is RESET */
;;;248        counter =0;
0000c2  2000              MOVS     r0,#0
0000c4  9002              STR      r0,[sp,#8]
;;;249        do
0000c6  bf00              NOP      
                  |L2.200|
;;;250        {
;;;251           busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
0000c8  2008              MOVS     r0,#8
0000ca  f7fffffe          BL       HASH_GetFlagStatus
0000ce  4606              MOV      r6,r0
;;;252           counter++;
0000d0  9802              LDR      r0,[sp,#8]
0000d2  1c40              ADDS     r0,r0,#1
0000d4  9002              STR      r0,[sp,#8]
;;;253        }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
0000d6  9802              LDR      r0,[sp,#8]
0000d8  f5b03f80          CMP      r0,#0x10000
0000dc  d001              BEQ      |L2.226|
0000de  2e00              CMP      r6,#0
0000e0  d1f2              BNE      |L2.200|
                  |L2.226|
;;;254    
;;;255        if (busystatus != RESET)
0000e2  b116              CBZ      r6,|L2.234|
;;;256        {
;;;257          status = ERROR;
0000e4  2000              MOVS     r0,#0
0000e6  9001              STR      r0,[sp,#4]
0000e8  e037              B        |L2.346|
                  |L2.234|
;;;258        }
;;;259        else
;;;260        {  
;;;261          /* Configure the number of valid bits in last word of the Key */
;;;262          HASH_SetLastWordValidBitsNbr(nbvalidbitskey);
0000ea  f8bd000c          LDRH     r0,[sp,#0xc]
0000ee  f7fffffe          BL       HASH_SetLastWordValidBitsNbr
;;;263    
;;;264          /* Write the Key */
;;;265          keyaddr = (uint32_t)Key;
0000f2  46c8              MOV      r8,r9
;;;266          for(i=0; i<Keylen; i+=4)
0000f4  2500              MOVS     r5,#0
0000f6  e006              B        |L2.262|
                  |L2.248|
;;;267          {
;;;268            HASH_DataIn(*(uint32_t*)keyaddr);
0000f8  f8d80000          LDR      r0,[r8,#0]
0000fc  f7fffffe          BL       HASH_DataIn
;;;269            keyaddr+=4;
000100  f1080804          ADD      r8,r8,#4
000104  1d2d              ADDS     r5,r5,#4              ;266
                  |L2.262|
000106  42bd              CMP      r5,r7                 ;266
000108  d3f6              BCC      |L2.248|
;;;270          }
;;;271      
;;;272           /* Start the HASH processor */
;;;273           HASH_StartDigest();
00010a  f7fffffe          BL       HASH_StartDigest
;;;274    
;;;275           /* wait until the Busy flag is RESET */
;;;276           counter =0;
00010e  2000              MOVS     r0,#0
000110  9002              STR      r0,[sp,#8]
;;;277           do
000112  bf00              NOP      
                  |L2.276|
;;;278           {
;;;279              busystatus = HASH_GetFlagStatus(HASH_FLAG_BUSY);
000114  2008              MOVS     r0,#8
000116  f7fffffe          BL       HASH_GetFlagStatus
00011a  4606              MOV      r6,r0
;;;280              counter++;
00011c  9802              LDR      r0,[sp,#8]
00011e  1c40              ADDS     r0,r0,#1
000120  9002              STR      r0,[sp,#8]
;;;281          }while ((counter != MD5BUSY_TIMEOUT) && (busystatus != RESET));
000122  9802              LDR      r0,[sp,#8]
000124  f5b03f80          CMP      r0,#0x10000
000128  d001              BEQ      |L2.302|
00012a  2e00              CMP      r6,#0
00012c  d1f2              BNE      |L2.276|
                  |L2.302|
;;;282    
;;;283          if (busystatus != RESET)
00012e  b116              CBZ      r6,|L2.310|
;;;284          {
;;;285             status = ERROR;
000130  2000              MOVS     r0,#0
000132  9001              STR      r0,[sp,#4]
000134  e011              B        |L2.346|
                  |L2.310|
;;;286          }
;;;287          else
;;;288          {
;;;289             /* Read the message digest */
;;;290             HASH_GetDigest(&MD5_MessageDigest);
000136  a805              ADD      r0,sp,#0x14
000138  f7fffffe          BL       HASH_GetDigest
;;;291             *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[0]);
00013c  9805              LDR      r0,[sp,#0x14]
00013e  ba00              REV      r0,r0
000140  6020              STR      r0,[r4,#0]
;;;292             outputaddr+=4;
000142  1d24              ADDS     r4,r4,#4
;;;293             *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[1]);
000144  9806              LDR      r0,[sp,#0x18]
000146  ba00              REV      r0,r0
000148  6020              STR      r0,[r4,#0]
;;;294             outputaddr+=4;
00014a  1d24              ADDS     r4,r4,#4
;;;295             *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[2]);
00014c  9807              LDR      r0,[sp,#0x1c]
00014e  ba00              REV      r0,r0
000150  6020              STR      r0,[r4,#0]
;;;296             outputaddr+=4;
000152  1d24              ADDS     r4,r4,#4
;;;297             *(uint32_t*)(outputaddr)  = __REV(MD5_MessageDigest.Data[3]);
000154  9808              LDR      r0,[sp,#0x20]
000156  ba00              REV      r0,r0
000158  6020              STR      r0,[r4,#0]
                  |L2.346|
;;;298          }
;;;299        }
;;;300      }
;;;301      return status;  
00015a  9801              LDR      r0,[sp,#4]
;;;302    }
00015c  b011              ADD      sp,sp,#0x44
00015e  e8bd8ff0          POP      {r4-r11,pc}
;;;303    /**
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\FWLIB\\src\\stm32f4xx_hash_md5.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hash_md5_c_HASH_MD5____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___20_stm32f4xx_hash_md5_c_HASH_MD5____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hash_md5_c_HASH_MD5____REVSH|
#line 153
|__asm___20_stm32f4xx_hash_md5_c_HASH_MD5____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hash_md5_c_HASH_MD5____RRX|
#line 328
|__asm___20_stm32f4xx_hash_md5_c_HASH_MD5____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
