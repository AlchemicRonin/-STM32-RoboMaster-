; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\mpu6500driver.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\mpu6500driver.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\mpu6500driver.crf ..\AHRS\mpu6500driver.c]
                          THUMB

                          AREA ||i.gyro_offset||, CODE, READONLY, ALIGN=2

                  gyro_offset PROC
;;;249    
;;;250    void gyro_offset(float gyro_offset[3], float gyro[3], uint8_t imu_status, uint16_t *offset_time_count)
000000  b510              PUSH     {r4,lr}
;;;251    {
;;;252        if (gyro_offset == NULL || gyro == NULL || offset_time_count == NULL)
000002  b108              CBZ      r0,|L1.8|
000004  b101              CBZ      r1,|L1.8|
000006  b903              CBNZ     r3,|L1.10|
                  |L1.8|
;;;253        {	
;;;254            return;
;;;255        }
;;;256    
;;;257        if (imu_status & (1 << MPU_MOT_BIT))
;;;258        {
;;;259            (*offset_time_count) = 0;
;;;260            return;
;;;261        }
;;;262    
;;;263        if (imu_status & (1 << MPU_DATA_READY_BIT))
;;;264        {
;;;265            gyro_offset[0] = gyro_offset[0] - GYRO_OFFSET_KP * gyro[0];
;;;266            gyro_offset[1] = gyro_offset[1] - GYRO_OFFSET_KP * gyro[1];
;;;267            gyro_offset[2] = gyro_offset[2] - GYRO_OFFSET_KP * gyro[2];
;;;268            (*offset_time_count)++;
;;;269        }
;;;270    }
000008  bd10              POP      {r4,pc}
                  |L1.10|
00000a  f0020402          AND      r4,r2,#2              ;257
00000e  b114              CBZ      r4,|L1.22|
000010  2400              MOVS     r4,#0                 ;259
000012  801c              STRH     r4,[r3,#0]            ;259
000014  e7f8              B        |L1.8|
                  |L1.22|
000016  f0020401          AND      r4,r2,#1              ;263
00001a  b304              CBZ      r4,|L1.94|
00001c  ed900a00          VLDR     s0,[r0,#0]            ;265
000020  edd10a00          VLDR     s1,[r1,#0]            ;265
000024  ed9f1a0f          VLDR     s2,|L1.100|
000028  ee010a60          VMLS.F32 s0,s2,s1              ;265
00002c  ed800a00          VSTR     s0,[r0,#0]            ;265
000030  ed900a01          VLDR     s0,[r0,#4]            ;266
000034  edd10a01          VLDR     s1,[r1,#4]            ;266
000038  ed9f1a0a          VLDR     s2,|L1.100|
00003c  ee010a60          VMLS.F32 s0,s2,s1              ;266
000040  ed800a01          VSTR     s0,[r0,#4]            ;266
000044  ed900a02          VLDR     s0,[r0,#8]            ;267
000048  edd10a02          VLDR     s1,[r1,#8]            ;267
00004c  ed9f1a05          VLDR     s2,|L1.100|
000050  ee010a60          VMLS.F32 s0,s2,s1              ;267
000054  ed800a02          VSTR     s0,[r0,#8]            ;267
000058  881c              LDRH     r4,[r3,#0]            ;268
00005a  1c64              ADDS     r4,r4,#1              ;268
00005c  801c              STRH     r4,[r3,#0]            ;268
                  |L1.94|
00005e  bf00              NOP      
000060  e7d2              B        |L1.8|
;;;271    
                          ENDP

000062  0000              DCW      0x0000
                  |L1.100|
000064  399d4952          DCFS     0x399d4952 ; 0.00030000001424923539

                          AREA ||i.mpu6500_init||, CODE, READONLY, ALIGN=2

                  mpu6500_init PROC
;;;149    
;;;150    uint8_t mpu6500_init(void)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;151    {
;;;152        uint8_t res = 0;
000004  2500              MOVS     r5,#0
;;;153        uint8_t wait_time = 150;
000006  2696              MOVS     r6,#0x96
;;;154        uint8_t sleepTime = 50;
000008  2732              MOVS     r7,#0x32
;;;155    
;;;156        uint8_t writeNum = 0;
00000a  2400              MOVS     r4,#0
;;;157    
;;;158        //mpu6500 gpio init
;;;159        mpu6500_GPIO_init();
00000c  f7fffffe          BL       mpu6500_GPIO_init
;;;160        // mpu6500 com init
;;;161        mpu6500_com_init();
000010  f7fffffe          BL       mpu6500_com_init
;;;162    
;;;163        //check commiunication is normal
;;;164        mpu6500_read_single_reg(MPU_WHO_AM_I);
000014  2075              MOVS     r0,#0x75
000016  f7fffffe          BL       mpu6500_read_single_reg
;;;165        mpu6500_delay_us(wait_time);
00001a  4630              MOV      r0,r6
00001c  f7fffffe          BL       mpu6500_middleware_delay_us
;;;166        mpu6500_read_single_reg(MPU_WHO_AM_I);
000020  2075              MOVS     r0,#0x75
000022  f7fffffe          BL       mpu6500_read_single_reg
;;;167        mpu6500_delay_us(wait_time);
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       mpu6500_middleware_delay_us
;;;168    
;;;169        mpu6500_write_single_reg(MPU_PWR_MGMT_1, MPU_DEVICE_RESET);
00002c  2180              MOVS     r1,#0x80
00002e  206b              MOVS     r0,#0x6b
000030  f7fffffe          BL       mpu6500_write_single_reg
;;;170        mpu6500_delay_ms(sleepTime);
000034  4638              MOV      r0,r7
000036  f7fffffe          BL       mpu6500_middleware_delay_ms
;;;171    
;;;172        //check commiunication is normal after reset
;;;173        mpu6500_read_single_reg(MPU_WHO_AM_I);
00003a  2075              MOVS     r0,#0x75
00003c  f7fffffe          BL       mpu6500_read_single_reg
;;;174        mpu6500_delay_us(wait_time);
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       mpu6500_middleware_delay_us
;;;175        mpu6500_read_single_reg(MPU_WHO_AM_I);
000046  2075              MOVS     r0,#0x75
000048  f7fffffe          BL       mpu6500_read_single_reg
;;;176        mpu6500_delay_us(wait_time);
00004c  4630              MOV      r0,r6
00004e  f7fffffe          BL       mpu6500_middleware_delay_us
;;;177    
;;;178        //read the register "WHO AM I"
;;;179        res = mpu6500_read_single_reg(MPU_WHO_AM_I);
000052  2075              MOVS     r0,#0x75
000054  f7fffffe          BL       mpu6500_read_single_reg
000058  4605              MOV      r5,r0
;;;180        mpu6500_delay_us(wait_time);
00005a  4630              MOV      r0,r6
00005c  f7fffffe          BL       mpu6500_middleware_delay_us
;;;181        if (res != DEVICE_ID)
000060  2d70              CMP      r5,#0x70
000062  d002              BEQ      |L2.106|
;;;182        {
;;;183            return NO_Sensor;
000064  2080              MOVS     r0,#0x80
                  |L2.102|
;;;184        }
;;;185    
;;;186        //set mpu6500 sonsor config and check
;;;187        for (writeNum = 0; writeNum < MPU6500_Write_Reg_Num; writeNum++)
;;;188        {
;;;189            mpu6500_write_single_reg(write_mpu6500_reg_data_error[writeNum][0], write_mpu6500_reg_data_error[writeNum][1]);
;;;190            mpu6500_delay_us(wait_time);
;;;191            res = mpu6500_read_single_reg(write_mpu6500_reg_data_error[writeNum][0]);
;;;192            mpu6500_delay_us(wait_time);
;;;193            if (res != write_mpu6500_reg_data_error[writeNum][1])
;;;194            {
;;;195                return write_mpu6500_reg_data_error[writeNum][2];
;;;196            }
;;;197        }
;;;198        // NO error
;;;199        return MPU6500_NO_ERROR;
;;;200    }
000066  e8bd81f0          POP      {r4-r8,pc}
                  |L2.106|
00006a  2400              MOVS     r4,#0                 ;187
00006c  e024              B        |L2.184|
                  |L2.110|
00006e  eb040244          ADD      r2,r4,r4,LSL #1       ;189
000072  4b13              LDR      r3,|L2.192|
000074  441a              ADD      r2,r2,r3              ;189
000076  7851              LDRB     r1,[r2,#1]            ;189
000078  eb040244          ADD      r2,r4,r4,LSL #1       ;189
00007c  5c98              LDRB     r0,[r3,r2]            ;189
00007e  f7fffffe          BL       mpu6500_write_single_reg
000082  4630              MOV      r0,r6                 ;190
000084  f7fffffe          BL       mpu6500_middleware_delay_us
000088  eb040144          ADD      r1,r4,r4,LSL #1       ;191
00008c  4a0c              LDR      r2,|L2.192|
00008e  5c50              LDRB     r0,[r2,r1]            ;191
000090  f7fffffe          BL       mpu6500_read_single_reg
000094  4605              MOV      r5,r0                 ;191
000096  4630              MOV      r0,r6                 ;192
000098  f7fffffe          BL       mpu6500_middleware_delay_us
00009c  eb040044          ADD      r0,r4,r4,LSL #1       ;193
0000a0  4907              LDR      r1,|L2.192|
0000a2  4408              ADD      r0,r0,r1              ;193
0000a4  7840              LDRB     r0,[r0,#1]            ;193
0000a6  42a8              CMP      r0,r5                 ;193
0000a8  d004              BEQ      |L2.180|
0000aa  eb040044          ADD      r0,r4,r4,LSL #1       ;195
0000ae  4408              ADD      r0,r0,r1              ;195
0000b0  7880              LDRB     r0,[r0,#2]            ;195
0000b2  e7d8              B        |L2.102|
                  |L2.180|
0000b4  1c60              ADDS     r0,r4,#1              ;187
0000b6  b2c4              UXTB     r4,r0                 ;187
                  |L2.184|
0000b8  2c0e              CMP      r4,#0xe               ;187
0000ba  dbd8              BLT      |L2.110|
0000bc  2000              MOVS     r0,#0                 ;199
0000be  e7d2              B        |L2.102|
;;;201    //int64_t read_over_cnts = 0;
                          ENDP

                  |L2.192|
                          DCD      write_mpu6500_reg_data_error

                          AREA ||i.mpu6500_read_accel||, CODE, READONLY, ALIGN=2

                  mpu6500_read_accel PROC
;;;288    
;;;289    void mpu6500_read_accel(float accel[3])
000000  b510              PUSH     {r4,lr}
;;;290    {
000002  ed2d8b02          VPUSH    {d8}
000006  b082              SUB      sp,sp,#8
000008  4604              MOV      r4,r0
;;;291        uint8_t buf[6];
;;;292        int16_t temp_imu_data = 0;
00000a  2000              MOVS     r0,#0
00000c  ee080a10          VMOV     s16,r0
;;;293        mpu6500_read_muli_reg(MPU_ACCEL_XOUT_H, buf, 6);
000010  2206              MOVS     r2,#6
000012  4669              MOV      r1,sp
000014  203b              MOVS     r0,#0x3b
000016  f7fffffe          BL       mpu6500_read_muli_reg
;;;294    
;;;295        temp_imu_data = (int16_t)((buf[0]) << 8) | buf[1];
00001a  f89d0000          LDRB     r0,[sp,#0]
00001e  0200              LSLS     r0,r0,#8
000020  b200              SXTH     r0,r0
000022  f89d1001          LDRB     r1,[sp,#1]
000026  4308              ORRS     r0,r0,r1
000028  ee080a10          VMOV     s16,r0
;;;296        accel[0] = temp_imu_data * ACCEL_SEN;
00002c  eeb80ac8          VCVT.F32.S32 s0,s16
000030  eddf0a15          VLDR     s1,|L3.136|
000034  ee200a20          VMUL.F32 s0,s0,s1
000038  ed840a00          VSTR     s0,[r4,#0]
;;;297        temp_imu_data = (int16_t)((buf[2]) << 8) | buf[3];
00003c  f89d0002          LDRB     r0,[sp,#2]
000040  0200              LSLS     r0,r0,#8
000042  b200              SXTH     r0,r0
000044  f89d1003          LDRB     r1,[sp,#3]
000048  4308              ORRS     r0,r0,r1
00004a  ee080a10          VMOV     s16,r0
;;;298        accel[1] = temp_imu_data * ACCEL_SEN;
00004e  eeb80ac8          VCVT.F32.S32 s0,s16
000052  eddf0a0d          VLDR     s1,|L3.136|
000056  ee200a20          VMUL.F32 s0,s0,s1
00005a  ed840a01          VSTR     s0,[r4,#4]
;;;299        temp_imu_data = (int16_t)((buf[4]) << 8) | buf[5];
00005e  f89d0004          LDRB     r0,[sp,#4]
000062  0200              LSLS     r0,r0,#8
000064  b200              SXTH     r0,r0
000066  f89d1005          LDRB     r1,[sp,#5]
00006a  4308              ORRS     r0,r0,r1
00006c  ee080a10          VMOV     s16,r0
;;;300        accel[2] = temp_imu_data * ACCEL_SEN;
000070  eeb80ac8          VCVT.F32.S32 s0,s16
000074  eddf0a04          VLDR     s1,|L3.136|
000078  ee200a20          VMUL.F32 s0,s0,s1
00007c  ed840a02          VSTR     s0,[r4,#8]
;;;301    }
000080  b002              ADD      sp,sp,#8
000082  ecbd8b02          VPOP     {d8}
000086  bd10              POP      {r4,pc}
;;;302    
                          ENDP

                  |L3.136|
000088  3a1ccccd          DCFS     0x3a1ccccd ; 0.00059814454289153218

                          AREA ||i.mpu6500_read_gyro||, CODE, READONLY, ALIGN=2

                  mpu6500_read_gyro PROC
;;;274    
;;;275    void mpu6500_read_gyro(float gyro[3])
000000  b510              PUSH     {r4,lr}
;;;276    {
000002  ed2d8b02          VPUSH    {d8}
000006  b082              SUB      sp,sp,#8
000008  4604              MOV      r4,r0
;;;277        uint8_t buf[6];
;;;278        int16_t temp_imu_data = 0;
00000a  2000              MOVS     r0,#0
00000c  ee080a10          VMOV     s16,r0
;;;279        mpu6500_read_muli_reg(MPU_GYRO_XOUT_H, buf, 6);
000010  2206              MOVS     r2,#6
000012  4669              MOV      r1,sp
000014  2043              MOVS     r0,#0x43
000016  f7fffffe          BL       mpu6500_read_muli_reg
;;;280    
;;;281        temp_imu_data = (int16_t)((buf[0]) << 8) | buf[1];
00001a  f89d0000          LDRB     r0,[sp,#0]
00001e  0200              LSLS     r0,r0,#8
000020  b200              SXTH     r0,r0
000022  f89d1001          LDRB     r1,[sp,#1]
000026  4308              ORRS     r0,r0,r1
000028  ee080a10          VMOV     s16,r0
;;;282        gyro[0] = temp_imu_data * GYRO_SEN;
00002c  eeb80ac8          VCVT.F32.S32 s0,s16
000030  eddf0a15          VLDR     s1,|L4.136|
000034  ee200a20          VMUL.F32 s0,s0,s1
000038  ed840a00          VSTR     s0,[r4,#0]
;;;283        temp_imu_data = (int16_t)((buf[2]) << 8) | buf[3];
00003c  f89d0002          LDRB     r0,[sp,#2]
000040  0200              LSLS     r0,r0,#8
000042  b200              SXTH     r0,r0
000044  f89d1003          LDRB     r1,[sp,#3]
000048  4308              ORRS     r0,r0,r1
00004a  ee080a10          VMOV     s16,r0
;;;284        gyro[1] = temp_imu_data * GYRO_SEN;
00004e  eeb80ac8          VCVT.F32.S32 s0,s16
000052  eddf0a0d          VLDR     s1,|L4.136|
000056  ee200a20          VMUL.F32 s0,s0,s1
00005a  ed840a01          VSTR     s0,[r4,#4]
;;;285        temp_imu_data = (int16_t)((buf[4]) << 8) | buf[5];
00005e  f89d0004          LDRB     r0,[sp,#4]
000062  0200              LSLS     r0,r0,#8
000064  b200              SXTH     r0,r0
000066  f89d1005          LDRB     r1,[sp,#5]
00006a  4308              ORRS     r0,r0,r1
00006c  ee080a10          VMOV     s16,r0
;;;286        gyro[2] = temp_imu_data * GYRO_SEN;
000070  eeb80ac8          VCVT.F32.S32 s0,s16
000074  eddf0a04          VLDR     s1,|L4.136|
000078  ee200a20          VMUL.F32 s0,s0,s1
00007c  ed840a02          VSTR     s0,[r4,#8]
;;;287    }
000080  b002              ADD      sp,sp,#8
000082  ecbd8b02          VPOP     {d8}
000086  bd10              POP      {r4,pc}
;;;288    
                          ENDP

                  |L4.136|
000088  3a0ba058          DCFS     0x3a0ba058 ; 0.00053263222798705101

                          AREA ||i.mpu6500_read_over||, CODE, READONLY, ALIGN=2

                  mpu6500_read_over PROC
;;;201    //int64_t read_over_cnts = 0;
;;;202    void mpu6500_read_over(uint8_t *status_buf, mpu6500_real_data_t *mpu6500_real_data)
000000  b100              CBZ      r0,|L5.4|
;;;203    {
;;;204    //	read_over_cnts++;
;;;205        // check point null
;;;206        if (status_buf == NULL || mpu6500_real_data == NULL)
000002  b901              CBNZ     r1,|L5.6|
                  |L5.4|
;;;207        {
;;;208            return;
;;;209        }
;;;210    
;;;211        if ((*status_buf) & MPU_INT_WOM_INT)
;;;212        {
;;;213            mpu6500_real_data->status |= (uint8_t)(1 << MPU_MOT_BIT);
;;;214        }
;;;215        if (mpu6500_real_data->status & (1 << MPU_MOT_BIT))
;;;216        {
;;;217            static uint8_t motion_time = 0;
;;;218            motion_time++;
;;;219            if (motion_time > 10)
;;;220            {
;;;221                motion_time = 0;
;;;222                mpu6500_real_data->status &= ~(1 << MPU_MOT_BIT);
;;;223            }
;;;224        }
;;;225    
;;;226        if ((*status_buf) & MPU_RAW_RDY_INT)
;;;227        {
;;;228            int16_t temp_imu_data = 0;
;;;229            mpu6500_real_data->status |= (1 << MPU_DATA_READY_BIT);
;;;230    
;;;231            temp_imu_data = (int16_t)((status_buf[1]) << 8) | status_buf[2];
;;;232            mpu6500_real_data->accel[0] = temp_imu_data * ACCEL_SEN;
;;;233            temp_imu_data = (int16_t)((status_buf[3]) << 8) | status_buf[4];
;;;234            mpu6500_real_data->accel[1] = temp_imu_data * ACCEL_SEN;
;;;235            temp_imu_data = (int16_t)((status_buf[5]) << 8) | status_buf[6];
;;;236            mpu6500_real_data->accel[2] = temp_imu_data * ACCEL_SEN;
;;;237    
;;;238            temp_imu_data = (int16_t)((status_buf[7]) << 8) | status_buf[8];
;;;239            mpu6500_real_data->temp = temp_imu_data * MPU6500_TEMPERATURE_FACTOR + MPU6500_TEMPERATURE_OFFSET;
;;;240    
;;;241            temp_imu_data = (int16_t)((status_buf[9]) << 8) | status_buf[10];
;;;242            mpu6500_real_data->gyro[0] = temp_imu_data * GYRO_SEN;
;;;243            temp_imu_data = (int16_t)((status_buf[11]) << 8) | status_buf[12];
;;;244            mpu6500_real_data->gyro[1] = temp_imu_data * GYRO_SEN;
;;;245            temp_imu_data = (int16_t)((status_buf[13]) << 8) | status_buf[14];
;;;246            mpu6500_real_data->gyro[2] = temp_imu_data * GYRO_SEN;
;;;247        }
;;;248    }
000004  4770              BX       lr
                  |L5.6|
000006  7802              LDRB     r2,[r0,#0]            ;211
000008  f0020240          AND      r2,r2,#0x40           ;211
00000c  b11a              CBZ      r2,|L5.22|
00000e  780a              LDRB     r2,[r1,#0]            ;213
000010  f0420202          ORR      r2,r2,#2              ;213
000014  700a              STRB     r2,[r1,#0]            ;213
                  |L5.22|
000016  780a              LDRB     r2,[r1,#0]            ;215
000018  f0020202          AND      r2,r2,#2              ;215
00001c  b172              CBZ      r2,|L5.60|
00001e  4a44              LDR      r2,|L5.304|
000020  7812              LDRB     r2,[r2,#0]            ;218  ; motion_time
000022  1c52              ADDS     r2,r2,#1              ;218
000024  4b42              LDR      r3,|L5.304|
000026  701a              STRB     r2,[r3,#0]            ;218
000028  461a              MOV      r2,r3                 ;219
00002a  7812              LDRB     r2,[r2,#0]            ;219  ; motion_time
00002c  2a0a              CMP      r2,#0xa               ;219
00002e  dd05              BLE      |L5.60|
000030  2200              MOVS     r2,#0                 ;221
000032  701a              STRB     r2,[r3,#0]            ;221
000034  780a              LDRB     r2,[r1,#0]            ;222
000036  f0220202          BIC      r2,r2,#2              ;222
00003a  700a              STRB     r2,[r1,#0]            ;222
                  |L5.60|
00003c  7802              LDRB     r2,[r0,#0]            ;226
00003e  f0020201          AND      r2,r2,#1              ;226
000042  2a00              CMP      r2,#0                 ;226
000044  d072              BEQ      |L5.300|
000046  2200              MOVS     r2,#0                 ;228
000048  ee002a10          VMOV     s0,r2                 ;228
00004c  780a              LDRB     r2,[r1,#0]            ;229
00004e  f0420201          ORR      r2,r2,#1              ;229
000052  700a              STRB     r2,[r1,#0]            ;229
000054  7842              LDRB     r2,[r0,#1]            ;231
000056  0212              LSLS     r2,r2,#8              ;231
000058  b212              SXTH     r2,r2                 ;231
00005a  7883              LDRB     r3,[r0,#2]            ;231
00005c  431a              ORRS     r2,r2,r3              ;231
00005e  ee002a10          VMOV     s0,r2                 ;231
000062  eef80ac0          VCVT.F32.S32 s1,s0                 ;232
000066  ed9f1a33          VLDR     s2,|L5.308|
00006a  ee600a81          VMUL.F32 s1,s1,s2              ;232
00006e  edc10a01          VSTR     s1,[r1,#4]            ;232
000072  78c2              LDRB     r2,[r0,#3]            ;233
000074  0212              LSLS     r2,r2,#8              ;233
000076  b212              SXTH     r2,r2                 ;233
000078  7903              LDRB     r3,[r0,#4]            ;233
00007a  431a              ORRS     r2,r2,r3              ;233
00007c  ee002a10          VMOV     s0,r2                 ;233
000080  eef80ac0          VCVT.F32.S32 s1,s0                 ;234
000084  ed9f1a2b          VLDR     s2,|L5.308|
000088  ee600a81          VMUL.F32 s1,s1,s2              ;234
00008c  edc10a02          VSTR     s1,[r1,#8]            ;234
000090  7942              LDRB     r2,[r0,#5]            ;235
000092  0212              LSLS     r2,r2,#8              ;235
000094  b212              SXTH     r2,r2                 ;235
000096  7983              LDRB     r3,[r0,#6]            ;235
000098  431a              ORRS     r2,r2,r3              ;235
00009a  ee002a10          VMOV     s0,r2                 ;235
00009e  eef80ac0          VCVT.F32.S32 s1,s0                 ;236
0000a2  ed9f1a24          VLDR     s2,|L5.308|
0000a6  ee600a81          VMUL.F32 s1,s1,s2              ;236
0000aa  edc10a03          VSTR     s1,[r1,#0xc]          ;236
0000ae  79c2              LDRB     r2,[r0,#7]            ;238
0000b0  0212              LSLS     r2,r2,#8              ;238
0000b2  b212              SXTH     r2,r2                 ;238
0000b4  7a03              LDRB     r3,[r0,#8]            ;238
0000b6  431a              ORRS     r2,r2,r3              ;238
0000b8  ee002a10          VMOV     s0,r2                 ;238
0000bc  eeb81ac0          VCVT.F32.S32 s2,s0                 ;239
0000c0  eddf1a1d          VLDR     s3,|L5.312|
0000c4  eef30a07          VMOV.F32 s1,#23.00000000       ;239
0000c8  ee410a21          VMLA.F32 s1,s2,s3              ;239
0000cc  edc10a04          VSTR     s1,[r1,#0x10]         ;239
0000d0  7a42              LDRB     r2,[r0,#9]            ;241
0000d2  0212              LSLS     r2,r2,#8              ;241
0000d4  b212              SXTH     r2,r2                 ;241
0000d6  7a83              LDRB     r3,[r0,#0xa]          ;241
0000d8  431a              ORRS     r2,r2,r3              ;241
0000da  ee002a10          VMOV     s0,r2                 ;241
0000de  eef80ac0          VCVT.F32.S32 s1,s0                 ;242
0000e2  ed9f1a16          VLDR     s2,|L5.316|
0000e6  ee600a81          VMUL.F32 s1,s1,s2              ;242
0000ea  edc10a05          VSTR     s1,[r1,#0x14]         ;242
0000ee  7ac2              LDRB     r2,[r0,#0xb]          ;243
0000f0  0212              LSLS     r2,r2,#8              ;243
0000f2  b212              SXTH     r2,r2                 ;243
0000f4  7b03              LDRB     r3,[r0,#0xc]          ;243
0000f6  431a              ORRS     r2,r2,r3              ;243
0000f8  ee002a10          VMOV     s0,r2                 ;243
0000fc  eef80ac0          VCVT.F32.S32 s1,s0                 ;244
000100  ed9f1a0e          VLDR     s2,|L5.316|
000104  ee600a81          VMUL.F32 s1,s1,s2              ;244
000108  edc10a06          VSTR     s1,[r1,#0x18]         ;244
00010c  7b42              LDRB     r2,[r0,#0xd]          ;245
00010e  0212              LSLS     r2,r2,#8              ;245
000110  b212              SXTH     r2,r2                 ;245
000112  7b83              LDRB     r3,[r0,#0xe]          ;245
000114  431a              ORRS     r2,r2,r3              ;245
000116  ee002a10          VMOV     s0,r2                 ;245
00011a  eef80ac0          VCVT.F32.S32 s1,s0                 ;246
00011e  ed9f1a07          VLDR     s2,|L5.316|
000122  ee600a81          VMUL.F32 s1,s1,s2              ;246
000126  edc10a07          VSTR     s1,[r1,#0x1c]         ;246
00012a  bf00              NOP                            ;247
                  |L5.300|
00012c  bf00              NOP      
00012e  e769              B        |L5.4|
;;;249    
                          ENDP

                  |L5.304|
                          DCD      motion_time
                  |L5.308|
000134  3a1ccccd          DCFS     0x3a1ccccd ; 0.00059814454289153218
                  |L5.312|
000138  3b03126f          DCFS     0x3b03126f ; 0.0020000000949949026
                  |L5.316|
00013c  3a0ba058          DCFS     0x3a0ba058 ; 0.00053263222798705101

                          AREA ||i.mpu6500_read_temp||, CODE, READONLY, ALIGN=2

                  mpu6500_read_temp PROC
;;;302    
;;;303    void mpu6500_read_temp(float *temperature)
000000  b510              PUSH     {r4,lr}
;;;304    {
000002  ed2d8b02          VPUSH    {d8}
000006  b082              SUB      sp,sp,#8
000008  4604              MOV      r4,r0
;;;305        uint8_t buf[2];
;;;306        int16_t temp_imu_data = 0;
00000a  2000              MOVS     r0,#0
00000c  ee080a10          VMOV     s16,r0
;;;307        mpu6500_read_muli_reg(MPU_TEMP_OUT_H, buf, 2);
000010  2202              MOVS     r2,#2
000012  a901              ADD      r1,sp,#4
000014  2041              MOVS     r0,#0x41
000016  f7fffffe          BL       mpu6500_read_muli_reg
;;;308    
;;;309        temp_imu_data = (int16_t)((buf[0]) << 8) | buf[1];
00001a  f89d0004          LDRB     r0,[sp,#4]
00001e  0200              LSLS     r0,r0,#8
000020  b200              SXTH     r0,r0
000022  f89d1005          LDRB     r1,[sp,#5]
000026  4308              ORRS     r0,r0,r1
000028  ee080a10          VMOV     s16,r0
;;;310    
;;;311        *temperature = temp_imu_data * MPU6500_TEMPERATURE_FACTOR + MPU6500_TEMPERATURE_OFFSET;
00002c  eef80ac8          VCVT.F32.S32 s1,s16
000030  ed9f1a05          VLDR     s2,|L6.72|
000034  eeb30a07          VMOV.F32 s0,#23.00000000
000038  ee000a81          VMLA.F32 s0,s1,s2
00003c  ed840a00          VSTR     s0,[r4,#0]
;;;312    }
000040  b002              ADD      sp,sp,#8
000042  ecbd8b02          VPOP     {d8}
000046  bd10              POP      {r4,pc}
                          ENDP

                  |L6.72|
000048  3b03126f          DCFS     0x3b03126f ; 0.0020000000949949026

                          AREA ||.constdata||, DATA, READONLY, ALIGN=0

                  write_mpu6500_reg_data_error
000000  6b00016c          DCB      0x6b,0x00,0x01,0x6c
000004  00021900          DCB      0x00,0x02,0x19,0x00
000008  031a0204          DCB      0x03,0x1a,0x02,0x04
00000c  1b10061c          DCB      0x1b,0x10,0x06,0x1c
000010  00071d00          DCB      0x00,0x07,0x1d,0x00
000014  081f0f0d          DCB      0x08,0x1f,0x0f,0x0d
000018  244d0937          DCB      0x24,0x4d,0x09,0x37
00001c  02053801          DCB      0x02,0x05,0x38,0x01
000020  0b67010c          DCB      0x0b,0x67,0x01,0x0c
000024  69c00d6a          DCB      0x69,0xc0,0x0d,0x6a
000028  300a              DCB      0x30,0x0a

                          AREA ||.data||, DATA, ALIGN=0

                  motion_time
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\AHRS\\mpu6500driver.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_mpu6500driver_c_4206926a____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___15_mpu6500driver_c_4206926a____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_mpu6500driver_c_4206926a____REVSH|
#line 153
|__asm___15_mpu6500driver_c_4206926a____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_mpu6500driver_c_4206926a____RRX|
#line 328
|__asm___15_mpu6500driver_c_4206926a____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
