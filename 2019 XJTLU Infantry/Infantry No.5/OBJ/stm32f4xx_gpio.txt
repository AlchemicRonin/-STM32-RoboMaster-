; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\stm32f4xx_gpio.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32f4xx_gpio.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\stm32f4xx_gpio.crf ..\FWLIB\src\stm32f4xx_gpio.c]
                          THUMB

                          AREA ||i.GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  GPIO_DeInit PROC
;;;126      */
;;;127    void GPIO_DeInit(GPIO_TypeDef* GPIOx)
000000  b510              PUSH     {r4,lr}
;;;128    {
000002  4604              MOV      r4,r0
;;;129      /* Check the parameters */
;;;130      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;131    
;;;132      if (GPIOx == GPIOA)
000004  4841              LDR      r0,|L1.268|
000006  4284              CMP      r4,r0
000008  d108              BNE      |L1.28|
;;;133      {
;;;134        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  4608              MOV      r0,r1
00000e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;135        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOA, DISABLE);
000012  2100              MOVS     r1,#0
000014  2001              MOVS     r0,#1
000016  f7fffffe          BL       RCC_AHB1PeriphResetCmd
00001a  e076              B        |L1.266|
                  |L1.28|
;;;136      }
;;;137      else if (GPIOx == GPIOB)
00001c  483c              LDR      r0,|L1.272|
00001e  4284              CMP      r4,r0
000020  d108              BNE      |L1.52|
;;;138      {
;;;139        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, ENABLE);
000022  2101              MOVS     r1,#1
000024  2002              MOVS     r0,#2
000026  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;140        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOB, DISABLE);
00002a  2100              MOVS     r1,#0
00002c  2002              MOVS     r0,#2
00002e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
000032  e06a              B        |L1.266|
                  |L1.52|
;;;141      }
;;;142      else if (GPIOx == GPIOC)
000034  4837              LDR      r0,|L1.276|
000036  4284              CMP      r4,r0
000038  d108              BNE      |L1.76|
;;;143      {
;;;144        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, ENABLE);
00003a  2101              MOVS     r1,#1
00003c  2004              MOVS     r0,#4
00003e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;145        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOC, DISABLE);
000042  2100              MOVS     r1,#0
000044  2004              MOVS     r0,#4
000046  f7fffffe          BL       RCC_AHB1PeriphResetCmd
00004a  e05e              B        |L1.266|
                  |L1.76|
;;;146      }
;;;147      else if (GPIOx == GPIOD)
00004c  4832              LDR      r0,|L1.280|
00004e  4284              CMP      r4,r0
000050  d108              BNE      |L1.100|
;;;148      {
;;;149        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, ENABLE);
000052  2101              MOVS     r1,#1
000054  2008              MOVS     r0,#8
000056  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;150        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOD, DISABLE);
00005a  2100              MOVS     r1,#0
00005c  2008              MOVS     r0,#8
00005e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
000062  e052              B        |L1.266|
                  |L1.100|
;;;151      }
;;;152      else if (GPIOx == GPIOE)
000064  482d              LDR      r0,|L1.284|
000066  4284              CMP      r4,r0
000068  d108              BNE      |L1.124|
;;;153      {
;;;154        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, ENABLE);
00006a  2101              MOVS     r1,#1
00006c  2010              MOVS     r0,#0x10
00006e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;155        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOE, DISABLE);
000072  2100              MOVS     r1,#0
000074  2010              MOVS     r0,#0x10
000076  f7fffffe          BL       RCC_AHB1PeriphResetCmd
00007a  e046              B        |L1.266|
                  |L1.124|
;;;156      }
;;;157      else if (GPIOx == GPIOF)
00007c  4828              LDR      r0,|L1.288|
00007e  4284              CMP      r4,r0
000080  d108              BNE      |L1.148|
;;;158      {
;;;159        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, ENABLE);
000082  2101              MOVS     r1,#1
000084  2020              MOVS     r0,#0x20
000086  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;160        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOF, DISABLE);
00008a  2100              MOVS     r1,#0
00008c  2020              MOVS     r0,#0x20
00008e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
000092  e03a              B        |L1.266|
                  |L1.148|
;;;161      }
;;;162      else if (GPIOx == GPIOG)
000094  4823              LDR      r0,|L1.292|
000096  4284              CMP      r4,r0
000098  d108              BNE      |L1.172|
;;;163      {
;;;164        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, ENABLE);
00009a  2101              MOVS     r1,#1
00009c  2040              MOVS     r0,#0x40
00009e  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;165        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOG, DISABLE);
0000a2  2100              MOVS     r1,#0
0000a4  2040              MOVS     r0,#0x40
0000a6  f7fffffe          BL       RCC_AHB1PeriphResetCmd
0000aa  e02e              B        |L1.266|
                  |L1.172|
;;;166      }
;;;167      else if (GPIOx == GPIOH)
0000ac  481e              LDR      r0,|L1.296|
0000ae  4284              CMP      r4,r0
0000b0  d108              BNE      |L1.196|
;;;168      {
;;;169        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, ENABLE);
0000b2  2101              MOVS     r1,#1
0000b4  2080              MOVS     r0,#0x80
0000b6  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;170        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOH, DISABLE);
0000ba  2100              MOVS     r1,#0
0000bc  2080              MOVS     r0,#0x80
0000be  f7fffffe          BL       RCC_AHB1PeriphResetCmd
0000c2  e022              B        |L1.266|
                  |L1.196|
;;;171      }
;;;172    
;;;173      else if (GPIOx == GPIOI)
0000c4  4819              LDR      r0,|L1.300|
0000c6  4284              CMP      r4,r0
0000c8  d108              BNE      |L1.220|
;;;174      {
;;;175        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, ENABLE);
0000ca  2101              MOVS     r1,#1
0000cc  1580              ASRS     r0,r0,#22
0000ce  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;176        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOI, DISABLE);
0000d2  2100              MOVS     r1,#0
0000d4  15a0              ASRS     r0,r4,#22
0000d6  f7fffffe          BL       RCC_AHB1PeriphResetCmd
0000da  e016              B        |L1.266|
                  |L1.220|
;;;177      }
;;;178      else if (GPIOx == GPIOJ)
0000dc  4814              LDR      r0,|L1.304|
0000de  4284              CMP      r4,r0
0000e0  d108              BNE      |L1.244|
;;;179      {
;;;180        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, ENABLE);
0000e2  2101              MOVS     r1,#1
0000e4  1540              ASRS     r0,r0,#21
0000e6  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;181        RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOJ, DISABLE);
0000ea  2100              MOVS     r1,#0
0000ec  1560              ASRS     r0,r4,#21
0000ee  f7fffffe          BL       RCC_AHB1PeriphResetCmd
0000f2  e00a              B        |L1.266|
                  |L1.244|
;;;182      }
;;;183      else
;;;184      {
;;;185        if (GPIOx == GPIOK)
0000f4  480f              LDR      r0,|L1.308|
0000f6  4284              CMP      r4,r0
0000f8  d107              BNE      |L1.266|
;;;186        {
;;;187          RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, ENABLE);
0000fa  2101              MOVS     r1,#1
0000fc  1500              ASRS     r0,r0,#20
0000fe  f7fffffe          BL       RCC_AHB1PeriphResetCmd
;;;188          RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_GPIOK, DISABLE);
000102  2100              MOVS     r1,#0
000104  1520              ASRS     r0,r4,#20
000106  f7fffffe          BL       RCC_AHB1PeriphResetCmd
                  |L1.266|
;;;189        }
;;;190      }
;;;191    }
00010a  bd10              POP      {r4,pc}
;;;192    
                          ENDP

                  |L1.268|
                          DCD      0x40020000
                  |L1.272|
                          DCD      0x40020400
                  |L1.276|
                          DCD      0x40020800
                  |L1.280|
                          DCD      0x40020c00
                  |L1.284|
                          DCD      0x40021000
                  |L1.288|
                          DCD      0x40021400
                  |L1.292|
                          DCD      0x40021800
                  |L1.296|
                          DCD      0x40021c00
                  |L1.300|
                          DCD      0x40022000
                  |L1.304|
                          DCD      0x40022400
                  |L1.308|
                          DCD      0x40022800

                          AREA ||i.GPIO_Init||, CODE, READONLY, ALIGN=1

                  GPIO_Init PROC
;;;201      */
;;;202    void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;203    {
000002  460a              MOV      r2,r1
;;;204      uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
000004  2100              MOVS     r1,#0
000006  2300              MOVS     r3,#0
000008  2400              MOVS     r4,#0
;;;205    
;;;206      /* Check the parameters */
;;;207      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;208      assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));
;;;209      assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
;;;210      assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));
;;;211    
;;;212      /* ------------------------- Configure the port pins ---------------- */
;;;213      /*-- GPIO Mode Configuration --*/
;;;214      for (pinpos = 0x00; pinpos < 0x10; pinpos++)
00000a  bf00              NOP      
00000c  e03d              B        |L2.138|
                  |L2.14|
;;;215      {
;;;216        pos = ((uint32_t)0x01) << pinpos;
00000e  2501              MOVS     r5,#1
000010  fa05f301          LSL      r3,r5,r1
;;;217        /* Get the port pins position */
;;;218        currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
000014  6815              LDR      r5,[r2,#0]
000016  ea050403          AND      r4,r5,r3
;;;219    
;;;220        if (currentpin == pos)
00001a  429c              CMP      r4,r3
00001c  d134              BNE      |L2.136|
;;;221        {
;;;222          GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
00001e  6805              LDR      r5,[r0,#0]
000020  004f              LSLS     r7,r1,#1
000022  2603              MOVS     r6,#3
000024  40be              LSLS     r6,r6,r7
000026  43b5              BICS     r5,r5,r6
000028  6005              STR      r5,[r0,#0]
;;;223          GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
00002a  7915              LDRB     r5,[r2,#4]
00002c  004e              LSLS     r6,r1,#1
00002e  40b5              LSLS     r5,r5,r6
000030  6806              LDR      r6,[r0,#0]
000032  4335              ORRS     r5,r5,r6
000034  6005              STR      r5,[r0,#0]
;;;224    
;;;225          if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
000036  7915              LDRB     r5,[r2,#4]
000038  2d01              CMP      r5,#1
00003a  d002              BEQ      |L2.66|
00003c  7915              LDRB     r5,[r2,#4]
00003e  2d02              CMP      r5,#2
000040  d116              BNE      |L2.112|
                  |L2.66|
;;;226          {
;;;227            /* Check Speed mode parameters */
;;;228            assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
;;;229    
;;;230            /* Speed mode configuration */
;;;231            GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
000042  6885              LDR      r5,[r0,#8]
000044  004f              LSLS     r7,r1,#1
000046  2603              MOVS     r6,#3
000048  40be              LSLS     r6,r6,r7
00004a  43b5              BICS     r5,r5,r6
00004c  6085              STR      r5,[r0,#8]
;;;232            GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
00004e  7955              LDRB     r5,[r2,#5]
000050  004e              LSLS     r6,r1,#1
000052  40b5              LSLS     r5,r5,r6
000054  6886              LDR      r6,[r0,#8]
000056  4335              ORRS     r5,r5,r6
000058  6085              STR      r5,[r0,#8]
;;;233    
;;;234            /* Check Output mode parameters */
;;;235            assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));
;;;236    
;;;237            /* Output mode configuration*/
;;;238            GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
00005a  6845              LDR      r5,[r0,#4]
00005c  2601              MOVS     r6,#1
00005e  408e              LSLS     r6,r6,r1
000060  43b5              BICS     r5,r5,r6
000062  6045              STR      r5,[r0,#4]
;;;239            GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
000064  6845              LDR      r5,[r0,#4]
000066  7996              LDRB     r6,[r2,#6]
000068  408e              LSLS     r6,r6,r1
00006a  b2b6              UXTH     r6,r6
00006c  4335              ORRS     r5,r5,r6
00006e  6045              STR      r5,[r0,#4]
                  |L2.112|
;;;240          }
;;;241    
;;;242          /* Pull-up Pull down resistor configuration*/
;;;243          GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
000070  68c5              LDR      r5,[r0,#0xc]
000072  004f              LSLS     r7,r1,#1
000074  2603              MOVS     r6,#3
000076  40be              LSLS     r6,r6,r7
000078  43b5              BICS     r5,r5,r6
00007a  60c5              STR      r5,[r0,#0xc]
;;;244          GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
00007c  79d5              LDRB     r5,[r2,#7]
00007e  004e              LSLS     r6,r1,#1
000080  40b5              LSLS     r5,r5,r6
000082  68c6              LDR      r6,[r0,#0xc]
000084  4335              ORRS     r5,r5,r6
000086  60c5              STR      r5,[r0,#0xc]
                  |L2.136|
000088  1c49              ADDS     r1,r1,#1              ;214
                  |L2.138|
00008a  2910              CMP      r1,#0x10              ;214
00008c  d3bf              BCC      |L2.14|
;;;245        }
;;;246      }
;;;247    }
00008e  bdf0              POP      {r4-r7,pc}
;;;248    
                          ENDP


                          AREA ||i.GPIO_PinAFConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinAFConfig PROC
;;;578      */
;;;579    void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
000000  b5f0              PUSH     {r4-r7,lr}
;;;580    {
;;;581      uint32_t temp = 0x00;
000002  2300              MOVS     r3,#0
;;;582      uint32_t temp_2 = 0x00;
000004  2400              MOVS     r4,#0
;;;583      
;;;584      /* Check the parameters */
;;;585      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;586      assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
;;;587      assert_param(IS_GPIO_AF(GPIO_AF));
;;;588      
;;;589      temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
000006  074d              LSLS     r5,r1,#29
000008  0eed              LSRS     r5,r5,#27
00000a  fa02f305          LSL      r3,r2,r5
;;;590      GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
00000e  10ce              ASRS     r6,r1,#3
000010  f1000520          ADD      r5,r0,#0x20
000014  f8555026          LDR      r5,[r5,r6,LSL #2]
000018  074e              LSLS     r6,r1,#29
00001a  0ef7              LSRS     r7,r6,#27
00001c  260f              MOVS     r6,#0xf
00001e  40be              LSLS     r6,r6,r7
000020  43b5              BICS     r5,r5,r6
000022  10cf              ASRS     r7,r1,#3
000024  f1000620          ADD      r6,r0,#0x20
000028  f8465027          STR      r5,[r6,r7,LSL #2]
;;;591      temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
00002c  10ce              ASRS     r6,r1,#3
00002e  f1000520          ADD      r5,r0,#0x20
000032  f8555026          LDR      r5,[r5,r6,LSL #2]
000036  ea450403          ORR      r4,r5,r3
;;;592      GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
00003a  10ce              ASRS     r6,r1,#3
00003c  f1000520          ADD      r5,r0,#0x20
000040  f8454026          STR      r4,[r5,r6,LSL #2]
;;;593    }
000044  bdf0              POP      {r4-r7,pc}
;;;594    
                          ENDP


                          AREA ||i.GPIO_PinLockConfig||, CODE, READONLY, ALIGN=1

                  GPIO_PinLockConfig PROC
;;;276      */
;;;277    void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  b508              PUSH     {r3,lr}
;;;278    {
;;;279      __IO uint32_t tmp = 0x00010000;
000002  f44f3280          MOV      r2,#0x10000
000006  9200              STR      r2,[sp,#0]
;;;280    
;;;281      /* Check the parameters */
;;;282      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;283      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;284    
;;;285      tmp |= GPIO_Pin;
000008  9a00              LDR      r2,[sp,#0]
00000a  430a              ORRS     r2,r2,r1
00000c  9200              STR      r2,[sp,#0]
;;;286      /* Set LCKK bit */
;;;287      GPIOx->LCKR = tmp;
00000e  9a00              LDR      r2,[sp,#0]
000010  61c2              STR      r2,[r0,#0x1c]
;;;288      /* Reset LCKK bit */
;;;289      GPIOx->LCKR =  GPIO_Pin;
000012  61c1              STR      r1,[r0,#0x1c]
;;;290      /* Set LCKK bit */
;;;291      GPIOx->LCKR = tmp;
000014  9a00              LDR      r2,[sp,#0]
000016  61c2              STR      r2,[r0,#0x1c]
;;;292      /* Read LCKK bit*/
;;;293      tmp = GPIOx->LCKR;
000018  69c2              LDR      r2,[r0,#0x1c]
00001a  9200              STR      r2,[sp,#0]
;;;294      /* Read LCKK bit*/
;;;295      tmp = GPIOx->LCKR;
00001c  69c2              LDR      r2,[r0,#0x1c]
00001e  9200              STR      r2,[sp,#0]
;;;296    }
000020  bd08              POP      {r3,pc}
;;;297    
                          ENDP


                          AREA ||i.GPIO_ReadInputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputData PROC
;;;348      */
;;;349    uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
000000  4601              MOV      r1,r0
;;;350    {
;;;351      /* Check the parameters */
;;;352      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;353    
;;;354      return ((uint16_t)GPIOx->IDR);
000002  6908              LDR      r0,[r1,#0x10]
000004  b280              UXTH     r0,r0
;;;355    }
000006  4770              BX       lr
;;;356    
                          ENDP


                          AREA ||i.GPIO_ReadInputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadInputDataBit PROC
;;;322      */
;;;323    uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;324    {
;;;325      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;326    
;;;327      /* Check the parameters */
;;;328      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;329      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;330    
;;;331      if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  6913              LDR      r3,[r2,#0x10]
000006  400b              ANDS     r3,r3,r1
000008  b10b              CBZ      r3,|L6.14|
;;;332      {
;;;333        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L6.16|
                  |L6.14|
;;;334      }
;;;335      else
;;;336      {
;;;337        bitstatus = (uint8_t)Bit_RESET;
00000e  2000              MOVS     r0,#0
                  |L6.16|
;;;338      }
;;;339      return bitstatus;
;;;340    }
000010  4770              BX       lr
;;;341    
                          ENDP


                          AREA ||i.GPIO_ReadOutputData||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputData PROC
;;;391      */
;;;392    uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
000000  4601              MOV      r1,r0
;;;393    {
;;;394      /* Check the parameters */
;;;395      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;396    
;;;397      return ((uint16_t)GPIOx->ODR);
000002  6948              LDR      r0,[r1,#0x14]
000004  b280              UXTH     r0,r0
;;;398    }
000006  4770              BX       lr
;;;399    
                          ENDP


                          AREA ||i.GPIO_ReadOutputDataBit||, CODE, READONLY, ALIGN=1

                  GPIO_ReadOutputDataBit PROC
;;;365      */
;;;366    uint8_t GPIO_ReadOutputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;367    {
;;;368      uint8_t bitstatus = 0x00;
000002  2000              MOVS     r0,#0
;;;369    
;;;370      /* Check the parameters */
;;;371      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;372      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;373    
;;;374      if (((GPIOx->ODR) & GPIO_Pin) != (uint32_t)Bit_RESET)
000004  6953              LDR      r3,[r2,#0x14]
000006  400b              ANDS     r3,r3,r1
000008  b10b              CBZ      r3,|L8.14|
;;;375      {
;;;376        bitstatus = (uint8_t)Bit_SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L8.16|
                  |L8.14|
;;;377      }
;;;378      else
;;;379      {
;;;380        bitstatus = (uint8_t)Bit_RESET;
00000e  2000              MOVS     r0,#0
                  |L8.16|
;;;381      }
;;;382      return bitstatus;
;;;383    }
000010  4770              BX       lr
;;;384    
                          ENDP


                          AREA ||i.GPIO_ResetBits||, CODE, READONLY, ALIGN=1

                  GPIO_ResetBits PROC
;;;432      */
;;;433    void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  8341              STRH     r1,[r0,#0x1a]
;;;434    {
;;;435      /* Check the parameters */
;;;436      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;437      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;438    
;;;439      GPIOx->BSRRH = GPIO_Pin;
;;;440    }
000002  4770              BX       lr
;;;441    
                          ENDP


                          AREA ||i.GPIO_SetBits||, CODE, READONLY, ALIGN=1

                  GPIO_SetBits PROC
;;;411      */
;;;412    void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  8301              STRH     r1,[r0,#0x18]
;;;413    {
;;;414      /* Check the parameters */
;;;415      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;416      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;417    
;;;418      GPIOx->BSRRL = GPIO_Pin;
;;;419    }
000002  4770              BX       lr
;;;420    
                          ENDP


                          AREA ||i.GPIO_StructInit||, CODE, READONLY, ALIGN=1

                  GPIO_StructInit PROC
;;;253      */
;;;254    void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
000000  f64f71ff          MOV      r1,#0xffff
;;;255    {
;;;256      /* Reset GPIO init structure parameters values */
;;;257      GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
000004  6001              STR      r1,[r0,#0]
;;;258      GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
000006  2100              MOVS     r1,#0
000008  7101              STRB     r1,[r0,#4]
;;;259      GPIO_InitStruct->GPIO_Speed = GPIO_Speed_2MHz;
00000a  7141              STRB     r1,[r0,#5]
;;;260      GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
00000c  7181              STRB     r1,[r0,#6]
;;;261      GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
00000e  71c1              STRB     r1,[r0,#7]
;;;262    }
000010  4770              BX       lr
;;;263    
                          ENDP


                          AREA ||i.GPIO_ToggleBits||, CODE, READONLY, ALIGN=1

                  GPIO_ToggleBits PROC
;;;495      */
;;;496    void GPIO_ToggleBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6942              LDR      r2,[r0,#0x14]
;;;497    {
;;;498      /* Check the parameters */
;;;499      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;500    
;;;501      GPIOx->ODR ^= GPIO_Pin;
000002  404a              EORS     r2,r2,r1
000004  6142              STR      r2,[r0,#0x14]
;;;502    }
000006  4770              BX       lr
;;;503    
                          ENDP


                          AREA ||i.GPIO_Write||, CODE, READONLY, ALIGN=1

                  GPIO_Write PROC
;;;479      */
;;;480    void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
000000  6141              STR      r1,[r0,#0x14]
;;;481    {
;;;482      /* Check the parameters */
;;;483      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;484    
;;;485      GPIOx->ODR = PortVal;
;;;486    }
000002  4770              BX       lr
;;;487    
                          ENDP


                          AREA ||i.GPIO_WriteBit||, CODE, READONLY, ALIGN=1

                  GPIO_WriteBit PROC
;;;454      */
;;;455    void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
000000  b10a              CBZ      r2,|L14.6|
;;;456    {
;;;457      /* Check the parameters */
;;;458      assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
;;;459      assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
;;;460      assert_param(IS_GPIO_BIT_ACTION(BitVal));
;;;461    
;;;462      if (BitVal != Bit_RESET)
;;;463      {
;;;464        GPIOx->BSRRL = GPIO_Pin;
000002  8301              STRH     r1,[r0,#0x18]
000004  e000              B        |L14.8|
                  |L14.6|
;;;465      }
;;;466      else
;;;467      {
;;;468        GPIOx->BSRRH = GPIO_Pin ;
000006  8341              STRH     r1,[r0,#0x1a]
                  |L14.8|
;;;469      }
;;;470    }
000008  4770              BX       lr
;;;471    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\FWLIB\\src\\stm32f4xx_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_gpio_c_f8e8e39a____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___16_stm32f4xx_gpio_c_f8e8e39a____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_gpio_c_f8e8e39a____REVSH|
#line 153
|__asm___16_stm32f4xx_gpio_c_f8e8e39a____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_gpio_c_f8e8e39a____RRX|
#line 328
|__asm___16_stm32f4xx_gpio_c_f8e8e39a____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
