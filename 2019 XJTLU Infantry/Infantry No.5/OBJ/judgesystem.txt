; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\judgesystem.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\judgesystem.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\judgesystem.crf ..\BSP\JudgeSystem.c]
                          THUMB

                          AREA ||i.JudgeSystem_uart7_init||, CODE, READONLY, ALIGN=2

                  JudgeSystem_uart7_init PROC
;;;13     	
;;;14     void JudgeSystem_uart7_init(void)
000000  b500              PUSH     {lr}
;;;15     {
000002  b097              SUB      sp,sp,#0x5c
;;;16       //GPIO端口设置
;;;17       GPIO_InitTypeDef GPIO_InitStructure;
;;;18     	USART_InitTypeDef USART_InitStructure;
;;;19     	NVIC_InitTypeDef NVIC_InitStructure;		//dma用到中断
;;;20     	DMA_InitTypeDef  DMA_InitStructure;
;;;21     	
;;;22     	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOE,ENABLE); //使能GPIOB时钟
000004  2101              MOVS     r1,#1
000006  2010              MOVS     r0,#0x10
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;23     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_UART7,ENABLE);//使能USART3时钟
00000c  2101              MOVS     r1,#1
00000e  0788              LSLS     r0,r1,#30
000010  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;24     	
;;;25     	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA1,ENABLE);  //DMA1时钟使能 ---********************
000014  2101              MOVS     r1,#1
000016  0548              LSLS     r0,r1,#21
000018  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;26      
;;;27     	//串口3对应引脚复用映射
;;;28     	GPIO_PinAFConfig(GPIOE, GPIO_PinSource7, GPIO_AF_UART7); //GPIOB10复用为USART3
00001c  2208              MOVS     r2,#8
00001e  2107              MOVS     r1,#7
000020  4842              LDR      r0,|L1.300|
000022  f7fffffe          BL       GPIO_PinAFConfig
;;;29     	GPIO_PinAFConfig(GPIOE, GPIO_PinSource8, GPIO_AF_UART7); //GPIOB11复用为USART3
000026  2208              MOVS     r2,#8
000028  4611              MOV      r1,r2
00002a  4840              LDR      r0,|L1.300|
00002c  f7fffffe          BL       GPIO_PinAFConfig
;;;30     	
;;;31     	//USART3端口配置
;;;32       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8; 
000030  f44f70c0          MOV      r0,#0x180
000034  9015              STR      r0,[sp,#0x54]
;;;33     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能
000036  2002              MOVS     r0,#2
000038  f88d0058          STRB     r0,[sp,#0x58]
;;;34     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出
00003c  2000              MOVS     r0,#0
00003e  f88d005a          STRB     r0,[sp,#0x5a]
;;;35     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	//速度50MHz
000042  2002              MOVS     r0,#2
000044  f88d0059          STRB     r0,[sp,#0x59]
;;;36     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; //上拉
000048  2001              MOVS     r0,#1
00004a  f88d005b          STRB     r0,[sp,#0x5b]
;;;37     	GPIO_Init(GPIOE, &GPIO_InitStructure); //初始化
00004e  a915              ADD      r1,sp,#0x54
000050  4836              LDR      r0,|L1.300|
000052  f7fffffe          BL       GPIO_Init
;;;38     
;;;39       //USART3 初始化设置
;;;40     	USART_DeInit(UART7);
000056  4836              LDR      r0,|L1.304|
000058  f7fffffe          BL       USART_DeInit
;;;41     	USART_InitStructure.USART_BaudRate = 115200;//波特率设置
00005c  f44f30e1          MOV      r0,#0x1c200
000060  9011              STR      r0,[sp,#0x44]
;;;42     	USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
000062  2000              MOVS     r0,#0
000064  f8ad0048          STRH     r0,[sp,#0x48]
;;;43     	USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位
000068  f8ad004a          STRH     r0,[sp,#0x4a]
;;;44     	USART_InitStructure.USART_Parity = USART_Parity_No;//校验
00006c  f8ad004c          STRH     r0,[sp,#0x4c]
;;;45     	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	//收发模式
000070  200c              MOVS     r0,#0xc
000072  f8ad004e          STRH     r0,[sp,#0x4e]
;;;46     //  USART_InitStructure.USART_Mode = USART_Mode_Rx ;
;;;47     	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
000076  2000              MOVS     r0,#0
000078  f8ad0050          STRH     r0,[sp,#0x50]
;;;48       USART_Init(UART7, &USART_InitStructure); //初始化串口3
00007c  a911              ADD      r1,sp,#0x44
00007e  482c              LDR      r0,|L1.304|
000080  f7fffffe          BL       USART_Init
;;;49     	
;;;50       USART_Cmd(UART7, ENABLE);  //使能串口3	
000084  2101              MOVS     r1,#1
000086  482a              LDR      r0,|L1.304|
000088  f7fffffe          BL       USART_Cmd
;;;51     	USART_ITConfig(UART7, USART_IT_IDLE, ENABLE);//使能接受中断
00008c  2201              MOVS     r2,#1
00008e  f2404124          MOV      r1,#0x424
000092  4827              LDR      r0,|L1.304|
000094  f7fffffe          BL       USART_ITConfig
;;;52     	USART_DMACmd(UART7,USART_DMAReq_Rx,ENABLE);	//使能串口3接收DMA
000098  2201              MOVS     r2,#1
00009a  2140              MOVS     r1,#0x40
00009c  4824              LDR      r0,|L1.304|
00009e  f7fffffe          BL       USART_DMACmd
;;;53     	
;;;54     	
;;;55     	
;;;56     	
;;;57       NVIC_InitStructure.NVIC_IRQChannel = UART7_IRQn;//串口3中断通道*******
0000a2  2052              MOVS     r0,#0x52
0000a4  f88d0040          STRB     r0,[sp,#0x40]
;;;58     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;//抢占优先级3
0000a8  2002              MOVS     r0,#2
0000aa  f88d0041          STRB     r0,[sp,#0x41]
;;;59     	NVIC_InitStructure.NVIC_IRQChannelSubPriority =3;		//子优先级3
0000ae  2003              MOVS     r0,#3
0000b0  f88d0042          STRB     r0,[sp,#0x42]
;;;60     //	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;//抢占优先级3
;;;61     //	NVIC_InitStructure.NVIC_IRQChannelSubPriority =1 ;		//子优先级3
;;;62     	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			//IRQ通道使能
0000b4  2001              MOVS     r0,#1
0000b6  f88d0043          STRB     r0,[sp,#0x43]
;;;63     	NVIC_Init(&NVIC_InitStructure);	//根据指定的参数初始化VIC寄存器
0000ba  a810              ADD      r0,sp,#0x40
0000bc  f7fffffe          BL       NVIC_Init
;;;64     	
;;;65     	
;;;66       /* 配置 DMA Stream */
;;;67     	DMA_DeInit(DMA1_Stream3); 
0000c0  481c              LDR      r0,|L1.308|
0000c2  f7fffffe          BL       DMA_DeInit
;;;68       DMA_InitStructure.DMA_Channel = DMA_Channel_5;  //通道选择
0000c6  f04f6020          MOV      r0,#0xa000000
0000ca  9001              STR      r0,[sp,#4]
;;;69       DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&(UART7->DR);//DMA外设地址****************************
0000cc  4818              LDR      r0,|L1.304|
0000ce  1d00              ADDS     r0,r0,#4
0000d0  9002              STR      r0,[sp,#8]
;;;70       DMA_InitStructure.DMA_Memory0BaseAddr = (u32)RX3Buff;//DMA 存储器0地址 内存地址
0000d2  4819              LDR      r0,|L1.312|
0000d4  9003              STR      r0,[sp,#0xc]
;;;71       DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;//外设到存储器模式*******************************
0000d6  2000              MOVS     r0,#0
0000d8  9004              STR      r0,[sp,#0x10]
;;;72       DMA_InitStructure.DMA_BufferSize = RX3_BUF_SIZE;//数据传输量 
0000da  20a0              MOVS     r0,#0xa0
0000dc  9005              STR      r0,[sp,#0x14]
;;;73       DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;//外设非增量模式
0000de  2000              MOVS     r0,#0
0000e0  9006              STR      r0,[sp,#0x18]
;;;74       DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;//存储器增量模式
0000e2  f44f6080          MOV      r0,#0x400
0000e6  9007              STR      r0,[sp,#0x1c]
;;;75       DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;//外设数据长度:8位
0000e8  2000              MOVS     r0,#0
0000ea  9008              STR      r0,[sp,#0x20]
;;;76       DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;//存储器数据长度:8位
0000ec  9009              STR      r0,[sp,#0x24]
;;;77       DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;// 使用普通模式 ********************************
0000ee  900a              STR      r0,[sp,#0x28]
;;;78       DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;//中等优先级**********
0000f0  f44f3040          MOV      r0,#0x30000
0000f4  900b              STR      r0,[sp,#0x2c]
;;;79       DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
0000f6  2000              MOVS     r0,#0
0000f8  900c              STR      r0,[sp,#0x30]
;;;80       DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;//***************
0000fa  900d              STR      r0,[sp,#0x34]
;;;81       DMA_InitStructure.DMA_MemoryBurst = DMA_Mode_Circular;//存储器突发单次传输*****
0000fc  f44f7080          MOV      r0,#0x100
000100  900e              STR      r0,[sp,#0x38]
;;;82       DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;//外设突发单次传输
000102  2000              MOVS     r0,#0
000104  900f              STR      r0,[sp,#0x3c]
;;;83     	
;;;84       DMA_Init(DMA1_Stream3, &DMA_InitStructure);//初始化DMA1 Stream5	
000106  a901              ADD      r1,sp,#4
000108  480a              LDR      r0,|L1.308|
00010a  f7fffffe          BL       DMA_Init
;;;85     //	DMA_ITConfig(DMA1_Stream1,DMA_IT_TC,ENABLE);	//DMA满中断
;;;86     //DMA_ITConfig(DMA1_Stream1,DMA_IT_TC,ENABLE);	//DMA满中断
;;;87     	DMA_Cmd(DMA1_Stream3,ENABLE);
00010e  2101              MOVS     r1,#1
000110  4808              LDR      r0,|L1.308|
000112  f7fffffe          BL       DMA_Cmd
;;;88     	
;;;89     	JudgeSystemUart3_RXFIFO = fifo_s_create(140);		//裁判系统数据接收协议帧队列
000116  208c              MOVS     r0,#0x8c
000118  f7fffffe          BL       fifo_s_create
00011c  4907              LDR      r1,|L1.316|
00011e  6008              STR      r0,[r1,#0]  ; JudgeSystemUart3_RXFIFO
;;;90     	
;;;91     	/*********************************/
;;;92     	JudgeSystem_init = 1 ;
000120  2001              MOVS     r0,#1
000122  4907              LDR      r1,|L1.320|
000124  6008              STR      r0,[r1,#0]  ; JudgeSystem_init
;;;93     }
000126  b017              ADD      sp,sp,#0x5c
000128  bd00              POP      {pc}
;;;94     
                          ENDP

00012a  0000              DCW      0x0000
                  |L1.300|
                          DCD      0x40021000
                  |L1.304|
                          DCD      0x40007800
                  |L1.308|
                          DCD      0x40026058
                  |L1.312|
                          DCD      RX3Buff
                  |L1.316|
                          DCD      JudgeSystemUart3_RXFIFO
                  |L1.320|
                          DCD      JudgeSystem_init

                          AREA ||i.UART7_IRQHandler||, CODE, READONLY, ALIGN=2

                  UART7_IRQHandler PROC
;;;105    	
;;;106    void UART7_IRQHandler(void)
000000  b530              PUSH     {r4,r5,lr}
;;;107    {
000002  b0b7              SUB      sp,sp,#0xdc
;;;108    	u8 num;			//串口空闲中断时的数据长度
;;;109    	
;;;110    unpack_data_t p_obj;	//协议帧队列数据解析结构体	
;;;111    	
;;;112    	if(USART_GetITStatus(UART7, USART_IT_IDLE) != RESET)  //接收中断
000004  f2404124          MOV      r1,#0x424
000008  481b              LDR      r0,|L2.120|
00000a  f7fffffe          BL       USART_GetITStatus
00000e  2800              CMP      r0,#0
000010  d02f              BEQ      |L2.114|
;;;113    	{
;;;114    		num = UART7->SR;
000012  4819              LDR      r0,|L2.120|
000014  8800              LDRH     r0,[r0,#0]
000016  b2c5              UXTB     r5,r0
;;;115    		num = UART7->DR;	//清中断标志位
000018  4817              LDR      r0,|L2.120|
00001a  1d00              ADDS     r0,r0,#4
00001c  8800              LDRH     r0,[r0,#0]
00001e  b2c5              UXTB     r5,r0
;;;116    				
;;;117    		/*********************************/	
;;;118    		USART_INT =1;		//中断进入标志位
000020  2001              MOVS     r0,#1
000022  4916              LDR      r1,|L2.124|
000024  6008              STR      r0,[r1,#0]  ; USART_INT
;;;119    		
;;;120    		DMA_Cmd(DMA1_Stream3,DISABLE);	//关DMA
000026  2100              MOVS     r1,#0
000028  4815              LDR      r0,|L2.128|
00002a  f7fffffe          BL       DMA_Cmd
;;;121    	  num = RX3_BUF_SIZE - DMA_GetCurrDataCounter(DMA1_Stream3);	//获取数据长度	
00002e  4814              LDR      r0,|L2.128|
000030  f7fffffe          BL       DMA_GetCurrDataCounter
000034  f1c000a0          RSB      r0,r0,#0xa0
000038  b2c5              UXTB     r5,r0
;;;122    		
;;;123        look_usart_length=num;
00003a  4812              LDR      r0,|L2.132|
00003c  7005              STRB     r5,[r0,#0]
;;;124    		
;;;125    		for(int i = 0; i < num; i++)	//所有数据入队
00003e  2400              MOVS     r4,#0
000040  e006              B        |L2.80|
                  |L2.66|
;;;126    		
;;;127        //if(!fifo_is_full(JudgeSystemUart3_RXFIFO))	//判断队不满
;;;128    		
;;;129    		fifo_s_put(JudgeSystemUart3_RXFIFO, RX3Buff[i]);		//入队
000042  4811              LDR      r0,|L2.136|
000044  5d01              LDRB     r1,[r0,r4]
000046  4811              LDR      r0,|L2.140|
000048  6800              LDR      r0,[r0,#0]  ; JudgeSystemUart3_RXFIFO
00004a  f7fffffe          BL       fifo_s_put
00004e  1c64              ADDS     r4,r4,#1              ;125
                  |L2.80|
000050  42ac              CMP      r4,r5                 ;125
000052  dbf6              BLT      |L2.66|
;;;130    			
;;;131    		DMA1_Stream3->NDTR = RX3_BUF_SIZE;//重新设置接收数据个数
000054  20a0              MOVS     r0,#0xa0
000056  490a              LDR      r1,|L2.128|
000058  3958              SUBS     r1,r1,#0x58
00005a  65c8              STR      r0,[r1,#0x5c]
;;;132    		
;;;133    		DMA_Cmd(DMA1_Stream3,ENABLE);		//开DMA，重新开始接收数据
00005c  2101              MOVS     r1,#1
00005e  4808              LDR      r0,|L2.128|
000060  f7fffffe          BL       DMA_Cmd
;;;134    		
;;;135    		p_obj.data_fifo = JudgeSystemUart3_RXFIFO;	//准备解析协议帧
000064  4809              LDR      r0,|L2.140|
000066  6800              LDR      r0,[r0,#0]  ; JudgeSystemUart3_RXFIFO
000068  9001              STR      r0,[sp,#4]
;;;136    		
;;;137    		unpack_fifo_data(&p_obj, DN_REG_ID);	//解析协议帧队列 判断数据类型（命令码）
00006a  21a5              MOVS     r1,#0xa5
00006c  a801              ADD      r0,sp,#4
00006e  f7fffffe          BL       unpack_fifo_data
                  |L2.114|
;;;138    		
;;;139    
;;;140      } 
;;;141    } 
000072  b037              ADD      sp,sp,#0xdc
000074  bd30              POP      {r4,r5,pc}
;;;142    
                          ENDP

000076  0000              DCW      0x0000
                  |L2.120|
                          DCD      0x40007800
                  |L2.124|
                          DCD      USART_INT
                  |L2.128|
                          DCD      0x40026058
                  |L2.132|
                          DCD      look_usart_length
                  |L2.136|
                          DCD      RX3Buff
                  |L2.140|
                          DCD      JudgeSystemUart3_RXFIFO

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  RX3Buff
                          %        160

                          AREA ||.data||, DATA, ALIGN=2

                  JudgeSystemUart3_RXFIFO
                          DCD      0x00000000
                  JudgeSystem_init
                          DCD      0x00000000
                  USART_INT
                          DCD      0x00000000
                  look_usart_length
00000c  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\BSP\\JudgeSystem.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_JudgeSystem_c_6f0ecd31____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___13_JudgeSystem_c_6f0ecd31____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_JudgeSystem_c_6f0ecd31____REVSH|
#line 153
|__asm___13_JudgeSystem_c_6f0ecd31____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_JudgeSystem_c_6f0ecd31____RRX|
#line 328
|__asm___13_JudgeSystem_c_6f0ecd31____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
