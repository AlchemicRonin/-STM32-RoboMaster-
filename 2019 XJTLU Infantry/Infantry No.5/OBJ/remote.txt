; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\remote.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\remote.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\remote.crf ..\BSP\remote.c]
                          THUMB

                          AREA ||i.DMA2_Stream2_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA2_Stream2_IRQHandler PROC
;;;112    RC rc;
;;;113    void DMA2_Stream2_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;114    {
;;;115    	if(DMA_GetITStatus(DMA2_Stream2, DMA_IT_TCIF2))
000002  49a4              LDR      r1,|L1.660|
000004  48a4              LDR      r0,|L1.664|
000006  f7fffffe          BL       DMA_GetITStatus
00000a  2800              CMP      r0,#0
00000c  d07e              BEQ      |L1.268|
;;;116    	{
;;;117    		DMA_ClearFlag(DMA2_Stream2, DMA_FLAG_TCIF2);
00000e  f04f5181          MOV      r1,#0x10200000
000012  48a1              LDR      r0,|L1.664|
000014  f7fffffe          BL       DMA_ClearFlag
;;;118    		DMA_ClearITPendingBit(DMA2_Stream2, DMA_IT_TCIF2);
000018  499e              LDR      r1,|L1.660|
00001a  489f              LDR      r0,|L1.664|
00001c  f7fffffe          BL       DMA_ClearITPendingBit
;;;119    		
;;;120    		rc.cnts++;
000020  489e              LDR      r0,|L1.668|
000022  e9d02008          LDRD     r2,r0,[r0,#0x20]
000026  1c52              ADDS     r2,r2,#1
000028  f1400000          ADC      r0,r0,#0
00002c  499b              LDR      r1,|L1.668|
00002e  e9c12008          STRD     r2,r0,[r1,#0x20]
;;;121    		
;;;122    		rc.R_x = 1024 - ((RXBuff[0]| (RXBuff[1] << 8)) & 0x07ff); //!< Channel 0
000032  489b              LDR      r0,|L1.672|
000034  7800              LDRB     r0,[r0,#0]  ; RXBuff
000036  499a              LDR      r1,|L1.672|
000038  7849              LDRB     r1,[r1,#1]  ; RXBuff
00003a  ea402001          ORR      r0,r0,r1,LSL #8
00003e  f3c0000a          UBFX     r0,r0,#0,#11
000042  f5c06080          RSB      r0,r0,#0x400
000046  4995              LDR      r1,|L1.668|
000048  8008              STRH     r0,[r1,#0]
;;;123    		rc.R_y = 1024 - (((RXBuff[1] >> 3) | (RXBuff[2] << 5)) & 0x07ff); //!< Channel 1
00004a  4895              LDR      r0,|L1.672|
00004c  7840              LDRB     r0,[r0,#1]  ; RXBuff
00004e  10c0              ASRS     r0,r0,#3
000050  4993              LDR      r1,|L1.672|
000052  7889              LDRB     r1,[r1,#2]  ; RXBuff
000054  ea401041          ORR      r0,r0,r1,LSL #5
000058  f3c0000a          UBFX     r0,r0,#0,#11
00005c  f5c06080          RSB      r0,r0,#0x400
000060  498e              LDR      r1,|L1.668|
000062  8048              STRH     r0,[r1,#2]
;;;124    		rc.L_x = 1024 - (((RXBuff[2] >> 6) | (RXBuff[3] << 2) | (RXBuff[4] << 10))& 0x07ff);//!< Channel 2
000064  488e              LDR      r0,|L1.672|
000066  7880              LDRB     r0,[r0,#2]  ; RXBuff
000068  1180              ASRS     r0,r0,#6
00006a  498d              LDR      r1,|L1.672|
00006c  78c9              LDRB     r1,[r1,#3]  ; RXBuff
00006e  ea400081          ORR      r0,r0,r1,LSL #2
000072  498b              LDR      r1,|L1.672|
000074  7909              LDRB     r1,[r1,#4]  ; RXBuff
000076  ea402081          ORR      r0,r0,r1,LSL #10
00007a  f3c0000a          UBFX     r0,r0,#0,#11
00007e  f5c06080          RSB      r0,r0,#0x400
000082  4986              LDR      r1,|L1.668|
000084  8088              STRH     r0,[r1,#4]
;;;125    		rc.L_y = 1024 - (((RXBuff[4] >> 1) | (RXBuff[5] << 7)) & 0x07ff); //!< Channel 3
000086  4886              LDR      r0,|L1.672|
000088  7900              LDRB     r0,[r0,#4]  ; RXBuff
00008a  1040              ASRS     r0,r0,#1
00008c  4984              LDR      r1,|L1.672|
00008e  7949              LDRB     r1,[r1,#5]  ; RXBuff
000090  ea4010c1          ORR      r0,r0,r1,LSL #7
000094  f3c0000a          UBFX     r0,r0,#0,#11
000098  f5c06080          RSB      r0,r0,#0x400
00009c  497f              LDR      r1,|L1.668|
00009e  80c8              STRH     r0,[r1,#6]
;;;126    		rc.sl = ((RXBuff[5] >> 4)& 0x000C) >> 2; //!< Switch left
0000a0  487f              LDR      r0,|L1.672|
0000a2  7940              LDRB     r0,[r0,#5]  ; RXBuff
0000a4  1100              ASRS     r0,r0,#4
0000a6  0880              LSRS     r0,r0,#2
0000a8  7208              STRB     r0,[r1,#8]
;;;127    		rc.sr = ((RXBuff[5] >> 4)& 0x0003); //!< Switch left
0000aa  487d              LDR      r0,|L1.672|
0000ac  7940              LDRB     r0,[r0,#5]  ; RXBuff
0000ae  f3c01001          UBFX     r0,r0,#4,#2
0000b2  7248              STRB     r0,[r1,#9]
;;;128    		
;;;129    		rc.mouse_x = RXBuff[6] | (RXBuff[7] << 8); //!< Mouse X axis
0000b4  487a              LDR      r0,|L1.672|
0000b6  7980              LDRB     r0,[r0,#6]  ; RXBuff
0000b8  4979              LDR      r1,|L1.672|
0000ba  79c9              LDRB     r1,[r1,#7]  ; RXBuff
0000bc  ea402001          ORR      r0,r0,r1,LSL #8
0000c0  b200              SXTH     r0,r0
0000c2  4976              LDR      r1,|L1.668|
0000c4  8148              STRH     r0,[r1,#0xa]
;;;130    		rc.mouse_y = RXBuff[8] | (RXBuff[9] << 8); //!< Mouse Y axis
0000c6  4876              LDR      r0,|L1.672|
0000c8  7a00              LDRB     r0,[r0,#8]  ; RXBuff
0000ca  4975              LDR      r1,|L1.672|
0000cc  7a49              LDRB     r1,[r1,#9]  ; RXBuff
0000ce  ea402001          ORR      r0,r0,r1,LSL #8
0000d2  b200              SXTH     r0,r0
0000d4  4971              LDR      r1,|L1.668|
0000d6  8188              STRH     r0,[r1,#0xc]
;;;131    		rc.mouse_z = RXBuff[10] | (RXBuff[11] << 8); //!< Mouse Z axis
0000d8  4871              LDR      r0,|L1.672|
0000da  7a80              LDRB     r0,[r0,#0xa]  ; RXBuff
0000dc  4970              LDR      r1,|L1.672|
0000de  7ac9              LDRB     r1,[r1,#0xb]  ; RXBuff
0000e0  ea402001          ORR      r0,r0,r1,LSL #8
0000e4  b200              SXTH     r0,r0
0000e6  496d              LDR      r1,|L1.668|
0000e8  81c8              STRH     r0,[r1,#0xe]
;;;132    		rc.mouse_l = RXBuff[12]; //!< Mouse Left Is Press ?
0000ea  486d              LDR      r0,|L1.672|
0000ec  7b00              LDRB     r0,[r0,#0xc]  ; RXBuff
0000ee  7408              STRB     r0,[r1,#0x10]
;;;133    		rc.mouse_r = RXBuff[13]; //!< Mouse Right Is Press ?
0000f0  486b              LDR      r0,|L1.672|
0000f2  7b40              LDRB     r0,[r0,#0xd]  ; RXBuff
0000f4  7448              STRB     r0,[r1,#0x11]
;;;134    		rc.key = RXBuff[14] | (RXBuff[15] << 8); //!< KeyBoard value
0000f6  486a              LDR      r0,|L1.672|
0000f8  7b80              LDRB     r0,[r0,#0xe]  ; RXBuff
0000fa  4969              LDR      r1,|L1.672|
0000fc  7bc9              LDRB     r1,[r1,#0xf]  ; RXBuff
0000fe  ea402001          ORR      r0,r0,r1,LSL #8
000102  4966              LDR      r1,|L1.668|
000104  8248              STRH     r0,[r1,#0x12]
;;;135    		rc.W = (rc.key&0x01)>>0;
000106  4608              MOV      r0,r1
000108  7c80              LDRB     r0,[r0,#0x12]  ; rc
00010a  e000              B        |L1.270|
                  |L1.268|
00010c  e0c1              B        |L1.658|
                  |L1.270|
00010e  f0000001          AND      r0,r0,#1
000112  7508              STRB     r0,[r1,#0x14]
;;;136    		rc.S = (rc.key&0x02)>>1;
000114  4608              MOV      r0,r1
000116  7c80              LDRB     r0,[r0,#0x12]  ; rc
000118  f3c00040          UBFX     r0,r0,#1,#1
00011c  7548              STRB     r0,[r1,#0x15]
;;;137    		rc.A = (rc.key&0x04)>>2;
00011e  4608              MOV      r0,r1
000120  7c80              LDRB     r0,[r0,#0x12]  ; rc
000122  f3c00080          UBFX     r0,r0,#2,#1
000126  7588              STRB     r0,[r1,#0x16]
;;;138    		rc.D = (rc.key&0x08)>>3;
000128  4608              MOV      r0,r1
00012a  7c80              LDRB     r0,[r0,#0x12]  ; rc
00012c  f3c000c0          UBFX     r0,r0,#3,#1
000130  75c8              STRB     r0,[r1,#0x17]
;;;139    		rc.Shift = (rc.key&0x10)>>4;
000132  4608              MOV      r0,r1
000134  7c80              LDRB     r0,[r0,#0x12]  ; rc
000136  f3c01000          UBFX     r0,r0,#4,#1
00013a  7688              STRB     r0,[r1,#0x1a]
;;;140    		rc.Ctrl = (rc.key&0x20)>>5;
00013c  4608              MOV      r0,r1
00013e  7c80              LDRB     r0,[r0,#0x12]  ; rc
000140  f3c01040          UBFX     r0,r0,#5,#1
000144  76c8              STRB     r0,[r1,#0x1b]
;;;141    		rc.Q = (rc.key&0x40)>>6;
000146  4608              MOV      r0,r1
000148  7c80              LDRB     r0,[r0,#0x12]  ; rc
00014a  f3c01080          UBFX     r0,r0,#6,#1
00014e  7608              STRB     r0,[r1,#0x18]
;;;142    		rc.E  = (rc.key&0x80)>>7;
000150  4608              MOV      r0,r1
000152  7c80              LDRB     r0,[r0,#0x12]  ; rc
000154  f3c010c0          UBFX     r0,r0,#7,#1
000158  7648              STRB     r0,[r1,#0x19]
;;;143    		
;;;144    		
;;;145    		
;;;146    		
;;;147    		//遥控器值抛出异常
;;;148    		rc.R_x = rc.R_x > 660 ? 0 : rc.R_x;
00015a  4608              MOV      r0,r1
00015c  f9b00000          LDRSH    r0,[r0,#0]  ; rc
000160  f5b07f25          CMP      r0,#0x294
000164  dd01              BLE      |L1.362|
000166  2000              MOVS     r0,#0
000168  e002              B        |L1.368|
                  |L1.362|
00016a  484c              LDR      r0,|L1.668|
00016c  f9b00000          LDRSH    r0,[r0,#0]  ; rc
                  |L1.368|
000170  494a              LDR      r1,|L1.668|
000172  8008              STRH     r0,[r1,#0]
;;;149    		rc.R_x = rc.R_x < -660 ? 0 : rc.R_x;
000174  4608              MOV      r0,r1
000176  f9b00000          LDRSH    r0,[r0,#0]  ; rc
00017a  f5107f25          CMN      r0,#0x294
00017e  da01              BGE      |L1.388|
000180  2000              MOVS     r0,#0
000182  e002              B        |L1.394|
                  |L1.388|
000184  4845              LDR      r0,|L1.668|
000186  f9b00000          LDRSH    r0,[r0,#0]  ; rc
                  |L1.394|
00018a  4944              LDR      r1,|L1.668|
00018c  8008              STRH     r0,[r1,#0]
;;;150    		
;;;151    		rc.R_y = rc.R_y > 660 ? 0 : rc.R_y;
00018e  4608              MOV      r0,r1
000190  f9b00002          LDRSH    r0,[r0,#2]  ; rc
000194  f5b07f25          CMP      r0,#0x294
000198  dd01              BLE      |L1.414|
00019a  2000              MOVS     r0,#0
00019c  e002              B        |L1.420|
                  |L1.414|
00019e  483f              LDR      r0,|L1.668|
0001a0  f9b00002          LDRSH    r0,[r0,#2]  ; rc
                  |L1.420|
0001a4  493d              LDR      r1,|L1.668|
0001a6  8048              STRH     r0,[r1,#2]
;;;152    		rc.R_y = rc.R_y < -660 ? 0 : rc.R_y;
0001a8  4608              MOV      r0,r1
0001aa  f9b00002          LDRSH    r0,[r0,#2]  ; rc
0001ae  f5107f25          CMN      r0,#0x294
0001b2  da01              BGE      |L1.440|
0001b4  2000              MOVS     r0,#0
0001b6  e002              B        |L1.446|
                  |L1.440|
0001b8  4838              LDR      r0,|L1.668|
0001ba  f9b00002          LDRSH    r0,[r0,#2]  ; rc
                  |L1.446|
0001be  4937              LDR      r1,|L1.668|
0001c0  8048              STRH     r0,[r1,#2]
;;;153    		
;;;154    		rc.L_x = rc.L_x > 660 ? 0 : rc.L_x;
0001c2  4608              MOV      r0,r1
0001c4  f9b00004          LDRSH    r0,[r0,#4]  ; rc
0001c8  f5b07f25          CMP      r0,#0x294
0001cc  dd01              BLE      |L1.466|
0001ce  2000              MOVS     r0,#0
0001d0  e002              B        |L1.472|
                  |L1.466|
0001d2  4832              LDR      r0,|L1.668|
0001d4  f9b00004          LDRSH    r0,[r0,#4]  ; rc
                  |L1.472|
0001d8  4930              LDR      r1,|L1.668|
0001da  8088              STRH     r0,[r1,#4]
;;;155    		rc.L_x = rc.L_x < -660 ? 0 : rc.L_x;
0001dc  4608              MOV      r0,r1
0001de  f9b00004          LDRSH    r0,[r0,#4]  ; rc
0001e2  f5107f25          CMN      r0,#0x294
0001e6  da01              BGE      |L1.492|
0001e8  2000              MOVS     r0,#0
0001ea  e002              B        |L1.498|
                  |L1.492|
0001ec  482b              LDR      r0,|L1.668|
0001ee  f9b00004          LDRSH    r0,[r0,#4]  ; rc
                  |L1.498|
0001f2  492a              LDR      r1,|L1.668|
0001f4  8088              STRH     r0,[r1,#4]
;;;156    		
;;;157    		rc.L_y = rc.L_y > 660 ? 0 : rc.L_y;
0001f6  4608              MOV      r0,r1
0001f8  f9b00006          LDRSH    r0,[r0,#6]  ; rc
0001fc  f5b07f25          CMP      r0,#0x294
000200  dd01              BLE      |L1.518|
000202  2000              MOVS     r0,#0
000204  e002              B        |L1.524|
                  |L1.518|
000206  4825              LDR      r0,|L1.668|
000208  f9b00006          LDRSH    r0,[r0,#6]  ; rc
                  |L1.524|
00020c  4923              LDR      r1,|L1.668|
00020e  80c8              STRH     r0,[r1,#6]
;;;158    		rc.L_y = rc.L_y < -660 ? 0 : rc.L_y;
000210  4608              MOV      r0,r1
000212  f9b00006          LDRSH    r0,[r0,#6]  ; rc
000216  f5107f25          CMN      r0,#0x294
00021a  da01              BGE      |L1.544|
00021c  2000              MOVS     r0,#0
00021e  e002              B        |L1.550|
                  |L1.544|
000220  481e              LDR      r0,|L1.668|
000222  f9b00006          LDRSH    r0,[r0,#6]  ; rc
                  |L1.550|
000226  491d              LDR      r1,|L1.668|
000228  80c8              STRH     r0,[r1,#6]
;;;159    		
;;;160    		rc.mouse_x = rc.mouse_x > 1024 ? 0 : rc.mouse_x;
00022a  4608              MOV      r0,r1
00022c  f9b0000a          LDRSH    r0,[r0,#0xa]  ; rc
000230  f5b06f80          CMP      r0,#0x400
000234  dd01              BLE      |L1.570|
000236  2000              MOVS     r0,#0
000238  e002              B        |L1.576|
                  |L1.570|
00023a  4818              LDR      r0,|L1.668|
00023c  f9b0000a          LDRSH    r0,[r0,#0xa]  ; rc
                  |L1.576|
000240  4916              LDR      r1,|L1.668|
000242  8148              STRH     r0,[r1,#0xa]
;;;161    		rc.mouse_x = rc.mouse_x < -1024 ? 0 : rc.mouse_x;
000244  4608              MOV      r0,r1
000246  f9b0000a          LDRSH    r0,[r0,#0xa]  ; rc
00024a  f5106f80          CMN      r0,#0x400
00024e  da01              BGE      |L1.596|
000250  2000              MOVS     r0,#0
000252  e002              B        |L1.602|
                  |L1.596|
000254  4811              LDR      r0,|L1.668|
000256  f9b0000a          LDRSH    r0,[r0,#0xa]  ; rc
                  |L1.602|
00025a  4910              LDR      r1,|L1.668|
00025c  8148              STRH     r0,[r1,#0xa]
;;;162    		rc.mouse_y = rc.mouse_y > 1024 ? 0 : rc.mouse_y;
00025e  4608              MOV      r0,r1
000260  f9b0000c          LDRSH    r0,[r0,#0xc]  ; rc
000264  f5b06f80          CMP      r0,#0x400
000268  dd01              BLE      |L1.622|
00026a  2000              MOVS     r0,#0
00026c  e002              B        |L1.628|
                  |L1.622|
00026e  480b              LDR      r0,|L1.668|
000270  f9b0000c          LDRSH    r0,[r0,#0xc]  ; rc
                  |L1.628|
000274  4909              LDR      r1,|L1.668|
000276  8188              STRH     r0,[r1,#0xc]
;;;163    		rc.mouse_y = rc.mouse_y < -1024 ? 0 : rc.mouse_y;
000278  4608              MOV      r0,r1
00027a  f9b0000c          LDRSH    r0,[r0,#0xc]  ; rc
00027e  f5106f80          CMN      r0,#0x400
000282  da01              BGE      |L1.648|
000284  2000              MOVS     r0,#0
000286  e002              B        |L1.654|
                  |L1.648|
000288  4804              LDR      r0,|L1.668|
00028a  f9b0000c          LDRSH    r0,[r0,#0xc]  ; rc
                  |L1.654|
00028e  4903              LDR      r1,|L1.668|
000290  8188              STRH     r0,[r1,#0xc]
                  |L1.658|
;;;164    		
;;;165    	}
;;;166    }
000292  bd10              POP      {r4,pc}
;;;167    
                          ENDP

                  |L1.660|
                          DCD      0x10208000
                  |L1.664|
                          DCD      0x40026440
                  |L1.668|
                          DCD      ||rc||
                  |L1.672|
                          DCD      RXBuff

                          AREA ||i.Remote_uart1_init||, CODE, READONLY, ALIGN=2

                  Remote_uart1_init PROC
;;;34       */
;;;35     void Remote_uart1_init(void)
000000  b500              PUSH     {lr}
;;;36     {
000002  b097              SUB      sp,sp,#0x5c
;;;37       //GPIO端口设置
;;;38       GPIO_InitTypeDef GPIO_InitStructure;
;;;39     	USART_InitTypeDef USART_InitStructure;
;;;40     	NVIC_InitTypeDef NVIC_InitStructure;		//dma用到中断
;;;41     	DMA_InitTypeDef  DMA_InitStructure;
;;;42     	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB,ENABLE); //使能GPIOB时钟
000004  2101              MOVS     r1,#1
000006  2002              MOVS     r0,#2
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;43     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);//使能USART2时钟
00000c  2101              MOVS     r1,#1
00000e  2010              MOVS     r0,#0x10
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;44     	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2,ENABLE);  //DMA2时钟使能 ---********************
000014  2101              MOVS     r1,#1
000016  0588              LSLS     r0,r1,#22
000018  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;45      
;;;46     	//串口2对应引脚复用映射
;;;47     	GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1); //GPIOB7复用为USART2
00001c  2207              MOVS     r2,#7
00001e  4611              MOV      r1,r2
000020  483a              LDR      r0,|L2.268|
000022  f7fffffe          BL       GPIO_PinAFConfig
;;;48     	
;;;49     	//USART1端口配置
;;;50       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7; //GPIOB7
000026  2080              MOVS     r0,#0x80
000028  9015              STR      r0,[sp,#0x54]
;;;51     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能
00002a  2002              MOVS     r0,#2
00002c  f88d0058          STRB     r0,[sp,#0x58]
;;;52     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出
000030  2000              MOVS     r0,#0
000032  f88d005a          STRB     r0,[sp,#0x5a]
;;;53     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;	//速度50MHz
000036  2003              MOVS     r0,#3
000038  f88d0059          STRB     r0,[sp,#0x59]
;;;54     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; //上拉
00003c  2001              MOVS     r0,#1
00003e  f88d005b          STRB     r0,[sp,#0x5b]
;;;55     	GPIO_Init(GPIOB, &GPIO_InitStructure); //初始化PB7
000042  a915              ADD      r1,sp,#0x54
000044  4831              LDR      r0,|L2.268|
000046  f7fffffe          BL       GPIO_Init
;;;56     
;;;57       //USART1 初始化设置
;;;58     	USART_DeInit(USART1);
00004a  4831              LDR      r0,|L2.272|
00004c  f7fffffe          BL       USART_DeInit
;;;59     	USART_InitStructure.USART_BaudRate = 100000;//波特率设置
000050  4830              LDR      r0,|L2.276|
000052  9011              STR      r0,[sp,#0x44]
;;;60     	USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
000054  2000              MOVS     r0,#0
000056  f8ad0048          STRH     r0,[sp,#0x48]
;;;61     	USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位
00005a  f8ad004a          STRH     r0,[sp,#0x4a]
;;;62     	USART_InitStructure.USART_Parity = USART_Parity_Even;//偶校验
00005e  f44f6080          MOV      r0,#0x400
000062  f8ad004c          STRH     r0,[sp,#0x4c]
;;;63     	USART_InitStructure.USART_Mode = USART_Mode_Rx;	//收模式
000066  2004              MOVS     r0,#4
000068  f8ad004e          STRH     r0,[sp,#0x4e]
;;;64     	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
00006c  2000              MOVS     r0,#0
00006e  f8ad0050          STRH     r0,[sp,#0x50]
;;;65       USART_Init(USART1, &USART_InitStructure); //初始化串口2
000072  a911              ADD      r1,sp,#0x44
000074  4826              LDR      r0,|L2.272|
000076  f7fffffe          BL       USART_Init
;;;66     	
;;;67       USART_Cmd(USART1, ENABLE);  //使能串口2 	
00007a  2101              MOVS     r1,#1
00007c  4824              LDR      r0,|L2.272|
00007e  f7fffffe          BL       USART_Cmd
;;;68       USART_DMACmd(USART1, USART_DMAReq_Rx, ENABLE);  //使能串口2的DMA接收     
000082  2201              MOVS     r2,#1
000084  2140              MOVS     r1,#0x40
000086  4822              LDR      r0,|L2.272|
000088  f7fffffe          BL       USART_DMACmd
;;;69     	
;;;70     	
;;;71       NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream2_IRQn;//DMA1 数据流5 中断通道*******
00008c  203a              MOVS     r0,#0x3a
00008e  f88d0040          STRB     r0,[sp,#0x40]
;;;72     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;//抢占优先级3
000092  2000              MOVS     r0,#0
000094  f88d0041          STRB     r0,[sp,#0x41]
;;;73     	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;		//子优先级3
000098  2001              MOVS     r0,#1
00009a  f88d0042          STRB     r0,[sp,#0x42]
;;;74     	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			//IRQ通道使能
00009e  f88d0043          STRB     r0,[sp,#0x43]
;;;75     	NVIC_Init(&NVIC_InitStructure);	//根据指定的参数初始化VIC寄存器
0000a2  a810              ADD      r0,sp,#0x40
0000a4  f7fffffe          BL       NVIC_Init
;;;76     	
;;;77     	
;;;78     	
;;;79       /* 配置 DMA Stream */
;;;80     	DMA_DeInit(DMA2_Stream2); 
0000a8  481b              LDR      r0,|L2.280|
0000aa  f7fffffe          BL       DMA_DeInit
;;;81       DMA_InitStructure.DMA_Channel = DMA_Channel_4;  //通道选择
0000ae  f04f6000          MOV      r0,#0x8000000
0000b2  9001              STR      r0,[sp,#4]
;;;82       DMA_InitStructure.DMA_PeripheralBaseAddr = (u32)&(USART1->DR);//DMA外设地址****************************
0000b4  4816              LDR      r0,|L2.272|
0000b6  1d00              ADDS     r0,r0,#4
0000b8  9002              STR      r0,[sp,#8]
;;;83       DMA_InitStructure.DMA_Memory0BaseAddr = (u32)RXBuff;//DMA 存储器0地址 内存地址
0000ba  4818              LDR      r0,|L2.284|
0000bc  9003              STR      r0,[sp,#0xc]
;;;84       DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;//外设到存储器模式*******************************
0000be  2000              MOVS     r0,#0
0000c0  9004              STR      r0,[sp,#0x10]
;;;85       DMA_InitStructure.DMA_BufferSize = RX_BUF_SIZE;//数据传输量 
0000c2  2012              MOVS     r0,#0x12
0000c4  9005              STR      r0,[sp,#0x14]
;;;86       DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;//外设非增量模式
0000c6  2000              MOVS     r0,#0
0000c8  9006              STR      r0,[sp,#0x18]
;;;87       DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;//存储器增量模式
0000ca  f44f6080          MOV      r0,#0x400
0000ce  9007              STR      r0,[sp,#0x1c]
;;;88       DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;//外设数据长度:8位
0000d0  2000              MOVS     r0,#0
0000d2  9008              STR      r0,[sp,#0x20]
;;;89       DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;//存储器数据长度:8位
0000d4  9009              STR      r0,[sp,#0x24]
;;;90       DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;// 使用普通模式 ********************************
0000d6  f44f7080          MOV      r0,#0x100
0000da  900a              STR      r0,[sp,#0x28]
;;;91       DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;//中等优先级**********
0000dc  f44f3040          MOV      r0,#0x30000
0000e0  900b              STR      r0,[sp,#0x2c]
;;;92       DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;         
0000e2  2000              MOVS     r0,#0
0000e4  900c              STR      r0,[sp,#0x30]
;;;93       DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;//***************
0000e6  900d              STR      r0,[sp,#0x34]
;;;94       DMA_InitStructure.DMA_MemoryBurst = DMA_Mode_Normal;//存储器突发单次传输*****
0000e8  900e              STR      r0,[sp,#0x38]
;;;95       DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;//外设突发单次传输
0000ea  900f              STR      r0,[sp,#0x3c]
;;;96     	
;;;97       DMA_Init(DMA2_Stream2, &DMA_InitStructure);//初始化DMA1 Stream5	
0000ec  a901              ADD      r1,sp,#4
0000ee  480a              LDR      r0,|L2.280|
0000f0  f7fffffe          BL       DMA_Init
;;;98     	DMA_ITConfig(DMA2_Stream2,DMA_IT_TC,ENABLE);
0000f4  2201              MOVS     r2,#1
0000f6  2110              MOVS     r1,#0x10
0000f8  4807              LDR      r0,|L2.280|
0000fa  f7fffffe          BL       DMA_ITConfig
;;;99     	DMA_Cmd(DMA2_Stream2,ENABLE);
0000fe  2101              MOVS     r1,#1
000100  4805              LDR      r0,|L2.280|
000102  f7fffffe          BL       DMA_Cmd
;;;100    	
;;;101    }
000106  b017              ADD      sp,sp,#0x5c
000108  bd00              POP      {pc}
;;;102    
                          ENDP

00010a  0000              DCW      0x0000
                  |L2.268|
                          DCD      0x40020400
                  |L2.272|
                          DCD      0x40011000
                  |L2.276|
                          DCD      0x000186a0
                  |L2.280|
                          DCD      0x40026440
                  |L2.284|
                          DCD      RXBuff

                          AREA ||i.remote_off_line||, CODE, READONLY, ALIGN=2

                  remote_off_line PROC
;;;167    
;;;168    void remote_off_line(void)
000000  481c              LDR      r0,|L3.116|
;;;169    {
;;;170    	rc.last_cnts = rc.now_cnts;
000002  e9d0100e          LDRD     r1,r0,[r0,#0x38]
000006  4a1b              LDR      r2,|L3.116|
000008  e9c2100c          STRD     r1,r0,[r2,#0x30]
;;;171    	rc.now_cnts = rc.cnts;
00000c  4611              MOV      r1,r2
00000e  e9d10108          LDRD     r0,r1,[r1,#0x20]
000012  e9c2010e          STRD     r0,r1,[r2,#0x38]
;;;172    	
;;;173    	if(rc.last_cnts == rc.now_cnts)
000016  4610              MOV      r0,r2
000018  e9d0100c          LDRD     r1,r0,[r0,#0x30]
00001c  4613              MOV      r3,r2
00001e  e9d3230e          LDRD     r2,r3,[r3,#0x38]
000022  4051              EORS     r1,r1,r2
000024  4058              EORS     r0,r0,r3
000026  4301              ORRS     r1,r1,r0
000028  d11b              BNE      |L3.98|
;;;174    	{
;;;175    		rc.off_line_times++;
00002a  4812              LDR      r0,|L3.116|
00002c  e9d0300a          LDRD     r3,r0,[r0,#0x28]
000030  1c5a              ADDS     r2,r3,#1
000032  f1400000          ADC      r0,r0,#0
000036  490f              LDR      r1,|L3.116|
000038  e9c1200a          STRD     r2,r0,[r1,#0x28]
;;;176    		if(rc.off_line_times >= 200)
00003c  4608              MOV      r0,r1
00003e  e9d0300a          LDRD     r3,r0,[r0,#0x28]
000042  22c8              MOVS     r2,#0xc8
000044  1a9a              SUBS     r2,r3,r2
000046  f1700000          SBCS     r0,r0,#0
00004a  d305              BCC      |L3.88|
;;;177    			rc.off_line_flag = 1;
00004c  2101              MOVS     r1,#1
00004e  2000              MOVS     r0,#0
000050  4a08              LDR      r2,|L3.116|
000052  e9c21010          STRD     r1,r0,[r2,#0x40]
000056  e00b              B        |L3.112|
                  |L3.88|
;;;178    		else 
;;;179    			rc.off_line_flag = 0;
000058  2100              MOVS     r1,#0
00005a  4a06              LDR      r2,|L3.116|
00005c  6411              STR      r1,[r2,#0x40]  ; rc
00005e  6451              STR      r1,[r2,#0x44]  ; rc
000060  e006              B        |L3.112|
                  |L3.98|
;;;180    	}
;;;181    	else 
;;;182    	{
;;;183    		rc.off_line_times = 0;
000062  2100              MOVS     r1,#0
000064  4a03              LDR      r2,|L3.116|
000066  6291              STR      r1,[r2,#0x28]  ; rc
000068  62d1              STR      r1,[r2,#0x2c]  ; rc
;;;184    		rc.off_line_flag = 0;
00006a  2000              MOVS     r0,#0
00006c  6410              STR      r0,[r2,#0x40]  ; rc
00006e  6450              STR      r0,[r2,#0x44]  ; rc
                  |L3.112|
;;;185    	}
;;;186    }
000070  4770              BX       lr
;;;187    ///**
                          ENDP

000072  0000              DCW      0x0000
                  |L3.116|
                          DCD      ||rc||

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  RXBuff
                          %        24
                  ||rc||
                          %        72

;*** Start embedded assembler ***

#line 1 "..\\BSP\\remote.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_remote_c_6e20eb2e____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___8_remote_c_6e20eb2e____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_remote_c_6e20eb2e____REVSH|
#line 153
|__asm___8_remote_c_6e20eb2e____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_remote_c_6e20eb2e____RRX|
#line 328
|__asm___8_remote_c_6e20eb2e____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
