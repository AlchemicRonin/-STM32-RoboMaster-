; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\stm32f4xx_dbgmcu.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32f4xx_dbgmcu.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\stm32f4xx_dbgmcu.crf ..\FWLIB\src\stm32f4xx_dbgmcu.c]
                          THUMB

                          AREA ||i.DBGMCU_APB1PeriphConfig||, CODE, READONLY, ALIGN=2

                  DBGMCU_APB1PeriphConfig PROC
;;;122      */
;;;123    void DBGMCU_APB1PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L1.14|
;;;124    {
;;;125      /* Check the parameters */
;;;126      assert_param(IS_DBGMCU_APB1PERIPH(DBGMCU_Periph));
;;;127      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;128    
;;;129      if (NewState != DISABLE)
;;;130      {
;;;131        DBGMCU->APB1FZ |= DBGMCU_Periph;
000002  4a06              LDR      r2,|L1.28|
000004  6892              LDR      r2,[r2,#8]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L1.28|
00000a  609a              STR      r2,[r3,#8]
00000c  e004              B        |L1.24|
                  |L1.14|
;;;132      }
;;;133      else
;;;134      {
;;;135        DBGMCU->APB1FZ &= ~DBGMCU_Periph;
00000e  4a03              LDR      r2,|L1.28|
000010  6892              LDR      r2,[r2,#8]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L1.28|
000016  609a              STR      r2,[r3,#8]
                  |L1.24|
;;;136      }
;;;137    }
000018  4770              BX       lr
;;;138    
                          ENDP

00001a  0000              DCW      0x0000
                  |L1.28|
                          DCD      0xe0042000

                          AREA ||i.DBGMCU_APB2PeriphConfig||, CODE, READONLY, ALIGN=2

                  DBGMCU_APB2PeriphConfig PROC
;;;151      */
;;;152    void DBGMCU_APB2PeriphConfig(uint32_t DBGMCU_Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L2.14|
;;;153    {
;;;154      /* Check the parameters */
;;;155      assert_param(IS_DBGMCU_APB2PERIPH(DBGMCU_Periph));
;;;156      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;157    
;;;158      if (NewState != DISABLE)
;;;159      {
;;;160        DBGMCU->APB2FZ |= DBGMCU_Periph;
000002  4a06              LDR      r2,|L2.28|
000004  68d2              LDR      r2,[r2,#0xc]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L2.28|
00000a  60da              STR      r2,[r3,#0xc]
00000c  e004              B        |L2.24|
                  |L2.14|
;;;161      }
;;;162      else
;;;163      {
;;;164        DBGMCU->APB2FZ &= ~DBGMCU_Periph;
00000e  4a03              LDR      r2,|L2.28|
000010  68d2              LDR      r2,[r2,#0xc]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L2.28|
000016  60da              STR      r2,[r3,#0xc]
                  |L2.24|
;;;165      }
;;;166    }
000018  4770              BX       lr
;;;167    
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      0xe0042000

                          AREA ||i.DBGMCU_Config||, CODE, READONLY, ALIGN=2

                  DBGMCU_Config PROC
;;;83       */
;;;84     void DBGMCU_Config(uint32_t DBGMCU_Periph, FunctionalState NewState)
000000  b129              CBZ      r1,|L3.14|
;;;85     {
;;;86       /* Check the parameters */
;;;87       assert_param(IS_DBGMCU_PERIPH(DBGMCU_Periph));
;;;88       assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;89       if (NewState != DISABLE)
;;;90       {
;;;91         DBGMCU->CR |= DBGMCU_Periph;
000002  4a06              LDR      r2,|L3.28|
000004  6852              LDR      r2,[r2,#4]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L3.28|
00000a  605a              STR      r2,[r3,#4]
00000c  e004              B        |L3.24|
                  |L3.14|
;;;92       }
;;;93       else
;;;94       {
;;;95         DBGMCU->CR &= ~DBGMCU_Periph;
00000e  4a03              LDR      r2,|L3.28|
000010  6852              LDR      r2,[r2,#4]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L3.28|
000016  605a              STR      r2,[r3,#4]
                  |L3.24|
;;;96       }
;;;97     }
000018  4770              BX       lr
;;;98     
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0xe0042000

                          AREA ||i.DBGMCU_GetDEVID||, CODE, READONLY, ALIGN=2

                  DBGMCU_GetDEVID PROC
;;;67       */
;;;68     uint32_t DBGMCU_GetDEVID(void)
000000  4802              LDR      r0,|L4.12|
;;;69     {
;;;70        return(DBGMCU->IDCODE & IDCODE_DEVID_MASK);
000002  6800              LDR      r0,[r0,#0]
000004  f3c0000b          UBFX     r0,r0,#0,#12
;;;71     }
000008  4770              BX       lr
;;;72     
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      0xe0042000

                          AREA ||i.DBGMCU_GetREVID||, CODE, READONLY, ALIGN=2

                  DBGMCU_GetREVID PROC
;;;57       */
;;;58     uint32_t DBGMCU_GetREVID(void)
000000  4801              LDR      r0,|L5.8|
;;;59     {
;;;60        return(DBGMCU->IDCODE >> 16);
000002  6800              LDR      r0,[r0,#0]
000004  0c00              LSRS     r0,r0,#16
;;;61     }
000006  4770              BX       lr
;;;62     
                          ENDP

                  |L5.8|
                          DCD      0xe0042000

;*** Start embedded assembler ***

#line 1 "..\\FWLIB\\src\\stm32f4xx_dbgmcu.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___18_stm32f4xx_dbgmcu_c_588a430f____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___18_stm32f4xx_dbgmcu_c_588a430f____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___18_stm32f4xx_dbgmcu_c_588a430f____REVSH|
#line 153
|__asm___18_stm32f4xx_dbgmcu_c_588a430f____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___18_stm32f4xx_dbgmcu_c_588a430f____RRX|
#line 328
|__asm___18_stm32f4xx_dbgmcu_c_588a430f____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
