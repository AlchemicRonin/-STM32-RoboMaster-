; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\crc.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\crc.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\crc.crf ..\BSP\crc.c]
                          THUMB

                          AREA ||i.Append_CRC16_Check_Sum||, CODE, READONLY, ALIGN=2

                  Append_CRC16_Check_Sum PROC
;;;137    */
;;;138    void Append_CRC16_Check_Sum(uint8_t * pchMessage,uint32_t dwLength)
000000  b570              PUSH     {r4-r6,lr}
;;;139    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;140    	uint16_t wCRC = 0;
000006  2600              MOVS     r6,#0
;;;141    	if ((pchMessage == NULL) || (dwLength <= 2))
000008  b10d              CBZ      r5,|L1.14|
00000a  2c02              CMP      r4,#2
00000c  d800              BHI      |L1.16|
                  |L1.14|
;;;142    	{
;;;143    		return;
;;;144    	}
;;;145    	wCRC = Get_CRC16_Check_Sum ( (uint8_t *)pchMessage, dwLength-2, CRC_INIT );
;;;146    	pchMessage[dwLength-2] = (uint8_t)(wCRC & 0x00ff);
;;;147    	pchMessage[dwLength-1] = (uint8_t)((wCRC >> 8)& 0x00ff);
;;;148    }
00000e  bd70              POP      {r4-r6,pc}
                  |L1.16|
000010  1ea1              SUBS     r1,r4,#2              ;145
000012  4806              LDR      r0,|L1.44|
000014  8802              LDRH     r2,[r0,#0]            ;145  ; CRC_INIT
000016  4628              MOV      r0,r5                 ;145
000018  f7fffffe          BL       Get_CRC16_Check_Sum
00001c  4606              MOV      r6,r0                 ;145
00001e  1ea0              SUBS     r0,r4,#2              ;146
000020  542e              STRB     r6,[r5,r0]            ;146
000022  0a31              LSRS     r1,r6,#8              ;147
000024  1e60              SUBS     r0,r4,#1              ;147
000026  5429              STRB     r1,[r5,r0]            ;147
000028  bf00              NOP      
00002a  e7f0              B        |L1.14|
                          ENDP

                  |L1.44|
                          DCD      CRC_INIT

                          AREA ||i.Append_CRC8_Check_Sum||, CODE, READONLY, ALIGN=1

                  Append_CRC8_Check_Sum PROC
;;;55     */
;;;56     void Append_CRC8_Check_Sum(unsigned char *pchMessage, unsigned int dwLength)
000000  b570              PUSH     {r4-r6,lr}
;;;57     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;58     	unsigned char ucCRC = 0;
000006  2600              MOVS     r6,#0
;;;59     	if ((pchMessage == 0) || (dwLength <= 2)) return;
000008  b10d              CBZ      r5,|L2.14|
00000a  2c02              CMP      r4,#2
00000c  d800              BHI      |L2.16|
                  |L2.14|
;;;60     	ucCRC = Get_CRC8_Check_Sum ( (unsigned char *)pchMessage, dwLength-1, CRC8_INIT);
;;;61     	pchMessage[dwLength-1] = ucCRC;
;;;62     }
00000e  bd70              POP      {r4-r6,pc}
                  |L2.16|
000010  1e61              SUBS     r1,r4,#1              ;60
000012  22ff              MOVS     r2,#0xff              ;60
000014  4628              MOV      r0,r5                 ;60
000016  f7fffffe          BL       Get_CRC8_Check_Sum
00001a  4606              MOV      r6,r0                 ;60
00001c  1e60              SUBS     r0,r4,#1              ;61
00001e  542e              STRB     r6,[r5,r0]            ;61
000020  bf00              NOP      
000022  e7f4              B        |L2.14|
;;;63     uint16_t CRC_INIT = 0xffff;
                          ENDP


                          AREA ||i.Get_CRC16_Check_Sum||, CODE, READONLY, ALIGN=2

                  Get_CRC16_Check_Sum PROC
;;;103    */
;;;104    uint16_t Get_CRC16_Check_Sum(uint8_t *pchMessage,uint32_t dwLength,uint16_t wCRC)
000000  b530              PUSH     {r4,r5,lr}
;;;105    {
000002  4603              MOV      r3,r0
;;;106    	uint8_t chData;
;;;107    	if (pchMessage == NULL)
000004  b913              CBNZ     r3,|L3.12|
;;;108    	{
;;;109    		return 0xFFFF;
000006  f64f70ff          MOV      r0,#0xffff
                  |L3.10|
;;;110    	}
;;;111    	while(dwLength--)
;;;112    	{
;;;113    		chData = *pchMessage++;
;;;114    		(wCRC) = ((uint16_t)(wCRC) >> 8) ^ wCRC_Table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
;;;115    	}
;;;116    	return wCRC;
;;;117    }
00000a  bd30              POP      {r4,r5,pc}
                  |L3.12|
00000c  e009              B        |L3.34|
                  |L3.14|
00000e  f8134b01          LDRB     r4,[r3],#1            ;113
000012  ea820004          EOR      r0,r2,r4              ;114
000016  b2c0              UXTB     r0,r0                 ;114
000018  4d05              LDR      r5,|L3.48|
00001a  f8350010          LDRH     r0,[r5,r0,LSL #1]     ;114
00001e  ea802222          EOR      r2,r0,r2,ASR #8       ;114
                  |L3.34|
000022  0008              MOVS     r0,r1                 ;111
000024  f1a10101          SUB      r1,r1,#1              ;111
000028  d1f1              BNE      |L3.14|
00002a  4610              MOV      r0,r2                 ;116
00002c  e7ed              B        |L3.10|
;;;118    /*
                          ENDP

00002e  0000              DCW      0x0000
                  |L3.48|
                          DCD      wCRC_Table

                          AREA ||i.Get_CRC8_Check_Sum||, CODE, READONLY, ALIGN=2

                  Get_CRC8_Check_Sum PROC
;;;28     };
;;;29     unsigned char Get_CRC8_Check_Sum(unsigned char *pchMessage,unsigned int dwLength,unsigned char ucCRC8)
000000  b530              PUSH     {r4,r5,lr}
;;;30     {
000002  4603              MOV      r3,r0
;;;31     	unsigned char ucIndex;
;;;32     	while (dwLength--)
000004  e005              B        |L4.18|
                  |L4.6|
;;;33     	{
;;;34     		ucIndex = ucCRC8^(*pchMessage++);
000006  f8130b01          LDRB     r0,[r3],#1
00000a  ea800402          EOR      r4,r0,r2
;;;35     		ucCRC8 = CRC8_TAB[ucIndex];
00000e  4804              LDR      r0,|L4.32|
000010  5d02              LDRB     r2,[r0,r4]
                  |L4.18|
000012  0008              MOVS     r0,r1                 ;32
000014  f1a10101          SUB      r1,r1,#1              ;32
000018  d1f5              BNE      |L4.6|
;;;36     	}
;;;37     	return(ucCRC8);
00001a  4610              MOV      r0,r2
;;;38     }
00001c  bd30              POP      {r4,r5,pc}
;;;39     /*
                          ENDP

00001e  0000              DCW      0x0000
                  |L4.32|
                          DCD      CRC8_TAB

                          AREA ||i.Verify_CRC16_Check_Sum||, CODE, READONLY, ALIGN=2

                  Verify_CRC16_Check_Sum PROC
;;;122    */
;;;123    uint32_t Verify_CRC16_Check_Sum(uint8_t *pchMessage, uint32_t dwLength)
000000  b570              PUSH     {r4-r6,lr}
;;;124    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;125    	uint16_t wExpected = 0;
000006  2600              MOVS     r6,#0
;;;126    	if ((pchMessage == NULL) || (dwLength <= 2))
000008  b10d              CBZ      r5,|L5.14|
00000a  2c02              CMP      r4,#2
00000c  d801              BHI      |L5.18|
                  |L5.14|
;;;127    	{
;;;128    		return 0;
00000e  2000              MOVS     r0,#0
                  |L5.16|
;;;129    	}
;;;130    	wExpected = Get_CRC16_Check_Sum ( pchMessage, dwLength - 2, CRC_INIT);
;;;131    	return ((wExpected & 0xff) == pchMessage[dwLength - 2] && ((wExpected >> 8) & 0xff) == pchMessage[dwLength - 1]);
;;;132    }
000010  bd70              POP      {r4-r6,pc}
                  |L5.18|
000012  1ea1              SUBS     r1,r4,#2              ;130
000014  4809              LDR      r0,|L5.60|
000016  8802              LDRH     r2,[r0,#0]            ;130  ; CRC_INIT
000018  4628              MOV      r0,r5                 ;130
00001a  f7fffffe          BL       Get_CRC16_Check_Sum
00001e  4606              MOV      r6,r0                 ;130
000020  b2f1              UXTB     r1,r6                 ;131
000022  1ea0              SUBS     r0,r4,#2              ;131
000024  5c28              LDRB     r0,[r5,r0]            ;131
000026  4281              CMP      r1,r0                 ;131
000028  d106              BNE      |L5.56|
00002a  1e60              SUBS     r0,r4,#1              ;131
00002c  5c28              LDRB     r0,[r5,r0]            ;131
00002e  ebb02f16          CMP      r0,r6,LSR #8          ;131
000032  d101              BNE      |L5.56|
000034  2001              MOVS     r0,#1                 ;131
000036  e7eb              B        |L5.16|
                  |L5.56|
000038  2000              MOVS     r0,#0                 ;131
00003a  e7e9              B        |L5.16|
;;;133    /*
                          ENDP

                  |L5.60|
                          DCD      CRC_INIT

                          AREA ||i.Verify_CRC8_Check_Sum||, CODE, READONLY, ALIGN=1

                  Verify_CRC8_Check_Sum PROC
;;;43     */
;;;44     unsigned int Verify_CRC8_Check_Sum(unsigned char *pchMessage, unsigned int dwLength)
000000  b570              PUSH     {r4-r6,lr}
;;;45     {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;46     	unsigned char ucExpected = 0;
000006  2600              MOVS     r6,#0
;;;47     	if ((pchMessage == 0) || (dwLength <= 2)) return 0;
000008  b10d              CBZ      r5,|L6.14|
00000a  2c02              CMP      r4,#2
00000c  d801              BHI      |L6.18|
                  |L6.14|
00000e  2000              MOVS     r0,#0
                  |L6.16|
;;;48     	ucExpected = Get_CRC8_Check_Sum (pchMessage, dwLength-1, CRC8_INIT);
;;;49     	return ( ucExpected == pchMessage[dwLength-1] );
;;;50     }
000010  bd70              POP      {r4-r6,pc}
                  |L6.18|
000012  1e61              SUBS     r1,r4,#1              ;48
000014  22ff              MOVS     r2,#0xff              ;48
000016  4628              MOV      r0,r5                 ;48
000018  f7fffffe          BL       Get_CRC8_Check_Sum
00001c  4606              MOV      r6,r0                 ;48
00001e  1e60              SUBS     r0,r4,#1              ;49
000020  5c28              LDRB     r0,[r5,r0]            ;49
000022  42b0              CMP      r0,r6                 ;49
000024  d101              BNE      |L6.42|
000026  2001              MOVS     r0,#1                 ;49
000028  e7f2              B        |L6.16|
                  |L6.42|
00002a  2000              MOVS     r0,#0                 ;49
00002c  e7f0              B        |L6.16|
;;;51     /*
                          ENDP


                          AREA ||.constdata||, DATA, READONLY, ALIGN=1

                  CRC8_INIT
000000  ff                DCB      0xff
                  CRC8_TAB
000001  005ebc            DCB      0x00,0x5e,0xbc
000004  e2613fdd          DCB      0xe2,0x61,0x3f,0xdd
000008  83c29c7e          DCB      0x83,0xc2,0x9c,0x7e
00000c  20a3fd1f          DCB      0x20,0xa3,0xfd,0x1f
000010  419dc321          DCB      0x41,0x9d,0xc3,0x21
000014  7ffca240          DCB      0x7f,0xfc,0xa2,0x40
000018  1e5f01e3          DCB      0x1e,0x5f,0x01,0xe3
00001c  bd3e6082          DCB      0xbd,0x3e,0x60,0x82
000020  dc237d9f          DCB      0xdc,0x23,0x7d,0x9f
000024  c1421cfe          DCB      0xc1,0x42,0x1c,0xfe
000028  a0e1bf5d          DCB      0xa0,0xe1,0xbf,0x5d
00002c  0380de3c          DCB      0x03,0x80,0xde,0x3c
000030  62bee002          DCB      0x62,0xbe,0xe0,0x02
000034  5cdf8163          DCB      0x5c,0xdf,0x81,0x63
000038  3d7c22c0          DCB      0x3d,0x7c,0x22,0xc0
00003c  9e1d43a1          DCB      0x9e,0x1d,0x43,0xa1
000040  ff4618fa          DCB      0xff,0x46,0x18,0xfa
000044  a427799b          DCB      0xa4,0x27,0x79,0x9b
000048  c584da38          DCB      0xc5,0x84,0xda,0x38
00004c  66e5bb59          DCB      0x66,0xe5,0xbb,0x59
000050  07db8567          DCB      0x07,0xdb,0x85,0x67
000054  39bae406          DCB      0x39,0xba,0xe4,0x06
000058  581947a5          DCB      0x58,0x19,0x47,0xa5
00005c  fb7826c4          DCB      0xfb,0x78,0x26,0xc4
000060  9a653bd9          DCB      0x9a,0x65,0x3b,0xd9
000064  87045ab8          DCB      0x87,0x04,0x5a,0xb8
000068  e6a7f91b          DCB      0xe6,0xa7,0xf9,0x1b
00006c  45c6987a          DCB      0x45,0xc6,0x98,0x7a
000070  24f8a644          DCB      0x24,0xf8,0xa6,0x44
000074  1a99c725          DCB      0x1a,0x99,0xc7,0x25
000078  7b3a6486          DCB      0x7b,0x3a,0x64,0x86
00007c  d85b05e7          DCB      0xd8,0x5b,0x05,0xe7
000080  b98cd230          DCB      0xb9,0x8c,0xd2,0x30
000084  6eedb351          DCB      0x6e,0xed,0xb3,0x51
000088  0f4e10f2          DCB      0x0f,0x4e,0x10,0xf2
00008c  ac2f7193          DCB      0xac,0x2f,0x71,0x93
000090  cd114fad          DCB      0xcd,0x11,0x4f,0xad
000094  f3702ecc          DCB      0xf3,0x70,0x2e,0xcc
000098  92d38d6f          DCB      0x92,0xd3,0x8d,0x6f
00009c  31b2ec0e          DCB      0x31,0xb2,0xec,0x0e
0000a0  50aff113          DCB      0x50,0xaf,0xf1,0x13
0000a4  4dce9072          DCB      0x4d,0xce,0x90,0x72
0000a8  2c6d33d1          DCB      0x2c,0x6d,0x33,0xd1
0000ac  8f0c52b0          DCB      0x8f,0x0c,0x52,0xb0
0000b0  ee326c8e          DCB      0xee,0x32,0x6c,0x8e
0000b4  d0530def          DCB      0xd0,0x53,0x0d,0xef
0000b8  b1f0ae4c          DCB      0xb1,0xf0,0xae,0x4c
0000bc  1291cf2d          DCB      0x12,0x91,0xcf,0x2d
0000c0  73ca9476          DCB      0x73,0xca,0x94,0x76
0000c4  28abf517          DCB      0x28,0xab,0xf5,0x17
0000c8  490856b4          DCB      0x49,0x08,0x56,0xb4
0000cc  ea6937d5          DCB      0xea,0x69,0x37,0xd5
0000d0  8b5709eb          DCB      0x8b,0x57,0x09,0xeb
0000d4  b536688a          DCB      0xb5,0x36,0x68,0x8a
0000d8  d495cb29          DCB      0xd4,0x95,0xcb,0x29
0000dc  77f4aa48          DCB      0x77,0xf4,0xaa,0x48
0000e0  16e9b755          DCB      0x16,0xe9,0xb7,0x55
0000e4  0b88d634          DCB      0x0b,0x88,0xd6,0x34
0000e8  6a2b7597          DCB      0x6a,0x2b,0x75,0x97
0000ec  c94a14f6          DCB      0xc9,0x4a,0x14,0xf6
0000f0  a8742ac8          DCB      0xa8,0x74,0x2a,0xc8
0000f4  96154ba9          DCB      0x96,0x15,0x4b,0xa9
0000f8  f7b6e80a          DCB      0xf7,0xb6,0xe8,0x0a
0000fc  54d7896b          DCB      0x54,0xd7,0x89,0x6b
000100  3500              DCB      0x35,0x00
                  wCRC_Table
000102  0000              DCW      0x0000
000104  11892312          DCW      0x1189,0x2312
000108  329b4624          DCW      0x329b,0x4624
00010c  57ad6536          DCW      0x57ad,0x6536
000110  74bf8c48          DCW      0x74bf,0x8c48
000114  9dc1af5a          DCW      0x9dc1,0xaf5a
000118  bed3ca6c          DCW      0xbed3,0xca6c
00011c  dbe5e97e          DCW      0xdbe5,0xe97e
000120  f8f71081          DCW      0xf8f7,0x1081
000124  01083393          DCW      0x0108,0x3393
000128  221a56a5          DCW      0x221a,0x56a5
00012c  472c75b7          DCW      0x472c,0x75b7
000130  643e9cc9          DCW      0x643e,0x9cc9
000134  8d40bfdb          DCW      0x8d40,0xbfdb
000138  ae52daed          DCW      0xae52,0xdaed
00013c  cb64f9ff          DCW      0xcb64,0xf9ff
000140  e8762102          DCW      0xe876,0x2102
000144  308b0210          DCW      0x308b,0x0210
000148  13996726          DCW      0x1399,0x6726
00014c  76af4434          DCW      0x76af,0x4434
000150  55bdad4a          DCW      0x55bd,0xad4a
000154  bcc38e58          DCW      0xbcc3,0x8e58
000158  9fd1eb6e          DCW      0x9fd1,0xeb6e
00015c  fae7c87c          DCW      0xfae7,0xc87c
000160  d9f53183          DCW      0xd9f5,0x3183
000164  200a1291          DCW      0x200a,0x1291
000168  031877a7          DCW      0x0318,0x77a7
00016c  662e54b5          DCW      0x662e,0x54b5
000170  453cbdcb          DCW      0x453c,0xbdcb
000174  ac429ed9          DCW      0xac42,0x9ed9
000178  8f50fbef          DCW      0x8f50,0xfbef
00017c  ea66d8fd          DCW      0xea66,0xd8fd
000180  c9744204          DCW      0xc974,0x4204
000184  538d6116          DCW      0x538d,0x6116
000188  709f0420          DCW      0x709f,0x0420
00018c  15a92732          DCW      0x15a9,0x2732
000190  36bbce4c          DCW      0x36bb,0xce4c
000194  dfc5ed5e          DCW      0xdfc5,0xed5e
000198  fcd78868          DCW      0xfcd7,0x8868
00019c  99e1ab7a          DCW      0x99e1,0xab7a
0001a0  baf35285          DCW      0xbaf3,0x5285
0001a4  430c7197          DCW      0x430c,0x7197
0001a8  601e14a1          DCW      0x601e,0x14a1
0001ac  052837b3          DCW      0x0528,0x37b3
0001b0  263adecd          DCW      0x263a,0xdecd
0001b4  cf44fddf          DCW      0xcf44,0xfddf
0001b8  ec5698e9          DCW      0xec56,0x98e9
0001bc  8960bbfb          DCW      0x8960,0xbbfb
0001c0  aa726306          DCW      0xaa72,0x6306
0001c4  728f4014          DCW      0x728f,0x4014
0001c8  519d2522          DCW      0x519d,0x2522
0001cc  34ab0630          DCW      0x34ab,0x0630
0001d0  17b9ef4e          DCW      0x17b9,0xef4e
0001d4  fec7cc5c          DCW      0xfec7,0xcc5c
0001d8  ddd5a96a          DCW      0xddd5,0xa96a
0001dc  b8e38a78          DCW      0xb8e3,0x8a78
0001e0  9bf17387          DCW      0x9bf1,0x7387
0001e4  620e5095          DCW      0x620e,0x5095
0001e8  411c35a3          DCW      0x411c,0x35a3
0001ec  242a16b1          DCW      0x242a,0x16b1
0001f0  0738ffcf          DCW      0x0738,0xffcf
0001f4  ee46dcdd          DCW      0xee46,0xdcdd
0001f8  cd54b9eb          DCW      0xcd54,0xb9eb
0001fc  a8629af9          DCW      0xa862,0x9af9
000200  8b708408          DCW      0x8b70,0x8408
000204  9581a71a          DCW      0x9581,0xa71a
000208  b693c22c          DCW      0xb693,0xc22c
00020c  d3a5e13e          DCW      0xd3a5,0xe13e
000210  f0b70840          DCW      0xf0b7,0x0840
000214  19c92b52          DCW      0x19c9,0x2b52
000218  3adb4e64          DCW      0x3adb,0x4e64
00021c  5fed6d76          DCW      0x5fed,0x6d76
000220  7cff9489          DCW      0x7cff,0x9489
000224  8500b79b          DCW      0x8500,0xb79b
000228  a612d2ad          DCW      0xa612,0xd2ad
00022c  c324f1bf          DCW      0xc324,0xf1bf
000230  e03618c1          DCW      0xe036,0x18c1
000234  09483bd3          DCW      0x0948,0x3bd3
000238  2a5a5ee5          DCW      0x2a5a,0x5ee5
00023c  4f6c7df7          DCW      0x4f6c,0x7df7
000240  6c7ea50a          DCW      0x6c7e,0xa50a
000244  b4838618          DCW      0xb483,0x8618
000248  9791e32e          DCW      0x9791,0xe32e
00024c  f2a7c03c          DCW      0xf2a7,0xc03c
000250  d1b52942          DCW      0xd1b5,0x2942
000254  38cb0a50          DCW      0x38cb,0x0a50
000258  1bd96f66          DCW      0x1bd9,0x6f66
00025c  7eef4c74          DCW      0x7eef,0x4c74
000260  5dfdb58b          DCW      0x5dfd,0xb58b
000264  a4029699          DCW      0xa402,0x9699
000268  8710f3af          DCW      0x8710,0xf3af
00026c  e226d0bd          DCW      0xe226,0xd0bd
000270  c13439c3          DCW      0xc134,0x39c3
000274  284a1ad1          DCW      0x284a,0x1ad1
000278  0b587fe7          DCW      0x0b58,0x7fe7
00027c  6e6e5cf5          DCW      0x6e6e,0x5cf5
000280  4d7cc60c          DCW      0x4d7c,0xc60c
000284  d785e51e          DCW      0xd785,0xe51e
000288  f4978028          DCW      0xf497,0x8028
00028c  91a1a33a          DCW      0x91a1,0xa33a
000290  b2b34a44          DCW      0xb2b3,0x4a44
000294  5bcd6956          DCW      0x5bcd,0x6956
000298  78df0c60          DCW      0x78df,0x0c60
00029c  1de92f72          DCW      0x1de9,0x2f72
0002a0  3efbd68d          DCW      0x3efb,0xd68d
0002a4  c704f59f          DCW      0xc704,0xf59f
0002a8  e41690a9          DCW      0xe416,0x90a9
0002ac  8120b3bb          DCW      0x8120,0xb3bb
0002b0  a2325ac5          DCW      0xa232,0x5ac5
0002b4  4b4c79d7          DCW      0x4b4c,0x79d7
0002b8  685e1ce1          DCW      0x685e,0x1ce1
0002bc  0d683ff3          DCW      0x0d68,0x3ff3
0002c0  2e7ae70e          DCW      0x2e7a,0xe70e
0002c4  f687c41c          DCW      0xf687,0xc41c
0002c8  d595a12a          DCW      0xd595,0xa12a
0002cc  b0a38238          DCW      0xb0a3,0x8238
0002d0  93b16b46          DCW      0x93b1,0x6b46
0002d4  7acf4854          DCW      0x7acf,0x4854
0002d8  59dd2d62          DCW      0x59dd,0x2d62
0002dc  3ceb0e70          DCW      0x3ceb,0x0e70
0002e0  1ff9f78f          DCW      0x1ff9,0xf78f
0002e4  e606d49d          DCW      0xe606,0xd49d
0002e8  c514b1ab          DCW      0xc514,0xb1ab
0002ec  a02292b9          DCW      0xa022,0x92b9
0002f0  83307bc7          DCW      0x8330,0x7bc7
0002f4  6a4e58d5          DCW      0x6a4e,0x58d5
0002f8  495c3de3          DCW      0x495c,0x3de3
0002fc  2c6a1ef1          DCW      0x2c6a,0x1ef1
000300  0f78              DCW      0x0f78

                          AREA ||.data||, DATA, ALIGN=1

                  CRC_INIT
000000  ffff              DCW      0xffff

;*** Start embedded assembler ***

#line 1 "..\\BSP\\crc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_crc_c_e039bb35____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___5_crc_c_e039bb35____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_crc_c_e039bb35____REVSH|
#line 153
|__asm___5_crc_c_e039bb35____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_crc_c_e039bb35____RRX|
#line 328
|__asm___5_crc_c_e039bb35____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
