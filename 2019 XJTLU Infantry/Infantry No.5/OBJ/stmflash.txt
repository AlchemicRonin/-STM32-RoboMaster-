; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\stmflash.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stmflash.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\stmflash.crf ..\BSP\stmflash.c]
                          THUMB

                          AREA ||i.Read_Offset||, CODE, READONLY, ALIGN=2

                  Read_Offset PROC
;;;97     
;;;98     void Read_Offset()
000000  b500              PUSH     {lr}
;;;99     {
000002  b089              SUB      sp,sp,#0x24
;;;100    	float nulla[3];
;;;101    	float offset[SIZE] = {0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f};
000004  2118              MOVS     r1,#0x18
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       __aeabi_memclr4
;;;102    	STMFLASH_Read(FLASH_SAVE_ADDR,(u32*)offset,SIZE);
00000c  2206              MOVS     r2,#6
00000e  4669              MOV      r1,sp
000010  4804              LDR      r0,|L1.36|
000012  f7fffffe          BL       STMFLASH_Read
;;;103    	
;;;104    	INS_set_cali_gyro(nulla, offset);
000016  4669              MOV      r1,sp
000018  a806              ADD      r0,sp,#0x18
00001a  f7fffffe          BL       INS_set_cali_gyro
;;;105    
;;;106    }
00001e  b009              ADD      sp,sp,#0x24
000020  bd00              POP      {pc}
;;;107    
                          ENDP

000022  0000              DCW      0x0000
                  |L1.36|
                          DCD      0x08010004

                          AREA ||i.STMFLASH_GetFlashSector||, CODE, READONLY, ALIGN=2

                  STMFLASH_GetFlashSector PROC
;;;20     
;;;21     uint16_t STMFLASH_GetFlashSector(u32 addr)
000000  4601              MOV      r1,r0
;;;22     {
;;;23     	if(addr<ADDR_FLASH_SECTOR_1)return FLASH_Sector_0;
000002  481c              LDR      r0,|L2.116|
000004  4281              CMP      r1,r0
000006  d201              BCS      |L2.12|
000008  2000              MOVS     r0,#0
                  |L2.10|
;;;24     	else if(addr<ADDR_FLASH_SECTOR_2)return FLASH_Sector_1;
;;;25     	else if(addr<ADDR_FLASH_SECTOR_3)return FLASH_Sector_2;
;;;26     	else if(addr<ADDR_FLASH_SECTOR_4)return FLASH_Sector_3;
;;;27     	else if(addr<ADDR_FLASH_SECTOR_5)return FLASH_Sector_4;
;;;28     	else if(addr<ADDR_FLASH_SECTOR_6)return FLASH_Sector_5;
;;;29     	else if(addr<ADDR_FLASH_SECTOR_7)return FLASH_Sector_6;
;;;30     	else if(addr<ADDR_FLASH_SECTOR_8)return FLASH_Sector_7;
;;;31     	else if(addr<ADDR_FLASH_SECTOR_9)return FLASH_Sector_8;
;;;32     	else if(addr<ADDR_FLASH_SECTOR_10)return FLASH_Sector_9;
;;;33     	else if(addr<ADDR_FLASH_SECTOR_11)return FLASH_Sector_10; 
;;;34     	return FLASH_Sector_11;	
;;;35     }
00000a  4770              BX       lr
                  |L2.12|
00000c  481a              LDR      r0,|L2.120|
00000e  4281              CMP      r1,r0                 ;24
000010  d201              BCS      |L2.22|
000012  2008              MOVS     r0,#8                 ;24
000014  e7f9              B        |L2.10|
                  |L2.22|
000016  4819              LDR      r0,|L2.124|
000018  4281              CMP      r1,r0                 ;25
00001a  d201              BCS      |L2.32|
00001c  2010              MOVS     r0,#0x10              ;25
00001e  e7f4              B        |L2.10|
                  |L2.32|
000020  4817              LDR      r0,|L2.128|
000022  4281              CMP      r1,r0                 ;26
000024  d201              BCS      |L2.42|
000026  2018              MOVS     r0,#0x18              ;26
000028  e7ef              B        |L2.10|
                  |L2.42|
00002a  4816              LDR      r0,|L2.132|
00002c  4281              CMP      r1,r0                 ;27
00002e  d201              BCS      |L2.52|
000030  2020              MOVS     r0,#0x20              ;27
000032  e7ea              B        |L2.10|
                  |L2.52|
000034  4814              LDR      r0,|L2.136|
000036  4281              CMP      r1,r0                 ;28
000038  d201              BCS      |L2.62|
00003a  2028              MOVS     r0,#0x28              ;28
00003c  e7e5              B        |L2.10|
                  |L2.62|
00003e  4813              LDR      r0,|L2.140|
000040  4281              CMP      r1,r0                 ;29
000042  d201              BCS      |L2.72|
000044  2030              MOVS     r0,#0x30              ;29
000046  e7e0              B        |L2.10|
                  |L2.72|
000048  4811              LDR      r0,|L2.144|
00004a  4281              CMP      r1,r0                 ;30
00004c  d201              BCS      |L2.82|
00004e  2038              MOVS     r0,#0x38              ;30
000050  e7db              B        |L2.10|
                  |L2.82|
000052  4810              LDR      r0,|L2.148|
000054  4281              CMP      r1,r0                 ;31
000056  d201              BCS      |L2.92|
000058  2040              MOVS     r0,#0x40              ;31
00005a  e7d6              B        |L2.10|
                  |L2.92|
00005c  480e              LDR      r0,|L2.152|
00005e  4281              CMP      r1,r0                 ;32
000060  d201              BCS      |L2.102|
000062  2048              MOVS     r0,#0x48              ;32
000064  e7d1              B        |L2.10|
                  |L2.102|
000066  480d              LDR      r0,|L2.156|
000068  4281              CMP      r1,r0                 ;33
00006a  d201              BCS      |L2.112|
00006c  2050              MOVS     r0,#0x50              ;33
00006e  e7cc              B        |L2.10|
                  |L2.112|
000070  2058              MOVS     r0,#0x58              ;34
000072  e7ca              B        |L2.10|
;;;36     //从指定地址开始写入指定长度的数据
                          ENDP

                  |L2.116|
                          DCD      0x08004000
                  |L2.120|
                          DCD      0x08008000
                  |L2.124|
                          DCD      0x0800c000
                  |L2.128|
                          DCD      0x08010000
                  |L2.132|
                          DCD      0x08020000
                  |L2.136|
                          DCD      0x08040000
                  |L2.140|
                          DCD      0x08060000
                  |L2.144|
                          DCD      0x08080000
                  |L2.148|
                          DCD      0x080a0000
                  |L2.152|
                          DCD      0x080c0000
                  |L2.156|
                          DCD      0x080e0000

                          AREA ||i.STMFLASH_Read||, CODE, READONLY, ALIGN=1

                  STMFLASH_Read PROC
;;;87     //NumToRead:字(4位)数
;;;88     void STMFLASH_Read(u32 ReadAddr,u32 *pBuffer,u32 NumToRead)   	
000000  b530              PUSH     {r4,r5,lr}
;;;89     {
000002  4603              MOV      r3,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
;;;90     	u32 i;
;;;91     	for(i=0;i<NumToRead;i++)
000008  2200              MOVS     r2,#0
00000a  e006              B        |L3.26|
                  |L3.12|
;;;92     	{
;;;93     		pBuffer[i]=STMFLASH_ReadWord(ReadAddr);//读取4个字节.
00000c  4618              MOV      r0,r3
00000e  f7fffffe          BL       STMFLASH_ReadWord
000012  f8440022          STR      r0,[r4,r2,LSL #2]
;;;94     		ReadAddr+=4;//偏移4个字节.	
000016  1d1b              ADDS     r3,r3,#4
000018  1c52              ADDS     r2,r2,#1              ;91
                  |L3.26|
00001a  42aa              CMP      r2,r5                 ;91
00001c  d3f6              BCC      |L3.12|
;;;95     	}
;;;96     }
00001e  bd30              POP      {r4,r5,pc}
;;;97     
                          ENDP


                          AREA ||i.STMFLASH_ReadWord||, CODE, READONLY, ALIGN=1

                  STMFLASH_ReadWord PROC
;;;12     
;;;13     u32 STMFLASH_ReadWord(u32 faddr)
000000  4601              MOV      r1,r0
;;;14     {
;;;15     	return *(vu32*)faddr; 
000002  6808              LDR      r0,[r1,#0]
;;;16     }  
000004  4770              BX       lr
;;;17     //获取某个地址所在的flash扇区
                          ENDP


                          AREA ||i.STMFLASH_Write||, CODE, READONLY, ALIGN=2

                  STMFLASH_Write PROC
;;;45     //NumToWrite:字(32位)数(就是要写入的32位数据的个数.) 
;;;46     void STMFLASH_Write(u32 WriteAddr,u32 *pBuffer,u32 NumToWrite)	
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;47     { 
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;48       FLASH_Status status = FLASH_COMPLETE;
00000a  f04f0809          MOV      r8,#9
;;;49     	u32 addrx=0;
00000e  2500              MOVS     r5,#0
;;;50     	u32 endaddr=0;	
000010  46a9              MOV      r9,r5
;;;51       if(WriteAddr<STM32_FLASH_BASE||WriteAddr%4)return;	//非法地址
000012  f1b46f00          CMP      r4,#0x8000000
000016  d302              BCC      |L5.30|
000018  f0040003          AND      r0,r4,#3
00001c  b108              CBZ      r0,|L5.34|
                  |L5.30|
;;;52     	FLASH_Unlock();									//解锁 
;;;53       FLASH_DataCacheCmd(DISABLE);//FLASH擦除期间,必须禁止数据缓存
;;;54      		
;;;55     	addrx=WriteAddr;				//写入的起始地址
;;;56     	endaddr=WriteAddr+NumToWrite*4;	//写入的结束地址
;;;57     	if(addrx<0X1FFF0000)			//只有主存储区,才需要执行擦除操作!!
;;;58     	{
;;;59     		while(addrx<endaddr)		//扫清一切障碍.(对非FFFFFFFF的地方,先擦除)
;;;60     		{
;;;61     			if(STMFLASH_ReadWord(addrx)!=0XFFFFFFFF)//有非0XFFFFFFFF的地方,要擦除这个扇区
;;;62     			{   
;;;63     				status=FLASH_EraseSector(STMFLASH_GetFlashSector(addrx),VoltageRange_3);//VCC=2.7~3.6V之间!!
;;;64     				if(status!=FLASH_COMPLETE)break;	//发生错误了
;;;65     			}else addrx+=4;
;;;66     		} 
;;;67     	}
;;;68     	if(status==FLASH_COMPLETE)
;;;69     	{
;;;70     		while(WriteAddr<endaddr)//写数据
;;;71     		{
;;;72     			if(FLASH_ProgramWord(WriteAddr,*pBuffer)!=FLASH_COMPLETE)//写入数据
;;;73     			{ 
;;;74     				break;	//写入异常
;;;75     			}
;;;76     			WriteAddr+=4;
;;;77     			pBuffer++;
;;;78     		} 
;;;79     	}
;;;80       FLASH_DataCacheCmd(ENABLE);	//FLASH擦除结束,开启数据缓存
;;;81     	FLASH_Lock();//上锁
;;;82     } 
00001e  e8bd87f0          POP      {r4-r10,pc}
                  |L5.34|
000022  f7fffffe          BL       FLASH_Unlock
000026  2000              MOVS     r0,#0                 ;53
000028  f7fffffe          BL       FLASH_DataCacheCmd
00002c  4625              MOV      r5,r4                 ;55
00002e  eb040987          ADD      r9,r4,r7,LSL #2       ;56
000032  4818              LDR      r0,|L5.148|
000034  4285              CMP      r5,r0                 ;57
000036  d215              BCS      |L5.100|
000038  e011              B        |L5.94|
                  |L5.58|
00003a  4628              MOV      r0,r5                 ;61
00003c  f7fffffe          BL       STMFLASH_ReadWord
000040  1c40              ADDS     r0,r0,#1              ;61
000042  b158              CBZ      r0,|L5.92|
000044  4628              MOV      r0,r5                 ;63
000046  f7fffffe          BL       STMFLASH_GetFlashSector
00004a  4682              MOV      r10,r0                ;63
00004c  2102              MOVS     r1,#2                 ;63
00004e  f7fffffe          BL       FLASH_EraseSector
000052  4680              MOV      r8,r0                 ;63
000054  f1b80f09          CMP      r8,#9                 ;64
000058  d001              BEQ      |L5.94|
00005a  e002              B        |L5.98|
                  |L5.92|
00005c  1d2d              ADDS     r5,r5,#4              ;65
                  |L5.94|
00005e  454d              CMP      r5,r9                 ;59
000060  d3eb              BCC      |L5.58|
                  |L5.98|
000062  bf00              NOP                            ;64
                  |L5.100|
000064  f1b80f09          CMP      r8,#9                 ;68
000068  d10c              BNE      |L5.132|
00006a  e008              B        |L5.126|
                  |L5.108|
00006c  4620              MOV      r0,r4                 ;72
00006e  6831              LDR      r1,[r6,#0]            ;72
000070  f7fffffe          BL       FLASH_ProgramWord
000074  2809              CMP      r0,#9                 ;72
000076  d000              BEQ      |L5.122|
000078  e003              B        |L5.130|
                  |L5.122|
00007a  1d24              ADDS     r4,r4,#4              ;76
00007c  1d36              ADDS     r6,r6,#4              ;77
                  |L5.126|
00007e  454c              CMP      r4,r9                 ;70
000080  d3f4              BCC      |L5.108|
                  |L5.130|
000082  bf00              NOP                            ;74
                  |L5.132|
000084  2001              MOVS     r0,#1                 ;80
000086  f7fffffe          BL       FLASH_DataCacheCmd
00008a  f7fffffe          BL       FLASH_Lock
00008e  bf00              NOP      
000090  e7c5              B        |L5.30|
;;;83     
                          ENDP

000092  0000              DCW      0x0000
                  |L5.148|
                          DCD      0x1fff0000

                          AREA ||i.flash_write||, CODE, READONLY, ALIGN=2

                  flash_write PROC
;;;107    
;;;108    void flash_write(void)
000000  b510              PUSH     {r4,lr}
;;;109    {
;;;110    	STMFLASH_Write(FLASH_SAVE_ADDR,(u32*)OFFSET_Buffer,SIZE);
000002  2206              MOVS     r2,#6
000004  4902              LDR      r1,|L6.16|
000006  4803              LDR      r0,|L6.20|
000008  f7fffffe          BL       STMFLASH_Write
;;;111    }
00000c  bd10              POP      {r4,pc}
;;;112    	
                          ENDP

00000e  0000              DCW      0x0000
                  |L6.16|
                          DCD      OFFSET_Buffer
                  |L6.20|
                          DCD      0x08010004

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  OFFSET_Buffer
                          %        24
                  OFFSET_Buffer_Acc
                          %        24

;*** Start embedded assembler ***

#line 1 "..\\BSP\\stmflash.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_stmflash_c_31c988a6____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___10_stmflash_c_31c988a6____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_stmflash_c_31c988a6____REVSH|
#line 153
|__asm___10_stmflash_c_31c988a6____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_stmflash_c_31c988a6____RRX|
#line 328
|__asm___10_stmflash_c_31c988a6____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
