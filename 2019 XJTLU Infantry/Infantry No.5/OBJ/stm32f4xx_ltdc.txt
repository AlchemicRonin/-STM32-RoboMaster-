; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\stm32f4xx_ltdc.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32f4xx_ltdc.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\stm32f4xx_ltdc.crf ..\FWLIB\src\stm32f4xx_ltdc.c]
                          THUMB

                          AREA ||i.LTDC_CLUTCmd||, CODE, READONLY, ALIGN=2

                  LTDC_CLUTCmd PROC
;;;630    
;;;631    void LTDC_CLUTCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
000000  b121              CBZ      r1,|L1.12|
;;;632    {
;;;633      /* Check the parameters */
;;;634      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;635    
;;;636      if (NewState != DISABLE)
;;;637      {
;;;638        /* Enable CLUT by setting CLUTEN bit */
;;;639        LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
000002  6802              LDR      r2,[r0,#0]
000004  f0420210          ORR      r2,r2,#0x10
000008  6002              STR      r2,[r0,#0]
00000a  e003              B        |L1.20|
                  |L1.12|
;;;640      }
;;;641      else
;;;642      {
;;;643        /* Disable CLUT by clearing CLUTEN bit */
;;;644        LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_CLUTEN;
00000c  6802              LDR      r2,[r0,#0]
00000e  f0220210          BIC      r2,r2,#0x10
000012  6002              STR      r2,[r0,#0]
                  |L1.20|
;;;645      }
;;;646      
;;;647      /* Reload shadow register */
;;;648      LTDC->SRCR = LTDC_IMReload;
000014  2201              MOVS     r2,#1
000016  4b01              LDR      r3,|L1.28|
000018  601a              STR      r2,[r3,#0]
;;;649    }
00001a  4770              BX       lr
;;;650    
                          ENDP

                  |L1.28|
                          DCD      0x40016824

                          AREA ||i.LTDC_CLUTInit||, CODE, READONLY, ALIGN=1

                  LTDC_CLUTInit PROC
;;;659    
;;;660    void LTDC_CLUTInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;661    {  
;;;662      uint32_t green = 0;
000002  2200              MOVS     r2,#0
;;;663      uint32_t red = 0;
000004  2300              MOVS     r3,#0
;;;664      uint32_t clutadd = 0;
000006  2400              MOVS     r4,#0
;;;665    
;;;666      /* Check the parameters */
;;;667      assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_CLUTAdress));
;;;668      assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_RedValue));
;;;669      assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_GreenValue));
;;;670      assert_param(IS_LTDC_CLUTWR(LTDC_CLUT_InitStruct->LTDC_BlueValue));
;;;671        
;;;672      /* Specifies the CLUT address and RGB value */
;;;673      green = (LTDC_CLUT_InitStruct->LTDC_GreenValue << 8);
000008  688d              LDR      r5,[r1,#8]
00000a  022a              LSLS     r2,r5,#8
;;;674      red = (LTDC_CLUT_InitStruct->LTDC_RedValue << 16);
00000c  898d              LDRH     r5,[r1,#0xc]
00000e  042b              LSLS     r3,r5,#16
;;;675      clutadd = (LTDC_CLUT_InitStruct->LTDC_CLUTAdress << 24);
000010  780d              LDRB     r5,[r1,#0]
000012  062c              LSLS     r4,r5,#24
;;;676      LTDC_Layerx->CLUTWR  = (clutadd | LTDC_CLUT_InitStruct->LTDC_BlueValue | \
000014  684d              LDR      r5,[r1,#4]
000016  4325              ORRS     r5,r5,r4
000018  4315              ORRS     r5,r5,r2
00001a  431d              ORRS     r5,r5,r3
00001c  6405              STR      r5,[r0,#0x40]
;;;677                                  green | red);
;;;678    }
00001e  bd30              POP      {r4,r5,pc}
;;;679    
                          ENDP


                          AREA ||i.LTDC_CLUTStructInit||, CODE, READONLY, ALIGN=1

                  LTDC_CLUTStructInit PROC
;;;686    
;;;687    void LTDC_CLUTStructInit(LTDC_CLUT_InitTypeDef* LTDC_CLUT_InitStruct)
000000  2100              MOVS     r1,#0
;;;688    {
;;;689      /*!< Initialize the CLUT address and RGB values */
;;;690      LTDC_CLUT_InitStruct->LTDC_CLUTAdress = 0x00;
000002  6001              STR      r1,[r0,#0]
;;;691      LTDC_CLUT_InitStruct->LTDC_BlueValue = 0x00;
000004  6041              STR      r1,[r0,#4]
;;;692      LTDC_CLUT_InitStruct->LTDC_GreenValue = 0x00;
000006  6081              STR      r1,[r0,#8]
;;;693      LTDC_CLUT_InitStruct->LTDC_RedValue = 0x00;
000008  60c1              STR      r1,[r0,#0xc]
;;;694    }
00000a  4770              BX       lr
;;;695    
                          ENDP


                          AREA ||i.LTDC_ClearFlag||, CODE, READONLY, ALIGN=2

                  LTDC_ClearFlag PROC
;;;1028     */
;;;1029   void LTDC_ClearFlag(uint32_t LTDC_FLAG)
000000  4901              LDR      r1,|L4.8|
;;;1030   {
;;;1031     /* Check the parameters */
;;;1032     assert_param(IS_LTDC_FLAG(LTDC_FLAG));
;;;1033   
;;;1034     /* Clear the corresponding LTDC flag */
;;;1035     LTDC->ICR = (uint32_t)LTDC_FLAG;
000002  6008              STR      r0,[r1,#0]
;;;1036   }
000004  4770              BX       lr
;;;1037   
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      0x4001683c

                          AREA ||i.LTDC_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  LTDC_ClearITPendingBit PROC
;;;1085     */
;;;1086   void LTDC_ClearITPendingBit(uint32_t LTDC_IT)
000000  4901              LDR      r1,|L5.8|
;;;1087   {
;;;1088     /* Check the parameters */
;;;1089     assert_param(IS_LTDC_IT(LTDC_IT));
;;;1090   
;;;1091     /* Clear the corresponding LTDC Interrupt */
;;;1092     LTDC->ICR = (uint32_t)LTDC_IT;
000002  6008              STR      r0,[r1,#0]
;;;1093   }
000004  4770              BX       lr
;;;1094   /**
                          ENDP

000006  0000              DCW      0x0000
                  |L5.8|
                          DCD      0x4001683c

                          AREA ||i.LTDC_Cmd||, CODE, READONLY, ALIGN=2

                  LTDC_Cmd PROC
;;;237    
;;;238    void LTDC_Cmd(FunctionalState NewState)
000000  b130              CBZ      r0,|L6.16|
;;;239    {
;;;240      /* Check the parameters */
;;;241      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;242    
;;;243      if (NewState != DISABLE)
;;;244      {
;;;245        /* Enable LTDC by setting LTDCEN bit */
;;;246        LTDC->GCR |= (uint32_t)LTDC_GCR_LTDCEN;
000002  4907              LDR      r1,|L6.32|
000004  6809              LDR      r1,[r1,#0]
000006  f0410101          ORR      r1,r1,#1
00000a  4a05              LDR      r2,|L6.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L6.28|
                  |L6.16|
;;;247      }
;;;248      else
;;;249      {
;;;250        /* Disable LTDC by clearing LTDCEN bit */
;;;251        LTDC->GCR &= ~(uint32_t)LTDC_GCR_LTDCEN;
000010  4903              LDR      r1,|L6.32|
000012  6809              LDR      r1,[r1,#0]
000014  f0210101          BIC      r1,r1,#1
000018  4a01              LDR      r2,|L6.32|
00001a  6011              STR      r1,[r2,#0]
                  |L6.28|
;;;252      }
;;;253    }
00001c  4770              BX       lr
;;;254    
                          ENDP

00001e  0000              DCW      0x0000
                  |L6.32|
                          DCD      0x40016818

                          AREA ||i.LTDC_ColorKeyingConfig||, CODE, READONLY, ALIGN=2

                  LTDC_ColorKeyingConfig PROC
;;;573    
;;;574    void LTDC_ColorKeyingConfig(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct, FunctionalState NewState)
000000  b570              PUSH     {r4-r6,lr}
;;;575    { 
;;;576      uint32_t ckgreen = 0;
000002  2300              MOVS     r3,#0
;;;577      uint32_t ckred = 0;
000004  2400              MOVS     r4,#0
;;;578    
;;;579      /* Check the parameters */
;;;580      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;581      assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue));
;;;582      assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen));
;;;583      assert_param(IS_LTDC_CKEYING(LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed));
;;;584      
;;;585      if (NewState != DISABLE)
000006  b192              CBZ      r2,|L7.46|
;;;586      {
;;;587        /* Enable LTDC color keying by setting COLKEN bit */
;;;588        LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_COLKEN;
000008  6805              LDR      r5,[r0,#0]
00000a  f0450502          ORR      r5,r5,#2
00000e  6005              STR      r5,[r0,#0]
;;;589        
;;;590        /* Sets the color keying values */
;;;591        ckgreen = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen << 8);
000010  684d              LDR      r5,[r1,#4]
000012  022b              LSLS     r3,r5,#8
;;;592        ckred = (LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed << 16);
000014  890d              LDRH     r5,[r1,#8]
000016  042c              LSLS     r4,r5,#16
;;;593        LTDC_Layerx->CKCR  &= ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
000018  68c5              LDR      r5,[r0,#0xc]
00001a  f005457f          AND      r5,r5,#0xff000000
00001e  60c5              STR      r5,[r0,#0xc]
;;;594        LTDC_Layerx->CKCR |= (LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue | ckgreen | ckred);
000020  68c6              LDR      r6,[r0,#0xc]
000022  680d              LDR      r5,[r1,#0]
000024  431d              ORRS     r5,r5,r3
000026  4325              ORRS     r5,r5,r4
000028  432e              ORRS     r6,r6,r5
00002a  60c6              STR      r6,[r0,#0xc]
00002c  e003              B        |L7.54|
                  |L7.46|
;;;595      }
;;;596      else
;;;597      {
;;;598        /* Disable LTDC color keying by clearing COLKEN bit */
;;;599        LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_COLKEN;
00002e  6805              LDR      r5,[r0,#0]
000030  f0250502          BIC      r5,r5,#2
000034  6005              STR      r5,[r0,#0]
                  |L7.54|
;;;600      }
;;;601      
;;;602      /* Reload shadow register */
;;;603      LTDC->SRCR = LTDC_IMReload;
000036  2501              MOVS     r5,#1
000038  4e01              LDR      r6,|L7.64|
00003a  6035              STR      r5,[r6,#0]
;;;604    }
00003c  bd70              POP      {r4-r6,pc}
;;;605    
                          ENDP

00003e  0000              DCW      0x0000
                  |L7.64|
                          DCD      0x40016824

                          AREA ||i.LTDC_ColorKeyingStructInit||, CODE, READONLY, ALIGN=1

                  LTDC_ColorKeyingStructInit PROC
;;;612    
;;;613    void LTDC_ColorKeyingStructInit(LTDC_ColorKeying_InitTypeDef* LTDC_colorkeying_InitStruct)
000000  2100              MOVS     r1,#0
;;;614    {
;;;615      /*!< Initialize the color keying values */
;;;616      LTDC_colorkeying_InitStruct->LTDC_ColorKeyBlue = 0x00;
000002  6001              STR      r1,[r0,#0]
;;;617      LTDC_colorkeying_InitStruct->LTDC_ColorKeyGreen = 0x00;
000004  6041              STR      r1,[r0,#4]
;;;618      LTDC_colorkeying_InitStruct->LTDC_ColorKeyRed = 0x00;
000006  6081              STR      r1,[r0,#8]
;;;619    }
000008  4770              BX       lr
;;;620    
                          ENDP


                          AREA ||i.LTDC_DeInit||, CODE, READONLY, ALIGN=1

                  LTDC_DeInit PROC
;;;128    
;;;129    void LTDC_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;130    {
;;;131      /* Enable LTDC reset state */
;;;132      RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, ENABLE);
000002  2101              MOVS     r1,#1
000004  0688              LSLS     r0,r1,#26
000006  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;133      /* Release LTDC from reset state */
;;;134      RCC_APB2PeriphResetCmd(RCC_APB2Periph_LTDC, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  f04f6080          MOV      r0,#0x4000000
000010  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;135    }
000014  bd10              POP      {r4,pc}
;;;136    
                          ENDP


                          AREA ||i.LTDC_DitherCmd||, CODE, READONLY, ALIGN=2

                  LTDC_DitherCmd PROC
;;;261    
;;;262    void LTDC_DitherCmd(FunctionalState NewState)
000000  b130              CBZ      r0,|L10.16|
;;;263    {
;;;264      /* Check the parameters */
;;;265      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;266    
;;;267      if (NewState != DISABLE)
;;;268      {
;;;269        /* Enable Dither by setting DTEN bit */
;;;270        LTDC->GCR |= (uint32_t)LTDC_GCR_DTEN;
000002  4907              LDR      r1,|L10.32|
000004  6809              LDR      r1,[r1,#0]
000006  f4413180          ORR      r1,r1,#0x10000
00000a  4a05              LDR      r2,|L10.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L10.28|
                  |L10.16|
;;;271      }
;;;272      else
;;;273      {
;;;274        /* Disable Dither by clearing DTEN bit */
;;;275        LTDC->GCR &= ~(uint32_t)LTDC_GCR_DTEN;
000010  4903              LDR      r1,|L10.32|
000012  6809              LDR      r1,[r1,#0]
000014  f4213180          BIC      r1,r1,#0x10000
000018  4a01              LDR      r2,|L10.32|
00001a  6011              STR      r1,[r2,#0]
                  |L10.28|
;;;276      }
;;;277    }
00001c  4770              BX       lr
;;;278    
                          ENDP

00001e  0000              DCW      0x0000
                  |L10.32|
                          DCD      0x40016818

                          AREA ||i.LTDC_GetCDStatus||, CODE, READONLY, ALIGN=2

                  LTDC_GetCDStatus PROC
;;;546    
;;;547    FlagStatus LTDC_GetCDStatus(uint32_t LTDC_CD)
000000  4601              MOV      r1,r0
;;;548    {
;;;549      FlagStatus bitstatus;
;;;550    
;;;551      /* Check the parameters */
;;;552      assert_param(IS_LTDC_GET_CD(LTDC_CD));
;;;553    
;;;554      if ((LTDC->CDSR & LTDC_CD) != (uint32_t)RESET)
000002  4a04              LDR      r2,|L11.20|
000004  6812              LDR      r2,[r2,#0]
000006  400a              ANDS     r2,r2,r1
000008  b10a              CBZ      r2,|L11.14|
;;;555      {
;;;556        bitstatus = SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L11.16|
                  |L11.14|
;;;557      }
;;;558      else
;;;559      {
;;;560        bitstatus = RESET;
00000e  2000              MOVS     r0,#0
                  |L11.16|
;;;561      }
;;;562      return bitstatus;
;;;563    }
000010  4770              BX       lr
;;;564    
                          ENDP

000012  0000              DCW      0x0000
                  |L11.20|
                          DCD      0x40016848

                          AREA ||i.LTDC_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  LTDC_GetFlagStatus PROC
;;;1000     */
;;;1001   FlagStatus LTDC_GetFlagStatus(uint32_t LTDC_FLAG)
000000  4601              MOV      r1,r0
;;;1002   {
;;;1003     FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1004   
;;;1005     /* Check the parameters */
;;;1006     assert_param(IS_LTDC_FLAG(LTDC_FLAG));
;;;1007   
;;;1008     if ((LTDC->ISR & LTDC_FLAG) != (uint32_t)RESET)
000004  4a03              LDR      r2,|L12.20|
000006  6812              LDR      r2,[r2,#0]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L12.16|
;;;1009     {
;;;1010       bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L12.18|
                  |L12.16|
;;;1011     }
;;;1012     else
;;;1013     {
;;;1014       bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L12.18|
;;;1015     }
;;;1016     return bitstatus;
;;;1017   }
000012  4770              BX       lr
;;;1018   
                          ENDP

                  |L12.20|
                          DCD      0x40016838

                          AREA ||i.LTDC_GetITStatus||, CODE, READONLY, ALIGN=2

                  LTDC_GetITStatus PROC
;;;1047     */
;;;1048   ITStatus LTDC_GetITStatus(uint32_t LTDC_IT)
000000  4601              MOV      r1,r0
;;;1049   {
;;;1050     ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1051   
;;;1052     /* Check the parameters */
;;;1053     assert_param(IS_LTDC_IT(LTDC_IT));
;;;1054   
;;;1055     if ((LTDC->ISR & LTDC_IT) != (uint32_t)RESET)
000004  4a08              LDR      r2,|L13.40|
000006  6812              LDR      r2,[r2,#0]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L13.16|
;;;1056     {
;;;1057       bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L13.18|
                  |L13.16|
;;;1058     }
;;;1059     else
;;;1060     {
;;;1061       bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L13.18|
;;;1062     }
;;;1063   
;;;1064     if (((LTDC->IER & LTDC_IT) != (uint32_t)RESET) && (bitstatus != (uint32_t)RESET))
000012  4a05              LDR      r2,|L13.40|
000014  1f12              SUBS     r2,r2,#4
000016  6812              LDR      r2,[r2,#0]
000018  400a              ANDS     r2,r2,r1
00001a  b112              CBZ      r2,|L13.34|
00001c  b108              CBZ      r0,|L13.34|
;;;1065     {
;;;1066       bitstatus = SET;
00001e  2001              MOVS     r0,#1
000020  e000              B        |L13.36|
                  |L13.34|
;;;1067     }
;;;1068     else
;;;1069     {
;;;1070       bitstatus = RESET;
000022  2000              MOVS     r0,#0
                  |L13.36|
;;;1071     }
;;;1072     return bitstatus;
;;;1073   }
000024  4770              BX       lr
;;;1074   
                          ENDP

000026  0000              DCW      0x0000
                  |L13.40|
                          DCD      0x40016838

                          AREA ||i.LTDC_GetPosStatus||, CODE, READONLY, ALIGN=2

                  LTDC_GetPosStatus PROC
;;;510    
;;;511    LTDC_PosTypeDef LTDC_GetPosStatus(void)
000000  b50c              PUSH     {r2,r3,lr}
;;;512    {
;;;513      LTDC_PosTypeDef LTDC_Pos_InitStruct;
;;;514    
;;;515      LTDC->CPSR &= ~(LTDC_CPSR_CYPOS | LTDC_CPSR_CXPOS);
000002  4909              LDR      r1,|L14.40|
000004  6809              LDR      r1,[r1,#0]
000006  2100              MOVS     r1,#0
000008  4a07              LDR      r2,|L14.40|
00000a  6011              STR      r1,[r2,#0]
;;;516    
;;;517      LTDC_Pos_InitStruct.LTDC_POSX = (uint32_t)(LTDC->CPSR >> 16);
00000c  4611              MOV      r1,r2
00000e  6809              LDR      r1,[r1,#0]
000010  0c09              LSRS     r1,r1,#16
000012  9100              STR      r1,[sp,#0]
;;;518      LTDC_Pos_InitStruct.LTDC_POSY = (uint32_t)(LTDC->CPSR & 0xFFFF);
000014  4611              MOV      r1,r2
000016  6809              LDR      r1,[r1,#0]
000018  b289              UXTH     r1,r1
00001a  9101              STR      r1,[sp,#4]
;;;519    
;;;520      return LTDC_Pos_InitStruct;
00001c  e9dd1200          LDRD     r1,r2,[sp,#0]
000020  e9c01200          STRD     r1,r2,[r0,#0]
;;;521    }
000024  bd0c              POP      {r2,r3,pc}
;;;522    
                          ENDP

000026  0000              DCW      0x0000
                  |L14.40|
                          DCD      0x40016844

                          AREA ||i.LTDC_GetRGBWidth||, CODE, READONLY, ALIGN=2

                  LTDC_GetRGBWidth PROC
;;;285    
;;;286    LTDC_RGBTypeDef LTDC_GetRGBWidth(void)
000000  b50e              PUSH     {r1-r3,lr}
;;;287    {
;;;288      LTDC_RGBTypeDef LTDC_RGB_InitStruct;
;;;289    
;;;290      LTDC->GCR &= (uint32_t)GCR_MASK;
000002  490d              LDR      r1,|L15.56|
000004  6809              LDR      r1,[r1,#0]
000006  4a0d              LDR      r2,|L15.60|
000008  4011              ANDS     r1,r1,r2
00000a  4a0b              LDR      r2,|L15.56|
00000c  6011              STR      r1,[r2,#0]
;;;291    
;;;292      LTDC_RGB_InitStruct.LTDC_BlueWidth = (uint32_t)((LTDC->GCR >> 4) & 0x7);
00000e  4611              MOV      r1,r2
000010  6809              LDR      r1,[r1,#0]
000012  f3c11102          UBFX     r1,r1,#4,#3
000016  9100              STR      r1,[sp,#0]
;;;293      LTDC_RGB_InitStruct.LTDC_GreenWidth = (uint32_t)((LTDC->GCR >> 8) & 0x7);
000018  4611              MOV      r1,r2
00001a  6809              LDR      r1,[r1,#0]
00001c  f3c12102          UBFX     r1,r1,#8,#3
000020  9101              STR      r1,[sp,#4]
;;;294      LTDC_RGB_InitStruct.LTDC_RedWidth = (uint32_t)((LTDC->GCR >> 12) & 0x7);
000022  4611              MOV      r1,r2
000024  6809              LDR      r1,[r1,#0]
000026  f3c13102          UBFX     r1,r1,#12,#3
00002a  9102              STR      r1,[sp,#8]
;;;295    
;;;296      return LTDC_RGB_InitStruct;
00002c  e89d000e          LDM      sp,{r1-r3}
000030  e880000e          STM      r0,{r1-r3}
;;;297    }
000034  bd0e              POP      {r1-r3,pc}
;;;298    
                          ENDP

000036  0000              DCW      0x0000
                  |L15.56|
                          DCD      0x40016818
                  |L15.60|
                          DCD      0x0ffe888f

                          AREA ||i.LTDC_ITConfig||, CODE, READONLY, ALIGN=2

                  LTDC_ITConfig PROC
;;;974      */
;;;975    void LTDC_ITConfig(uint32_t LTDC_IT, FunctionalState NewState)
000000  b129              CBZ      r1,|L16.14|
;;;976    {
;;;977      /* Check the parameters */
;;;978      assert_param(IS_LTDC_IT(LTDC_IT));
;;;979      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;980    
;;;981      if (NewState != DISABLE)
;;;982      {
;;;983        LTDC->IER |= LTDC_IT;
000002  4a06              LDR      r2,|L16.28|
000004  6812              LDR      r2,[r2,#0]
000006  4302              ORRS     r2,r2,r0
000008  4b04              LDR      r3,|L16.28|
00000a  601a              STR      r2,[r3,#0]
00000c  e004              B        |L16.24|
                  |L16.14|
;;;984      }
;;;985      else
;;;986      {
;;;987        LTDC->IER &= (uint32_t)~LTDC_IT;
00000e  4a03              LDR      r2,|L16.28|
000010  6812              LDR      r2,[r2,#0]
000012  4382              BICS     r2,r2,r0
000014  4b01              LDR      r3,|L16.28|
000016  601a              STR      r2,[r3,#0]
                  |L16.24|
;;;988      }
;;;989    }
000018  4770              BX       lr
;;;990    
                          ENDP

00001a  0000              DCW      0x0000
                  |L16.28|
                          DCD      0x40016834

                          AREA ||i.LTDC_Init||, CODE, READONLY, ALIGN=2

                  LTDC_Init PROC
;;;145    
;;;146    void LTDC_Init(LTDC_InitTypeDef* LTDC_InitStruct)
000000  b5f0              PUSH     {r4-r7,lr}
;;;147    {
;;;148      uint32_t horizontalsync = 0;
000002  2100              MOVS     r1,#0
;;;149      uint32_t accumulatedHBP = 0;
000004  2200              MOVS     r2,#0
;;;150      uint32_t accumulatedactiveW = 0;
000006  2300              MOVS     r3,#0
;;;151      uint32_t totalwidth = 0;
000008  2400              MOVS     r4,#0
;;;152      uint32_t backgreen = 0;
00000a  2500              MOVS     r5,#0
;;;153      uint32_t backred = 0;
00000c  2600              MOVS     r6,#0
;;;154    
;;;155      /* Check function parameters */
;;;156      assert_param(IS_LTDC_HSYNC(LTDC_InitStruct->LTDC_HorizontalSync));
;;;157      assert_param(IS_LTDC_VSYNC(LTDC_InitStruct->LTDC_VerticalSync));
;;;158      assert_param(IS_LTDC_AHBP(LTDC_InitStruct->LTDC_AccumulatedHBP));
;;;159      assert_param(IS_LTDC_AVBP(LTDC_InitStruct->LTDC_AccumulatedVBP));
;;;160      assert_param(IS_LTDC_AAH(LTDC_InitStruct->LTDC_AccumulatedActiveH));
;;;161      assert_param(IS_LTDC_AAW(LTDC_InitStruct->LTDC_AccumulatedActiveW));
;;;162      assert_param(IS_LTDC_TOTALH(LTDC_InitStruct->LTDC_TotalHeigh));
;;;163      assert_param(IS_LTDC_TOTALW(LTDC_InitStruct->LTDC_TotalWidth));
;;;164      assert_param(IS_LTDC_HSPOL(LTDC_InitStruct->LTDC_HSPolarity));
;;;165      assert_param(IS_LTDC_VSPOL(LTDC_InitStruct->LTDC_VSPolarity));
;;;166      assert_param(IS_LTDC_DEPOL(LTDC_InitStruct->LTDC_DEPolarity));
;;;167      assert_param(IS_LTDC_PCPOL(LTDC_InitStruct->LTDC_PCPolarity));
;;;168      assert_param(IS_LTDC_BackBlueValue(LTDC_InitStruct->LTDC_BackgroundBlueValue));
;;;169      assert_param(IS_LTDC_BackGreenValue(LTDC_InitStruct->LTDC_BackgroundGreenValue));
;;;170      assert_param(IS_LTDC_BackRedValue(LTDC_InitStruct->LTDC_BackgroundRedValue));
;;;171    
;;;172      /* Sets Synchronization size */
;;;173      LTDC->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
00000e  4f5b              LDR      r7,|L17.380|
000010  683f              LDR      r7,[r7,#0]
000012  f8dfc16c          LDR      r12,|L17.384|
000016  ea07070c          AND      r7,r7,r12
00001a  f8dfc160          LDR      r12,|L17.380|
00001e  f8cc7000          STR      r7,[r12,#0]
;;;174      horizontalsync = (LTDC_InitStruct->LTDC_HorizontalSync << 16);
000022  8a07              LDRH     r7,[r0,#0x10]
000024  0439              LSLS     r1,r7,#16
;;;175      LTDC->SSCR |= (horizontalsync | LTDC_InitStruct->LTDC_VerticalSync);
000026  4667              MOV      r7,r12
000028  683f              LDR      r7,[r7,#0]
00002a  f8d0c014          LDR      r12,[r0,#0x14]
00002e  ea4c0c01          ORR      r12,r12,r1
000032  ea47070c          ORR      r7,r7,r12
000036  f8dfc144          LDR      r12,|L17.380|
00003a  f8cc7000          STR      r7,[r12,#0]
;;;176    
;;;177      /* Sets Accumulated Back porch */
;;;178      LTDC->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
00003e  f10c0704          ADD      r7,r12,#4
000042  683f              LDR      r7,[r7,#0]
000044  f8dfc138          LDR      r12,|L17.384|
000048  ea07070c          AND      r7,r7,r12
00004c  f8dfc12c          LDR      r12,|L17.380|
000050  f10c0c04          ADD      r12,r12,#4
000054  f8cc7000          STR      r7,[r12,#0]
;;;179      accumulatedHBP = (LTDC_InitStruct->LTDC_AccumulatedHBP << 16);
000058  8b07              LDRH     r7,[r0,#0x18]
00005a  043a              LSLS     r2,r7,#16
;;;180      LTDC->BPCR |= (accumulatedHBP | LTDC_InitStruct->LTDC_AccumulatedVBP);
00005c  4667              MOV      r7,r12
00005e  683f              LDR      r7,[r7,#0]
000060  f8d0c01c          LDR      r12,[r0,#0x1c]
000064  ea4c0c02          ORR      r12,r12,r2
000068  ea47070c          ORR      r7,r7,r12
00006c  f8dfc10c          LDR      r12,|L17.380|
000070  f10c0c04          ADD      r12,r12,#4
000074  f8cc7000          STR      r7,[r12,#0]
;;;181    
;;;182      /* Sets Accumulated Active Width */
;;;183      LTDC->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
000078  f10c0704          ADD      r7,r12,#4
00007c  683f              LDR      r7,[r7,#0]
00007e  f8dfc100          LDR      r12,|L17.384|
000082  ea07070c          AND      r7,r7,r12
000086  f8dfc0f4          LDR      r12,|L17.380|
00008a  f10c0c08          ADD      r12,r12,#8
00008e  f8cc7000          STR      r7,[r12,#0]
;;;184      accumulatedactiveW = (LTDC_InitStruct->LTDC_AccumulatedActiveW << 16);
000092  8c07              LDRH     r7,[r0,#0x20]
000094  043b              LSLS     r3,r7,#16
;;;185      LTDC->AWCR |= (accumulatedactiveW | LTDC_InitStruct->LTDC_AccumulatedActiveH);
000096  4667              MOV      r7,r12
000098  683f              LDR      r7,[r7,#0]
00009a  f8d0c024          LDR      r12,[r0,#0x24]
00009e  ea4c0c03          ORR      r12,r12,r3
0000a2  ea47070c          ORR      r7,r7,r12
0000a6  f8dfc0d4          LDR      r12,|L17.380|
0000aa  f10c0c08          ADD      r12,r12,#8
0000ae  f8cc7000          STR      r7,[r12,#0]
;;;186    
;;;187      /* Sets Total Width */
;;;188      LTDC->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
0000b2  f10c0704          ADD      r7,r12,#4
0000b6  683f              LDR      r7,[r7,#0]
0000b8  f8dfc0c4          LDR      r12,|L17.384|
0000bc  ea07070c          AND      r7,r7,r12
0000c0  f8dfc0b8          LDR      r12,|L17.380|
0000c4  f10c0c0c          ADD      r12,r12,#0xc
0000c8  f8cc7000          STR      r7,[r12,#0]
;;;189      totalwidth = (LTDC_InitStruct->LTDC_TotalWidth << 16);
0000cc  8d07              LDRH     r7,[r0,#0x28]
0000ce  043c              LSLS     r4,r7,#16
;;;190      LTDC->TWCR |= (totalwidth | LTDC_InitStruct->LTDC_TotalHeigh);
0000d0  4667              MOV      r7,r12
0000d2  f8d7c000          LDR      r12,[r7,#0]
0000d6  6ac7              LDR      r7,[r0,#0x2c]
0000d8  4327              ORRS     r7,r7,r4
0000da  ea4c0c07          ORR      r12,r12,r7
0000de  4f27              LDR      r7,|L17.380|
0000e0  370c              ADDS     r7,r7,#0xc
0000e2  f8c7c000          STR      r12,[r7,#0]
;;;191    
;;;192      LTDC->GCR &= (uint32_t)GCR_MASK;
0000e6  1d3f              ADDS     r7,r7,#4
0000e8  683f              LDR      r7,[r7,#0]
0000ea  f8dfc098          LDR      r12,|L17.388|
0000ee  ea07070c          AND      r7,r7,r12
0000f2  f8dfc088          LDR      r12,|L17.380|
0000f6  f10c0c10          ADD      r12,r12,#0x10
0000fa  f8cc7000          STR      r7,[r12,#0]
;;;193      LTDC->GCR |=  (uint32_t)(LTDC_InitStruct->LTDC_HSPolarity | LTDC_InitStruct->LTDC_VSPolarity | \
0000fe  e9d07c00          LDRD     r7,r12,[r0,#0]
000102  ea47070c          ORR      r7,r7,r12
000106  f8d0c008          LDR      r12,[r0,#8]
00010a  ea47070c          ORR      r7,r7,r12
00010e  f8d0c00c          LDR      r12,[r0,#0xc]
000112  ea47070c          ORR      r7,r7,r12
000116  f8dfc064          LDR      r12,|L17.380|
00011a  f10c0c10          ADD      r12,r12,#0x10
00011e  f8dcc000          LDR      r12,[r12,#0]
000122  ea47070c          ORR      r7,r7,r12
000126  f8dfc054          LDR      r12,|L17.380|
00012a  f10c0c10          ADD      r12,r12,#0x10
00012e  f8cc7000          STR      r7,[r12,#0]
;;;194                               LTDC_InitStruct->LTDC_DEPolarity | LTDC_InitStruct->LTDC_PCPolarity);
;;;195    
;;;196      /* sets the background color value */
;;;197      backgreen = (LTDC_InitStruct->LTDC_BackgroundGreenValue << 8);
000132  6b47              LDR      r7,[r0,#0x34]
000134  023d              LSLS     r5,r7,#8
;;;198      backred = (LTDC_InitStruct->LTDC_BackgroundRedValue << 16);
000136  8e07              LDRH     r7,[r0,#0x30]
000138  043e              LSLS     r6,r7,#16
;;;199    
;;;200      LTDC->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
00013a  4f10              LDR      r7,|L17.380|
00013c  3724              ADDS     r7,r7,#0x24
00013e  683f              LDR      r7,[r7,#0]
000140  f007477f          AND      r7,r7,#0xff000000
000144  f8dfc034          LDR      r12,|L17.380|
000148  f10c0c24          ADD      r12,r12,#0x24
00014c  f8cc7000          STR      r7,[r12,#0]
;;;201      LTDC->BCCR |= (backred | backgreen | LTDC_InitStruct->LTDC_BackgroundBlueValue);
000150  ea460705          ORR      r7,r6,r5
000154  f8d0c038          LDR      r12,[r0,#0x38]
000158  ea47070c          ORR      r7,r7,r12
00015c  f8dfc01c          LDR      r12,|L17.380|
000160  f10c0c24          ADD      r12,r12,#0x24
000164  f8dcc000          LDR      r12,[r12,#0]
000168  ea47070c          ORR      r7,r7,r12
00016c  f8dfc00c          LDR      r12,|L17.380|
000170  f10c0c24          ADD      r12,r12,#0x24
000174  f8cc7000          STR      r7,[r12,#0]
;;;202    }
000178  bdf0              POP      {r4-r7,pc}
;;;203    
                          ENDP

00017a  0000              DCW      0x0000
                  |L17.380|
                          DCD      0x40016808
                  |L17.384|
                          DCD      0xf000f800
                  |L17.388|
                          DCD      0x0ffe888f

                          AREA ||i.LTDC_LIPConfig||, CODE, READONLY, ALIGN=2

                  LTDC_LIPConfig PROC
;;;319    
;;;320    void LTDC_LIPConfig(uint32_t LTDC_LIPositionConfig)
000000  4901              LDR      r1,|L18.8|
;;;321    {
;;;322      /* Check the parameters */
;;;323      assert_param(IS_LTDC_LIPOS(LTDC_LIPositionConfig));
;;;324    
;;;325      /* Sets the Line Interrupt position */
;;;326      LTDC->LIPCR = (uint32_t)LTDC_LIPositionConfig;
000002  6008              STR      r0,[r1,#0]
;;;327    }
000004  4770              BX       lr
;;;328    
                          ENDP

000006  0000              DCW      0x0000
                  |L18.8|
                          DCD      0x40016840

                          AREA ||i.LTDC_LayerAddress||, CODE, READONLY, ALIGN=1

                  LTDC_LayerAddress PROC
;;;782    
;;;783    void LTDC_LayerAddress(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Address)
000000  6281              STR      r1,[r0,#0x28]
;;;784    {
;;;785      /* Reconfigures the color frame buffer start address */
;;;786      LTDC_Layerx->CFBAR = Address;
;;;787    }
000002  4770              BX       lr
;;;788      
                          ENDP


                          AREA ||i.LTDC_LayerAlpha||, CODE, READONLY, ALIGN=1

                  LTDC_LayerAlpha PROC
;;;767    
;;;768    void LTDC_LayerAlpha(LTDC_Layer_TypeDef* LTDC_Layerx, uint8_t ConstantAlpha)
000000  6141              STR      r1,[r0,#0x14]
;;;769    {  
;;;770      /* reconfigure the constant alpha value */      
;;;771      LTDC_Layerx->CACR = ConstantAlpha;
;;;772    }
000002  4770              BX       lr
;;;773    
                          ENDP


                          AREA ||i.LTDC_LayerCmd||, CODE, READONLY, ALIGN=1

                  LTDC_LayerCmd PROC
;;;485    
;;;486    void LTDC_LayerCmd(LTDC_Layer_TypeDef* LTDC_Layerx, FunctionalState NewState)
000000  b121              CBZ      r1,|L21.12|
;;;487    {
;;;488      /* Check the parameters */
;;;489      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;490    
;;;491      if (NewState != DISABLE)
;;;492      {
;;;493        /* Enable LTDC_Layer by setting LEN bit */
;;;494        LTDC_Layerx->CR |= (uint32_t)LTDC_LxCR_LEN;
000002  6802              LDR      r2,[r0,#0]
000004  f0420201          ORR      r2,r2,#1
000008  6002              STR      r2,[r0,#0]
00000a  e003              B        |L21.20|
                  |L21.12|
;;;495      }
;;;496      else
;;;497      {
;;;498        /* Disable LTDC_Layer by clearing LEN bit */
;;;499        LTDC_Layerx->CR &= ~(uint32_t)LTDC_LxCR_LEN;
00000c  6802              LDR      r2,[r0,#0]
00000e  f0220201          BIC      r2,r2,#1
000012  6002              STR      r2,[r0,#0]
                  |L21.20|
;;;500      }
;;;501    }
000014  4770              BX       lr
;;;502    
                          ENDP


                          AREA ||i.LTDC_LayerInit||, CODE, READONLY, ALIGN=1

                  LTDC_LayerInit PROC
;;;358    
;;;359    void LTDC_LayerInit(LTDC_Layer_TypeDef* LTDC_Layerx, LTDC_Layer_InitTypeDef* LTDC_Layer_InitStruct)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;360    {
;;;361    
;;;362      uint32_t whsppos = 0;
000004  2400              MOVS     r4,#0
;;;363      uint32_t wvsppos = 0;
000006  2500              MOVS     r5,#0
;;;364      uint32_t dcgreen = 0;
000008  2600              MOVS     r6,#0
;;;365      uint32_t dcred = 0;
00000a  2200              MOVS     r2,#0
;;;366      uint32_t dcalpha = 0;
00000c  2700              MOVS     r7,#0
;;;367      uint32_t cfbp = 0;
00000e  2300              MOVS     r3,#0
;;;368    
;;;369    /* Check the parameters */
;;;370      assert_param(IS_LTDC_Pixelformat(LTDC_Layer_InitStruct->LTDC_PixelFormat));
;;;371      assert_param(IS_LTDC_BlendingFactor1(LTDC_Layer_InitStruct->LTDC_BlendingFactor_1));
;;;372      assert_param(IS_LTDC_BlendingFactor2(LTDC_Layer_InitStruct->LTDC_BlendingFactor_2));
;;;373      assert_param(IS_LTDC_HCONFIGST(LTDC_Layer_InitStruct->LTDC_HorizontalStart));
;;;374      assert_param(IS_LTDC_HCONFIGSP(LTDC_Layer_InitStruct->LTDC_HorizontalStop));
;;;375      assert_param(IS_LTDC_VCONFIGST(LTDC_Layer_InitStruct->LTDC_VerticalStart));
;;;376      assert_param(IS_LTDC_VCONFIGSP(LTDC_Layer_InitStruct->LTDC_VerticalStop));  
;;;377      assert_param(IS_LTDC_DEFAULTCOLOR(LTDC_Layer_InitStruct->LTDC_DefaultColorBlue));
;;;378      assert_param(IS_LTDC_DEFAULTCOLOR(LTDC_Layer_InitStruct->LTDC_DefaultColorGreen));
;;;379      assert_param(IS_LTDC_DEFAULTCOLOR(LTDC_Layer_InitStruct->LTDC_DefaultColorRed));
;;;380      assert_param(IS_LTDC_DEFAULTCOLOR(LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha));
;;;381      assert_param(IS_LTDC_CFBP(LTDC_Layer_InitStruct->LTDC_CFBPitch));
;;;382      assert_param(IS_LTDC_CFBLL(LTDC_Layer_InitStruct->LTDC_CFBLineLength));
;;;383      assert_param(IS_LTDC_CFBLNBR(LTDC_Layer_InitStruct->LTDC_CFBLineNumber));
;;;384    
;;;385      /* Configures the horizontal start and stop position */
;;;386      whsppos = LTDC_Layer_InitStruct->LTDC_HorizontalStop << 16;
000010  f8b1c004          LDRH     r12,[r1,#4]
000014  ea4f440c          LSL      r4,r12,#16
;;;387      LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
000018  f8d0c004          LDR      r12,[r0,#4]
00001c  f40c4c70          AND      r12,r12,#0xf000
000020  f8c0c004          STR      r12,[r0,#4]
;;;388      LTDC_Layerx->WHPCR = (LTDC_Layer_InitStruct->LTDC_HorizontalStart | whsppos);
000024  f8d1c000          LDR      r12,[r1,#0]
000028  ea4c0c04          ORR      r12,r12,r4
00002c  f8c0c004          STR      r12,[r0,#4]
;;;389    
;;;390      /* Configures the vertical start and stop position */
;;;391      wvsppos = LTDC_Layer_InitStruct->LTDC_VerticalStop << 16;
000030  f8b1c00c          LDRH     r12,[r1,#0xc]
000034  ea4f450c          LSL      r5,r12,#16
;;;392      LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
000038  f8d0c008          LDR      r12,[r0,#8]
00003c  f40c4c70          AND      r12,r12,#0xf000
000040  f8c0c008          STR      r12,[r0,#8]
;;;393      LTDC_Layerx->WVPCR  = (LTDC_Layer_InitStruct->LTDC_VerticalStart | wvsppos);
000044  f8d1c008          LDR      r12,[r1,#8]
000048  ea4c0c05          ORR      r12,r12,r5
00004c  f8c0c008          STR      r12,[r0,#8]
;;;394    
;;;395      /* Specifies the pixel format */
;;;396      LTDC_Layerx->PFCR &= ~(LTDC_LxPFCR_PF);
000050  f8d0c010          LDR      r12,[r0,#0x10]
000054  f02c0c07          BIC      r12,r12,#7
000058  f8c0c010          STR      r12,[r0,#0x10]
;;;397      LTDC_Layerx->PFCR = (LTDC_Layer_InitStruct->LTDC_PixelFormat);
00005c  f8d1c010          LDR      r12,[r1,#0x10]
000060  f8c0c010          STR      r12,[r0,#0x10]
;;;398    
;;;399      /* Configures the default color values */
;;;400      dcgreen = (LTDC_Layer_InitStruct->LTDC_DefaultColorGreen << 8);
000064  f8d1c01c          LDR      r12,[r1,#0x1c]
000068  ea4f260c          LSL      r6,r12,#8
;;;401      dcred = (LTDC_Layer_InitStruct->LTDC_DefaultColorRed << 16);
00006c  f8b1c020          LDRH     r12,[r1,#0x20]
000070  ea4f420c          LSL      r2,r12,#16
;;;402      dcalpha = (LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha << 24);
000074  f891c024          LDRB     r12,[r1,#0x24]
000078  ea4f670c          LSL      r7,r12,#24
;;;403      LTDC_Layerx->DCCR &=  ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
00007c  f8d0c018          LDR      r12,[r0,#0x18]
000080  469c              MOV      r12,r3
000082  f8c0c018          STR      r12,[r0,#0x18]
;;;404      LTDC_Layerx->DCCR = (LTDC_Layer_InitStruct->LTDC_DefaultColorBlue | dcgreen | \
000086  f8d1c018          LDR      r12,[r1,#0x18]
00008a  ea4c0c06          ORR      r12,r12,r6
00008e  ea4c0c02          ORR      r12,r12,r2
000092  ea4c0c07          ORR      r12,r12,r7
000096  f8c0c018          STR      r12,[r0,#0x18]
;;;405                            dcred | dcalpha);
;;;406    
;;;407      /* Specifies the constant alpha value */      
;;;408      LTDC_Layerx->CACR &= ~(LTDC_LxCACR_CONSTA);
00009a  f8d0c014          LDR      r12,[r0,#0x14]
00009e  f02c0cff          BIC      r12,r12,#0xff
0000a2  f8c0c014          STR      r12,[r0,#0x14]
;;;409      LTDC_Layerx->CACR = (LTDC_Layer_InitStruct->LTDC_ConstantAlpha);
0000a6  f8d1c014          LDR      r12,[r1,#0x14]
0000aa  f8c0c014          STR      r12,[r0,#0x14]
;;;410    
;;;411      /* Specifies the blending factors */
;;;412      LTDC_Layerx->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
0000ae  f8d0c01c          LDR      r12,[r0,#0x1c]
0000b2  f2407807          MOV      r8,#0x707
0000b6  ea2c0c08          BIC      r12,r12,r8
0000ba  f8c0c01c          STR      r12,[r0,#0x1c]
;;;413      LTDC_Layerx->BFCR = (LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 | LTDC_Layer_InitStruct->LTDC_BlendingFactor_2);
0000be  e9d1c80a          LDRD     r12,r8,[r1,#0x28]
0000c2  ea4c0c08          ORR      r12,r12,r8
0000c6  f8c0c01c          STR      r12,[r0,#0x1c]
;;;414    
;;;415      /* Configures the color frame buffer start address */
;;;416      LTDC_Layerx->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
0000ca  f8d0c028          LDR      r12,[r0,#0x28]
0000ce  469c              MOV      r12,r3
0000d0  f8c0c028          STR      r12,[r0,#0x28]
;;;417      LTDC_Layerx->CFBAR = (LTDC_Layer_InitStruct->LTDC_CFBStartAdress);
0000d4  f8d1c030          LDR      r12,[r1,#0x30]
0000d8  f8c0c028          STR      r12,[r0,#0x28]
;;;418    
;;;419      /* Configures the color frame buffer pitch in byte */
;;;420      cfbp = (LTDC_Layer_InitStruct->LTDC_CFBPitch << 16);
0000dc  f8b1c038          LDRH     r12,[r1,#0x38]
0000e0  ea4f430c          LSL      r3,r12,#16
;;;421      LTDC_Layerx->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
0000e4  f8d0c02c          LDR      r12,[r0,#0x2c]
0000e8  f00c2ce0          AND      r12,r12,#0xe000e000
0000ec  f8c0c02c          STR      r12,[r0,#0x2c]
;;;422      LTDC_Layerx->CFBLR  = (LTDC_Layer_InitStruct->LTDC_CFBLineLength | cfbp);
0000f0  f8d1c034          LDR      r12,[r1,#0x34]
0000f4  ea4c0c03          ORR      r12,r12,r3
0000f8  f8c0c02c          STR      r12,[r0,#0x2c]
;;;423    
;;;424      /* Configures the frame buffer line number */
;;;425      LTDC_Layerx->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
0000fc  f8d0c030          LDR      r12,[r0,#0x30]
000100  f36f0c0a          BFC      r12,#0,#11
000104  f8c0c030          STR      r12,[r0,#0x30]
;;;426      LTDC_Layerx->CFBLNR  = (LTDC_Layer_InitStruct->LTDC_CFBLineNumber);
000108  f8d1c03c          LDR      r12,[r1,#0x3c]
00010c  f8c0c030          STR      r12,[r0,#0x30]
;;;427    
;;;428    }
000110  e8bd81f0          POP      {r4-r8,pc}
;;;429    
                          ENDP


                          AREA ||i.LTDC_LayerPixelFormat||, CODE, READONLY, ALIGN=1

                  LTDC_LayerPixelFormat PROC
;;;860    
;;;861    void LTDC_LayerPixelFormat(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t PixelFormat)
000000  b530              PUSH     {r4,r5,lr}
;;;862    {
000002  4603              MOV      r3,r0
;;;863    
;;;864      uint8_t temp;
;;;865      uint32_t tempreg;
;;;866      
;;;867      tempreg = LTDC_Layerx->PFCR;
000004  6918              LDR      r0,[r3,#0x10]
;;;868      
;;;869      if (tempreg == LTDC_Pixelformat_ARGB8888)
000006  b908              CBNZ     r0,|L23.12|
;;;870      {
;;;871        temp = 4;
000008  2204              MOVS     r2,#4
00000a  e00e              B        |L23.42|
                  |L23.12|
;;;872      }
;;;873      else if (tempreg == LTDC_Pixelformat_RGB888)
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L23.20|
;;;874      {
;;;875        temp = 3;
000010  2203              MOVS     r2,#3
000012  e00a              B        |L23.42|
                  |L23.20|
;;;876      }
;;;877      else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
000014  2804              CMP      r0,#4
000016  d005              BEQ      |L23.36|
;;;878              (tempreg == LTDC_Pixelformat_RGB565)    || \
000018  2802              CMP      r0,#2
00001a  d003              BEQ      |L23.36|
;;;879              (tempreg == LTDC_Pixelformat_ARGB1555)  || \
00001c  2803              CMP      r0,#3
00001e  d001              BEQ      |L23.36|
;;;880              (tempreg == LTDC_Pixelformat_AL88))  
000020  2807              CMP      r0,#7
000022  d101              BNE      |L23.40|
                  |L23.36|
;;;881      {
;;;882        temp = 2;  
000024  2202              MOVS     r2,#2
000026  e000              B        |L23.42|
                  |L23.40|
;;;883      }
;;;884      else
;;;885      {
;;;886        temp = 1;
000028  2201              MOVS     r2,#1
                  |L23.42|
;;;887      }
;;;888      
;;;889      tempreg = (LTDC_Layerx->CFBLR >> 16);
00002a  6adc              LDR      r4,[r3,#0x2c]
00002c  0c20              LSRS     r0,r4,#16
;;;890      tempreg = (tempreg / temp); 
00002e  fbb0f0f2          UDIV     r0,r0,r2
;;;891      
;;;892      if (PixelFormat == LTDC_Pixelformat_ARGB8888)
000032  b909              CBNZ     r1,|L23.56|
;;;893      {
;;;894        temp = 4;
000034  2204              MOVS     r2,#4
000036  e00e              B        |L23.86|
                  |L23.56|
;;;895      }
;;;896      else if (PixelFormat == LTDC_Pixelformat_RGB888)
000038  2901              CMP      r1,#1
00003a  d101              BNE      |L23.64|
;;;897      {
;;;898        temp = 3;
00003c  2203              MOVS     r2,#3
00003e  e00a              B        |L23.86|
                  |L23.64|
;;;899      }
;;;900      else if ((PixelFormat == LTDC_Pixelformat_ARGB4444) || \
000040  2904              CMP      r1,#4
000042  d005              BEQ      |L23.80|
;;;901              (PixelFormat == LTDC_Pixelformat_RGB565)    || \
000044  2902              CMP      r1,#2
000046  d003              BEQ      |L23.80|
;;;902              (PixelFormat == LTDC_Pixelformat_ARGB1555)  || \
000048  2903              CMP      r1,#3
00004a  d001              BEQ      |L23.80|
;;;903              (PixelFormat == LTDC_Pixelformat_AL88))
00004c  2907              CMP      r1,#7
00004e  d101              BNE      |L23.84|
                  |L23.80|
;;;904      {
;;;905        temp = 2;  
000050  2202              MOVS     r2,#2
000052  e000              B        |L23.86|
                  |L23.84|
;;;906      }
;;;907      else
;;;908      {
;;;909        temp = 1;
000054  2201              MOVS     r2,#1
                  |L23.86|
;;;910      }
;;;911      
;;;912      /* Reconfigures the color frame buffer pitch in byte */
;;;913      LTDC_Layerx->CFBLR  = ((tempreg * temp) << 16) | ((tempreg * temp) + 3);  
000056  fb00f402          MUL      r4,r0,r2
00005a  1ce4              ADDS     r4,r4,#3
00005c  fb00f502          MUL      r5,r0,r2
000060  ea444405          ORR      r4,r4,r5,LSL #16
000064  62dc              STR      r4,[r3,#0x2c]
;;;914    
;;;915      /* Reconfigures the color frame buffer start address */
;;;916      LTDC_Layerx->PFCR = PixelFormat;
000066  6119              STR      r1,[r3,#0x10]
;;;917        
;;;918    }
000068  bd30              POP      {r4,r5,pc}
;;;919        
                          ENDP


                          AREA ||i.LTDC_LayerPosition||, CODE, READONLY, ALIGN=2

                  LTDC_LayerPosition PROC
;;;706    
;;;707    void LTDC_LayerPosition(LTDC_Layer_TypeDef* LTDC_Layerx, uint16_t OffsetX, uint16_t OffsetY)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;708    {
000004  460b              MOV      r3,r1
000006  4614              MOV      r4,r2
;;;709      
;;;710      uint32_t tempreg, temp;
;;;711      uint32_t horizontal_start;
;;;712      uint32_t horizontal_stop;
;;;713      uint32_t vertical_start;
;;;714      uint32_t vertical_stop;
;;;715      
;;;716      LTDC_Layerx->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
000008  f8d08004          LDR      r8,[r0,#4]
00000c  f4084870          AND      r8,r8,#0xf000
000010  f8c08004          STR      r8,[r0,#4]
;;;717      LTDC_Layerx->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
000014  f8d08008          LDR      r8,[r0,#8]
000018  f4084870          AND      r8,r8,#0xf000
00001c  f8c08008          STR      r8,[r0,#8]
;;;718      
;;;719      /* Reconfigures the horizontal and vertical start position */
;;;720      tempreg = LTDC->BPCR;
000020  f8df8078          LDR      r8,|L24.156|
000024  f8d81000          LDR      r1,[r8,#0]
;;;721      horizontal_start = (tempreg >> 16) + 1 + OffsetX;
000028  f04f0801          MOV      r8,#1
00002c  eb084811          ADD      r8,r8,r1,LSR #16
000030  eb080503          ADD      r5,r8,r3
;;;722      vertical_start = (tempreg & 0xFFFF) + 1 + OffsetY;
000034  fa1ff881          UXTH     r8,r1
000038  f1080801          ADD      r8,r8,#1
00003c  eb080604          ADD      r6,r8,r4
;;;723      
;;;724      /* Reconfigures the horizontal and vertical stop position */
;;;725      /* Get the number of byte per pixel */
;;;726      
;;;727      tempreg = LTDC_Layerx->PFCR;
000040  6901              LDR      r1,[r0,#0x10]
;;;728      
;;;729      if (tempreg == LTDC_Pixelformat_ARGB8888)
000042  b909              CBNZ     r1,|L24.72|
;;;730      {
;;;731        temp = 4;
000044  2204              MOVS     r2,#4
000046  e00e              B        |L24.102|
                  |L24.72|
;;;732      }
;;;733      else if (tempreg == LTDC_Pixelformat_RGB888)
000048  2901              CMP      r1,#1
00004a  d101              BNE      |L24.80|
;;;734      {
;;;735        temp = 3;
00004c  2203              MOVS     r2,#3
00004e  e00a              B        |L24.102|
                  |L24.80|
;;;736      }
;;;737      else if ((tempreg == LTDC_Pixelformat_ARGB4444) || 
000050  2904              CMP      r1,#4
000052  d005              BEQ      |L24.96|
;;;738              (tempreg == LTDC_Pixelformat_RGB565)    ||  
000054  2902              CMP      r1,#2
000056  d003              BEQ      |L24.96|
;;;739              (tempreg == LTDC_Pixelformat_ARGB1555)  ||
000058  2903              CMP      r1,#3
00005a  d001              BEQ      |L24.96|
;;;740              (tempreg == LTDC_Pixelformat_AL88))
00005c  2907              CMP      r1,#7
00005e  d101              BNE      |L24.100|
                  |L24.96|
;;;741      {
;;;742        temp = 2;  
000060  2202              MOVS     r2,#2
000062  e000              B        |L24.102|
                  |L24.100|
;;;743      }
;;;744      else
;;;745      {
;;;746        temp = 1;
000064  2201              MOVS     r2,#1
                  |L24.102|
;;;747      }  
;;;748        
;;;749      tempreg = LTDC_Layerx->CFBLR;
000066  6ac1              LDR      r1,[r0,#0x2c]
;;;750      horizontal_stop = (((tempreg & 0x1FFF) - 3)/temp) + horizontal_start - 1;
000068  f3c1080c          UBFX     r8,r1,#0,#13
00006c  f1a80803          SUB      r8,r8,#3
000070  fbb8f8f2          UDIV     r8,r8,r2
000074  44a8              ADD      r8,r8,r5
000076  f1a80c01          SUB      r12,r8,#1
;;;751      
;;;752      tempreg = LTDC_Layerx->CFBLNR;
00007a  6b01              LDR      r1,[r0,#0x30]
;;;753      vertical_stop = (tempreg & 0x7FF) + vertical_start - 1;  
00007c  f3c1080a          UBFX     r8,r1,#0,#11
000080  44b0              ADD      r8,r8,r6
000082  f1a80701          SUB      r7,r8,#1
;;;754      
;;;755      LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
000086  ea45480c          ORR      r8,r5,r12,LSL #16
00008a  f8c08004          STR      r8,[r0,#4]
;;;756      LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
00008e  ea464807          ORR      r8,r6,r7,LSL #16
000092  f8c08008          STR      r8,[r0,#8]
;;;757    }
000096  e8bd81f0          POP      {r4-r8,pc}
;;;758      
                          ENDP

00009a  0000              DCW      0x0000
                  |L24.156|
                          DCD      0x4001680c

                          AREA ||i.LTDC_LayerSize||, CODE, READONLY, ALIGN=1

                  LTDC_LayerSize PROC
;;;798    
;;;799    void LTDC_LayerSize(LTDC_Layer_TypeDef* LTDC_Layerx, uint32_t Width, uint32_t Height)
000000  e92d43f0          PUSH     {r4-r9,lr}
;;;800    {
000004  460b              MOV      r3,r1
000006  4614              MOV      r4,r2
;;;801    
;;;802      uint8_t temp;
;;;803      uint32_t tempreg;
;;;804      uint32_t horizontal_start;
;;;805      uint32_t horizontal_stop;
;;;806      uint32_t vertical_start;
;;;807      uint32_t vertical_stop;  
;;;808      
;;;809      tempreg = LTDC_Layerx->PFCR;
000008  6901              LDR      r1,[r0,#0x10]
;;;810      
;;;811      if (tempreg == LTDC_Pixelformat_ARGB8888)
00000a  b909              CBNZ     r1,|L25.16|
;;;812      {
;;;813        temp = 4;
00000c  2204              MOVS     r2,#4
00000e  e00e              B        |L25.46|
                  |L25.16|
;;;814      }
;;;815      else if (tempreg == LTDC_Pixelformat_RGB888)
000010  2901              CMP      r1,#1
000012  d101              BNE      |L25.24|
;;;816      {
;;;817        temp = 3;
000014  2203              MOVS     r2,#3
000016  e00a              B        |L25.46|
                  |L25.24|
;;;818      }
;;;819      else if ((tempreg == LTDC_Pixelformat_ARGB4444) || \
000018  2904              CMP      r1,#4
00001a  d005              BEQ      |L25.40|
;;;820              (tempreg == LTDC_Pixelformat_RGB565)    || \
00001c  2902              CMP      r1,#2
00001e  d003              BEQ      |L25.40|
;;;821              (tempreg == LTDC_Pixelformat_ARGB1555)  || \
000020  2903              CMP      r1,#3
000022  d001              BEQ      |L25.40|
;;;822              (tempreg == LTDC_Pixelformat_AL88))
000024  2907              CMP      r1,#7
000026  d101              BNE      |L25.44|
                  |L25.40|
;;;823      {
;;;824        temp = 2;  
000028  2202              MOVS     r2,#2
00002a  e000              B        |L25.46|
                  |L25.44|
;;;825      }
;;;826      else
;;;827      {
;;;828        temp = 1;
00002c  2201              MOVS     r2,#1
                  |L25.46|
;;;829      }
;;;830    
;;;831      /* update horizontal and vertical stop */
;;;832      tempreg = LTDC_Layerx->WHPCR;
00002e  6841              LDR      r1,[r0,#4]
;;;833      horizontal_start = (tempreg & 0x1FFF);
000030  f3c1050c          UBFX     r5,r1,#0,#13
;;;834      horizontal_stop = Width + horizontal_start - 1;  
000034  eb030805          ADD      r8,r3,r5
000038  f1a80701          SUB      r7,r8,#1
;;;835    
;;;836      tempreg = LTDC_Layerx->WVPCR;
00003c  6881              LDR      r1,[r0,#8]
;;;837      vertical_start = (tempreg & 0x1FFF);
00003e  f3c1060c          UBFX     r6,r1,#0,#13
;;;838      vertical_stop = Height + vertical_start - 1;  
000042  eb040806          ADD      r8,r4,r6
000046  f1a80c01          SUB      r12,r8,#1
;;;839      
;;;840      LTDC_Layerx->WHPCR = horizontal_start | (horizontal_stop << 16);
00004a  ea454807          ORR      r8,r5,r7,LSL #16
00004e  f8c08004          STR      r8,[r0,#4]
;;;841      LTDC_Layerx->WVPCR = vertical_start | (vertical_stop << 16);  
000052  ea46480c          ORR      r8,r6,r12,LSL #16
000056  f8c08008          STR      r8,[r0,#8]
;;;842    
;;;843      /* Reconfigures the color frame buffer pitch in byte */
;;;844      LTDC_Layerx->CFBLR  = ((Width * temp) << 16) | ((Width * temp) + 3);  
00005a  fb03f802          MUL      r8,r3,r2
00005e  f1080803          ADD      r8,r8,#3
000062  fb03f902          MUL      r9,r3,r2
000066  ea484809          ORR      r8,r8,r9,LSL #16
00006a  f8c0802c          STR      r8,[r0,#0x2c]
;;;845    
;;;846      /* Reconfigures the frame buffer line number */
;;;847      LTDC_Layerx->CFBLNR  = Height;  
00006e  6304              STR      r4,[r0,#0x30]
;;;848      
;;;849    }
000070  e8bd83f0          POP      {r4-r9,pc}
;;;850    
                          ENDP


                          AREA ||i.LTDC_LayerStructInit||, CODE, READONLY, ALIGN=1

                  LTDC_LayerStructInit PROC
;;;436    
;;;437    void LTDC_LayerStructInit(LTDC_Layer_InitTypeDef * LTDC_Layer_InitStruct)
000000  2100              MOVS     r1,#0
;;;438    {
;;;439      /*--------------- Reset Layer structure parameters values -------------------*/
;;;440    
;;;441      /*!< Initialize the horizontal limit member */
;;;442      LTDC_Layer_InitStruct->LTDC_HorizontalStart = 0x00;
000002  6001              STR      r1,[r0,#0]
;;;443      LTDC_Layer_InitStruct->LTDC_HorizontalStop = 0x00;
000004  6041              STR      r1,[r0,#4]
;;;444    
;;;445      /*!< Initialize the vertical limit member */
;;;446      LTDC_Layer_InitStruct->LTDC_VerticalStart = 0x00;
000006  6081              STR      r1,[r0,#8]
;;;447      LTDC_Layer_InitStruct->LTDC_VerticalStop = 0x00;
000008  60c1              STR      r1,[r0,#0xc]
;;;448    
;;;449      /*!< Initialize the pixel format member */
;;;450      LTDC_Layer_InitStruct->LTDC_PixelFormat = LTDC_Pixelformat_ARGB8888;
00000a  6101              STR      r1,[r0,#0x10]
;;;451    
;;;452      /*!< Initialize the constant alpha value */
;;;453      LTDC_Layer_InitStruct->LTDC_ConstantAlpha = 0xFF;
00000c  21ff              MOVS     r1,#0xff
00000e  6141              STR      r1,[r0,#0x14]
;;;454    
;;;455      /*!< Initialize the default color values */
;;;456      LTDC_Layer_InitStruct->LTDC_DefaultColorBlue = 0x00;
000010  2100              MOVS     r1,#0
000012  6181              STR      r1,[r0,#0x18]
;;;457      LTDC_Layer_InitStruct->LTDC_DefaultColorGreen = 0x00;
000014  61c1              STR      r1,[r0,#0x1c]
;;;458      LTDC_Layer_InitStruct->LTDC_DefaultColorRed = 0x00;
000016  6201              STR      r1,[r0,#0x20]
;;;459      LTDC_Layer_InitStruct->LTDC_DefaultColorAlpha = 0x00;
000018  6241              STR      r1,[r0,#0x24]
;;;460    
;;;461      /*!< Initialize the blending factors */
;;;462      LTDC_Layer_InitStruct->LTDC_BlendingFactor_1 = LTDC_BlendingFactor1_PAxCA;
00001a  f44f61c0          MOV      r1,#0x600
00001e  6281              STR      r1,[r0,#0x28]
;;;463      LTDC_Layer_InitStruct->LTDC_BlendingFactor_2 = LTDC_BlendingFactor2_PAxCA;
000020  2107              MOVS     r1,#7
000022  62c1              STR      r1,[r0,#0x2c]
;;;464    
;;;465      /*!< Initialize the frame buffer start address */
;;;466      LTDC_Layer_InitStruct->LTDC_CFBStartAdress = 0x00;
000024  2100              MOVS     r1,#0
000026  6301              STR      r1,[r0,#0x30]
;;;467    
;;;468      /*!< Initialize the frame buffer pitch and line length */
;;;469      LTDC_Layer_InitStruct->LTDC_CFBLineLength = 0x00;
000028  6341              STR      r1,[r0,#0x34]
;;;470      LTDC_Layer_InitStruct->LTDC_CFBPitch = 0x00;
00002a  6381              STR      r1,[r0,#0x38]
;;;471    
;;;472      /*!< Initialize the frame buffer line number */
;;;473      LTDC_Layer_InitStruct->LTDC_CFBLineNumber = 0x00;
00002c  63c1              STR      r1,[r0,#0x3c]
;;;474    }
00002e  4770              BX       lr
;;;475    
                          ENDP


                          AREA ||i.LTDC_PosStructInit||, CODE, READONLY, ALIGN=1

                  LTDC_PosStructInit PROC
;;;529    
;;;530    void LTDC_PosStructInit(LTDC_PosTypeDef* LTDC_Pos_InitStruct)
000000  2100              MOVS     r1,#0
;;;531    {
;;;532      LTDC_Pos_InitStruct->LTDC_POSX = 0x00;
000002  6001              STR      r1,[r0,#0]
;;;533      LTDC_Pos_InitStruct->LTDC_POSY = 0x00;
000004  6041              STR      r1,[r0,#4]
;;;534    }
000006  4770              BX       lr
;;;535    
                          ENDP


                          AREA ||i.LTDC_RGBStructInit||, CODE, READONLY, ALIGN=1

                  LTDC_RGBStructInit PROC
;;;305    
;;;306    void LTDC_RGBStructInit(LTDC_RGBTypeDef* LTDC_RGB_InitStruct)
000000  2102              MOVS     r1,#2
;;;307    {
;;;308      LTDC_RGB_InitStruct->LTDC_BlueWidth = 0x02;
000002  6001              STR      r1,[r0,#0]
;;;309      LTDC_RGB_InitStruct->LTDC_GreenWidth = 0x02;
000004  6041              STR      r1,[r0,#4]
;;;310      LTDC_RGB_InitStruct->LTDC_RedWidth = 0x02;
000006  6081              STR      r1,[r0,#8]
;;;311    }
000008  4770              BX       lr
;;;312    
                          ENDP


                          AREA ||i.LTDC_ReloadConfig||, CODE, READONLY, ALIGN=2

                  LTDC_ReloadConfig PROC
;;;337    
;;;338    void LTDC_ReloadConfig(uint32_t LTDC_Reload)
000000  4901              LDR      r1,|L29.8|
;;;339    {
;;;340      /* Check the parameters */
;;;341      assert_param(IS_LTDC_RELOAD(LTDC_Reload));
;;;342    
;;;343      /* Sets the Reload type */
;;;344      LTDC->SRCR = (uint32_t)LTDC_Reload;
000002  6008              STR      r0,[r1,#0]
;;;345    }
000004  4770              BX       lr
;;;346    
                          ENDP

000006  0000              DCW      0x0000
                  |L29.8|
                          DCD      0x40016824

                          AREA ||i.LTDC_StructInit||, CODE, READONLY, ALIGN=1

                  LTDC_StructInit PROC
;;;210    
;;;211    void LTDC_StructInit(LTDC_InitTypeDef* LTDC_InitStruct)
000000  2100              MOVS     r1,#0
;;;212    {
;;;213      /*--------------- Reset LTDC init structure parameters values ----------------*/
;;;214      LTDC_InitStruct->LTDC_HSPolarity = LTDC_HSPolarity_AL;      /*!< Initialize the LTDC_HSPolarity member */ 
000002  6001              STR      r1,[r0,#0]
;;;215      LTDC_InitStruct->LTDC_VSPolarity = LTDC_VSPolarity_AL;      /*!< Initialize the LTDC_VSPolarity member */
000004  6041              STR      r1,[r0,#4]
;;;216      LTDC_InitStruct->LTDC_DEPolarity = LTDC_DEPolarity_AL;      /*!< Initialize the LTDC_DEPolarity member */
000006  6081              STR      r1,[r0,#8]
;;;217      LTDC_InitStruct->LTDC_PCPolarity = LTDC_PCPolarity_IPC;     /*!< Initialize the LTDC_PCPolarity member */
000008  60c1              STR      r1,[r0,#0xc]
;;;218      LTDC_InitStruct->LTDC_HorizontalSync = 0x00;                /*!< Initialize the LTDC_HorizontalSync member */
00000a  6101              STR      r1,[r0,#0x10]
;;;219      LTDC_InitStruct->LTDC_VerticalSync = 0x00;                  /*!< Initialize the LTDC_VerticalSync member */
00000c  6141              STR      r1,[r0,#0x14]
;;;220      LTDC_InitStruct->LTDC_AccumulatedHBP = 0x00;                /*!< Initialize the LTDC_AccumulatedHBP member */
00000e  6181              STR      r1,[r0,#0x18]
;;;221      LTDC_InitStruct->LTDC_AccumulatedVBP = 0x00;                /*!< Initialize the LTDC_AccumulatedVBP member */
000010  61c1              STR      r1,[r0,#0x1c]
;;;222      LTDC_InitStruct->LTDC_AccumulatedActiveW = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveW member */
000012  6201              STR      r1,[r0,#0x20]
;;;223      LTDC_InitStruct->LTDC_AccumulatedActiveH = 0x00;            /*!< Initialize the LTDC_AccumulatedActiveH member */
000014  6241              STR      r1,[r0,#0x24]
;;;224      LTDC_InitStruct->LTDC_TotalWidth = 0x00;                    /*!< Initialize the LTDC_TotalWidth member */
000016  6281              STR      r1,[r0,#0x28]
;;;225      LTDC_InitStruct->LTDC_TotalHeigh = 0x00;                    /*!< Initialize the LTDC_TotalHeigh member */
000018  62c1              STR      r1,[r0,#0x2c]
;;;226      LTDC_InitStruct->LTDC_BackgroundRedValue = 0x00;            /*!< Initialize the LTDC_BackgroundRedValue member */
00001a  6301              STR      r1,[r0,#0x30]
;;;227      LTDC_InitStruct->LTDC_BackgroundGreenValue = 0x00;          /*!< Initialize the LTDC_BackgroundGreenValue member */
00001c  6341              STR      r1,[r0,#0x34]
;;;228      LTDC_InitStruct->LTDC_BackgroundBlueValue = 0x00;           /*!< Initialize the LTDC_BackgroundBlueValue member */
00001e  6381              STR      r1,[r0,#0x38]
;;;229    }
000020  4770              BX       lr
;;;230    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\FWLIB\\src\\stm32f4xx_ltdc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_ltdc_c_74c236bc____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___16_stm32f4xx_ltdc_c_74c236bc____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_ltdc_c_74c236bc____REVSH|
#line 153
|__asm___16_stm32f4xx_ltdc_c_74c236bc____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___16_stm32f4xx_ltdc_c_74c236bc____RRX|
#line 328
|__asm___16_stm32f4xx_ltdc_c_74c236bc____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
