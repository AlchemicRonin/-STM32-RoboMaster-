; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\stm32f4xx_can.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32f4xx_can.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\stm32f4xx_can.crf ..\FWLIB\src\stm32f4xx_can.c]
                          THUMB

                          AREA ||i.CAN_CancelTransmit||, CODE, READONLY, ALIGN=1

                  CAN_CancelTransmit PROC
;;;845      */
;;;846    void CAN_CancelTransmit(CAN_TypeDef* CANx, uint8_t Mailbox)
000000  b121              CBZ      r1,|L1.12|
;;;847    {
;;;848      /* Check the parameters */
;;;849      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;850      assert_param(IS_CAN_TRANSMITMAILBOX(Mailbox));
;;;851      /* abort transmission */
;;;852      switch (Mailbox)
000002  2901              CMP      r1,#1
000004  d007              BEQ      |L1.22|
000006  2902              CMP      r1,#2
000008  d10f              BNE      |L1.42|
00000a  e009              B        |L1.32|
                  |L1.12|
;;;853      {
;;;854        case (CAN_TXMAILBOX_0): CANx->TSR |= CAN_TSR_ABRQ0;
00000c  6882              LDR      r2,[r0,#8]
00000e  f0420280          ORR      r2,r2,#0x80
000012  6082              STR      r2,[r0,#8]
;;;855          break;
000014  e00a              B        |L1.44|
                  |L1.22|
;;;856        case (CAN_TXMAILBOX_1): CANx->TSR |= CAN_TSR_ABRQ1;
000016  6882              LDR      r2,[r0,#8]
000018  f4424200          ORR      r2,r2,#0x8000
00001c  6082              STR      r2,[r0,#8]
;;;857          break;
00001e  e005              B        |L1.44|
                  |L1.32|
;;;858        case (CAN_TXMAILBOX_2): CANx->TSR |= CAN_TSR_ABRQ2;
000020  6882              LDR      r2,[r0,#8]
000022  f4420200          ORR      r2,r2,#0x800000
000026  6082              STR      r2,[r0,#8]
;;;859          break;
000028  e000              B        |L1.44|
                  |L1.42|
;;;860        default:
;;;861          break;
00002a  bf00              NOP      
                  |L1.44|
00002c  bf00              NOP                            ;855
;;;862      }
;;;863    }
00002e  4770              BX       lr
;;;864    /**
                          ENDP


                          AREA ||i.CAN_ClearFlag||, CODE, READONLY, ALIGN=2

                  CAN_ClearFlag PROC
;;;1582     */
;;;1583   void CAN_ClearFlag(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
000000  2200              MOVS     r2,#0
;;;1584   {
;;;1585     uint32_t flagtmp=0;
;;;1586     /* Check the parameters */
;;;1587     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1588     assert_param(IS_CAN_CLEAR_FLAG(CAN_FLAG));
;;;1589     
;;;1590     if (CAN_FLAG == CAN_FLAG_LEC) /* ESR register */
000002  4b0c              LDR      r3,|L2.52|
000004  4299              CMP      r1,r3
000006  d102              BNE      |L2.14|
;;;1591     {
;;;1592       /* Clear the selected CAN flags */
;;;1593       CANx->ESR = (uint32_t)RESET;
000008  2300              MOVS     r3,#0
00000a  6183              STR      r3,[r0,#0x18]
00000c  e011              B        |L2.50|
                  |L2.14|
;;;1594     }
;;;1595     else /* MSR or TSR or RF0R or RF1R */
;;;1596     {
;;;1597       flagtmp = CAN_FLAG & 0x000FFFFF;
00000e  f3c10213          UBFX     r2,r1,#0,#20
;;;1598   
;;;1599       if ((CAN_FLAG & CAN_FLAGS_RF0R)!=(uint32_t)RESET)
000012  f0017300          AND      r3,r1,#0x2000000
000016  b10b              CBZ      r3,|L2.28|
;;;1600       {
;;;1601         /* Receive Flags */
;;;1602         CANx->RF0R = (uint32_t)(flagtmp);
000018  60c2              STR      r2,[r0,#0xc]
00001a  e00a              B        |L2.50|
                  |L2.28|
;;;1603       }
;;;1604       else if ((CAN_FLAG & CAN_FLAGS_RF1R)!=(uint32_t)RESET)
00001c  f0016380          AND      r3,r1,#0x4000000
000020  b10b              CBZ      r3,|L2.38|
;;;1605       {
;;;1606         /* Receive Flags */
;;;1607         CANx->RF1R = (uint32_t)(flagtmp);
000022  6102              STR      r2,[r0,#0x10]
000024  e005              B        |L2.50|
                  |L2.38|
;;;1608       }
;;;1609       else if ((CAN_FLAG & CAN_FLAGS_TSR)!=(uint32_t)RESET)
000026  f0016300          AND      r3,r1,#0x8000000
00002a  b10b              CBZ      r3,|L2.48|
;;;1610       {
;;;1611         /* Transmit Flags */
;;;1612         CANx->TSR = (uint32_t)(flagtmp);
00002c  6082              STR      r2,[r0,#8]
00002e  e000              B        |L2.50|
                  |L2.48|
;;;1613       }
;;;1614       else /* If((CAN_FLAG & CAN_FLAGS_MSR)!=(uint32_t)RESET) */
;;;1615       {
;;;1616         /* Operating mode Flags */
;;;1617         CANx->MSR = (uint32_t)(flagtmp);
000030  6042              STR      r2,[r0,#4]
                  |L2.50|
;;;1618       }
;;;1619     }
;;;1620   }
000032  4770              BX       lr
;;;1621   
                          ENDP

                  |L2.52|
                          DCD      0x30f00070

                          AREA ||i.CAN_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  CAN_ClearITPendingBit PROC
;;;1748     */
;;;1749   void CAN_ClearITPendingBit(CAN_TypeDef* CANx, uint32_t CAN_IT)
000000  f5b17f00          CMP      r1,#0x200
;;;1750   {
;;;1751     /* Check the parameters */
;;;1752     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1753     assert_param(IS_CAN_CLEAR_IT(CAN_IT));
;;;1754   
;;;1755     switch (CAN_IT)
000004  d03a              BEQ      |L3.124|
000006  dc0f              BGT      |L3.40|
000008  2920              CMP      r1,#0x20
00000a  d028              BEQ      |L3.94|
00000c  dc06              BGT      |L3.28|
00000e  2901              CMP      r1,#1
000010  d01c              BEQ      |L3.76|
000012  2904              CMP      r1,#4
000014  d01d              BEQ      |L3.82|
000016  2908              CMP      r1,#8
000018  d140              BNE      |L3.156|
00001a  e01d              B        |L3.88|
                  |L3.28|
00001c  2940              CMP      r1,#0x40
00001e  d021              BEQ      |L3.100|
000020  f5b17f80          CMP      r1,#0x100
000024  d13a              BNE      |L3.156|
000026  e026              B        |L3.118|
                  |L3.40|
000028  f5b14f00          CMP      r1,#0x8000
00002c  d031              BEQ      |L3.146|
00002e  dc06              BGT      |L3.62|
000030  f5b16f80          CMP      r1,#0x400
000034  d025              BEQ      |L3.130|
000036  f5b16f00          CMP      r1,#0x800
00003a  d12f              BNE      |L3.156|
00003c  e024              B        |L3.136|
                  |L3.62|
00003e  f5b13f80          CMP      r1,#0x10000
000042  d012              BEQ      |L3.106|
000044  f5b13f00          CMP      r1,#0x20000
000048  d128              BNE      |L3.156|
00004a  e011              B        |L3.112|
                  |L3.76|
;;;1756     {
;;;1757       case CAN_IT_TME:
;;;1758         /* Clear CAN_TSR_RQCPx (rc_w1)*/
;;;1759         CANx->TSR = CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2;  
00004c  4a15              LDR      r2,|L3.164|
00004e  6082              STR      r2,[r0,#8]
;;;1760         break;
000050  e025              B        |L3.158|
                  |L3.82|
;;;1761       case CAN_IT_FF0:
;;;1762         /* Clear CAN_RF0R_FULL0 (rc_w1)*/
;;;1763         CANx->RF0R = CAN_RF0R_FULL0; 
000052  2208              MOVS     r2,#8
000054  60c2              STR      r2,[r0,#0xc]
;;;1764         break;
000056  e022              B        |L3.158|
                  |L3.88|
;;;1765       case CAN_IT_FOV0:
;;;1766         /* Clear CAN_RF0R_FOVR0 (rc_w1)*/
;;;1767         CANx->RF0R = CAN_RF0R_FOVR0; 
000058  2210              MOVS     r2,#0x10
00005a  60c2              STR      r2,[r0,#0xc]
;;;1768         break;
00005c  e01f              B        |L3.158|
                  |L3.94|
;;;1769       case CAN_IT_FF1:
;;;1770         /* Clear CAN_RF1R_FULL1 (rc_w1)*/
;;;1771         CANx->RF1R = CAN_RF1R_FULL1;  
00005e  2208              MOVS     r2,#8
000060  6102              STR      r2,[r0,#0x10]
;;;1772         break;
000062  e01c              B        |L3.158|
                  |L3.100|
;;;1773       case CAN_IT_FOV1:
;;;1774         /* Clear CAN_RF1R_FOVR1 (rc_w1)*/
;;;1775         CANx->RF1R = CAN_RF1R_FOVR1; 
000064  2210              MOVS     r2,#0x10
000066  6102              STR      r2,[r0,#0x10]
;;;1776         break;
000068  e019              B        |L3.158|
                  |L3.106|
;;;1777       case CAN_IT_WKU:
;;;1778         /* Clear CAN_MSR_WKUI (rc_w1)*/
;;;1779         CANx->MSR = CAN_MSR_WKUI;  
00006a  2208              MOVS     r2,#8
00006c  6042              STR      r2,[r0,#4]
;;;1780         break;
00006e  e016              B        |L3.158|
                  |L3.112|
;;;1781       case CAN_IT_SLK:
;;;1782         /* Clear CAN_MSR_SLAKI (rc_w1)*/ 
;;;1783         CANx->MSR = CAN_MSR_SLAKI;   
000070  2210              MOVS     r2,#0x10
000072  6042              STR      r2,[r0,#4]
;;;1784         break;
000074  e013              B        |L3.158|
                  |L3.118|
;;;1785       case CAN_IT_EWG:
;;;1786         /* Clear CAN_MSR_ERRI (rc_w1) */
;;;1787         CANx->MSR = CAN_MSR_ERRI;
000076  2204              MOVS     r2,#4
000078  6042              STR      r2,[r0,#4]
;;;1788          /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/ 
;;;1789         break;
00007a  e010              B        |L3.158|
                  |L3.124|
;;;1790       case CAN_IT_EPV:
;;;1791         /* Clear CAN_MSR_ERRI (rc_w1) */
;;;1792         CANx->MSR = CAN_MSR_ERRI; 
00007c  2204              MOVS     r2,#4
00007e  6042              STR      r2,[r0,#4]
;;;1793          /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
;;;1794         break;
000080  e00d              B        |L3.158|
                  |L3.130|
;;;1795       case CAN_IT_BOF:
;;;1796         /* Clear CAN_MSR_ERRI (rc_w1) */ 
;;;1797         CANx->MSR = CAN_MSR_ERRI; 
000082  2204              MOVS     r2,#4
000084  6042              STR      r2,[r0,#4]
;;;1798          /* @note the corresponding Flag is cleared by hardware depending on the CAN Bus status*/
;;;1799          break;
000086  e00a              B        |L3.158|
                  |L3.136|
;;;1800       case CAN_IT_LEC:
;;;1801         /*  Clear LEC bits */
;;;1802         CANx->ESR = RESET; 
000088  2200              MOVS     r2,#0
00008a  6182              STR      r2,[r0,#0x18]
;;;1803         /* Clear CAN_MSR_ERRI (rc_w1) */
;;;1804         CANx->MSR = CAN_MSR_ERRI; 
00008c  2204              MOVS     r2,#4
00008e  6042              STR      r2,[r0,#4]
;;;1805         break;
000090  e005              B        |L3.158|
                  |L3.146|
;;;1806       case CAN_IT_ERR:
;;;1807         /*Clear LEC bits */
;;;1808         CANx->ESR = RESET; 
000092  2200              MOVS     r2,#0
000094  6182              STR      r2,[r0,#0x18]
;;;1809         /* Clear CAN_MSR_ERRI (rc_w1) */
;;;1810         CANx->MSR = CAN_MSR_ERRI; 
000096  2204              MOVS     r2,#4
000098  6042              STR      r2,[r0,#4]
;;;1811          /* @note BOFF, EPVF and EWGF Flags are cleared by hardware depending on the CAN Bus status*/
;;;1812          break;
00009a  e000              B        |L3.158|
                  |L3.156|
;;;1813       default:
;;;1814          break;
00009c  bf00              NOP      
                  |L3.158|
00009e  bf00              NOP                            ;1760
;;;1815      }
;;;1816   }
0000a0  4770              BX       lr
;;;1817    /**
                          ENDP

0000a2  0000              DCW      0x0000
                  |L3.164|
                          DCD      0x00010101

                          AREA ||i.CAN_DBGFreeze||, CODE, READONLY, ALIGN=1

                  CAN_DBGFreeze PROC
;;;631      */
;;;632    void CAN_DBGFreeze(CAN_TypeDef* CANx, FunctionalState NewState)
000000  b121              CBZ      r1,|L4.12|
;;;633    {
;;;634      /* Check the parameters */
;;;635      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;636      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;637      
;;;638      if (NewState != DISABLE)
;;;639      {
;;;640        /* Enable Debug Freeze  */
;;;641        CANx->MCR |= MCR_DBF;
000002  6802              LDR      r2,[r0,#0]
000004  f4423280          ORR      r2,r2,#0x10000
000008  6002              STR      r2,[r0,#0]
00000a  e003              B        |L4.20|
                  |L4.12|
;;;642      }
;;;643      else
;;;644      {
;;;645        /* Disable Debug Freeze */
;;;646        CANx->MCR &= ~MCR_DBF;
00000c  6802              LDR      r2,[r0,#0]
00000e  f4223280          BIC      r2,r2,#0x10000
000012  6002              STR      r2,[r0,#0]
                  |L4.20|
;;;647      }
;;;648    }
000014  4770              BX       lr
;;;649    
                          ENDP


                          AREA ||i.CAN_DeInit||, CODE, READONLY, ALIGN=2

                  CAN_DeInit PROC
;;;166      */
;;;167    void CAN_DeInit(CAN_TypeDef* CANx)
000000  b510              PUSH     {r4,lr}
;;;168    {
000002  4604              MOV      r4,r0
;;;169      /* Check the parameters */
;;;170      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;171     
;;;172      if (CANx == CAN1)
000004  480b              LDR      r0,|L5.52|
000006  4284              CMP      r4,r0
000008  d109              BNE      |L5.30|
;;;173      {
;;;174        /* Enable CAN1 reset state */
;;;175        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  0648              LSLS     r0,r1,#25
00000e  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;176        /* Release CAN1 from reset state */
;;;177        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN1, DISABLE);
000012  2100              MOVS     r1,#0
000014  f04f7000          MOV      r0,#0x2000000
000018  f7fffffe          BL       RCC_APB1PeriphResetCmd
00001c  e008              B        |L5.48|
                  |L5.30|
;;;178      }
;;;179    #if defined(STM32F413_423xx)
;;;180      else if(CANx == CAN2)
;;;181      {  
;;;182        /* Enable CAN2 reset state */
;;;183        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
;;;184        /* Release CAN2 from reset state */
;;;185        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
;;;186      }
;;;187      
;;;188      else /* CAN3 available only for STM32F413_423xx */
;;;189      {
;;;190        /* Enable CAN3 reset state */
;;;191        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN3, ENABLE);
;;;192        /* Release CAN3 from reset state */
;;;193        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN3, DISABLE); 
;;;194      }
;;;195    #else
;;;196      else
;;;197      {
;;;198        /* Enable CAN2 reset state */
;;;199        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, ENABLE);
00001e  2101              MOVS     r1,#1
000020  0688              LSLS     r0,r1,#26
000022  f7fffffe          BL       RCC_APB1PeriphResetCmd
;;;200        /* Release CAN2 from reset state */
;;;201        RCC_APB1PeriphResetCmd(RCC_APB1Periph_CAN2, DISABLE);
000026  2100              MOVS     r1,#0
000028  f04f6080          MOV      r0,#0x4000000
00002c  f7fffffe          BL       RCC_APB1PeriphResetCmd
                  |L5.48|
;;;202      }
;;;203    #endif /* STM32F413_423xx */
;;;204    }
000030  bd10              POP      {r4,pc}
;;;205    
                          ENDP

000032  0000              DCW      0x0000
                  |L5.52|
                          DCD      0x40006400

                          AREA ||i.CAN_FIFORelease||, CODE, READONLY, ALIGN=1

                  CAN_FIFORelease PROC
;;;943      */
;;;944    void CAN_FIFORelease(CAN_TypeDef* CANx, uint8_t FIFONumber)
000000  b921              CBNZ     r1,|L6.12|
;;;945    {
;;;946      /* Check the parameters */
;;;947      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;948      assert_param(IS_CAN_FIFO(FIFONumber));
;;;949      /* Release FIFO0 */
;;;950      if (FIFONumber == CAN_FIFO0)
;;;951      {
;;;952        CANx->RF0R |= CAN_RF0R_RFOM0;
000002  68c2              LDR      r2,[r0,#0xc]
000004  f0420220          ORR      r2,r2,#0x20
000008  60c2              STR      r2,[r0,#0xc]
00000a  e003              B        |L6.20|
                  |L6.12|
;;;953      }
;;;954      /* Release FIFO1 */
;;;955      else /* FIFONumber == CAN_FIFO1 */
;;;956      {
;;;957        CANx->RF1R |= CAN_RF1R_RFOM1;
00000c  6902              LDR      r2,[r0,#0x10]
00000e  f0420220          ORR      r2,r2,#0x20
000012  6102              STR      r2,[r0,#0x10]
                  |L6.20|
;;;958      }
;;;959    }
000014  4770              BX       lr
;;;960    
                          ENDP


                          AREA ||i.CAN_FilterInit||, CODE, READONLY, ALIGN=2

                  CAN_FilterInit PROC
;;;447      */
;;;448    void CAN_FilterInit(CAN_FilterInitTypeDef* CAN_FilterInitStruct)
000000  b510              PUSH     {r4,lr}
;;;449    {
;;;450      uint32_t filter_number_bit_pos = 0;
000002  2100              MOVS     r1,#0
;;;451      /* Check the parameters */
;;;452      assert_param(IS_CAN_FILTER_NUMBER(CAN_FilterInitStruct->CAN_FilterNumber));
;;;453      assert_param(IS_CAN_FILTER_MODE(CAN_FilterInitStruct->CAN_FilterMode));
;;;454      assert_param(IS_CAN_FILTER_SCALE(CAN_FilterInitStruct->CAN_FilterScale));
;;;455      assert_param(IS_CAN_FILTER_FIFO(CAN_FilterInitStruct->CAN_FilterFIFOAssignment));
;;;456      assert_param(IS_FUNCTIONAL_STATE(CAN_FilterInitStruct->CAN_FilterActivation));
;;;457    
;;;458      filter_number_bit_pos = ((uint32_t)1) << CAN_FilterInitStruct->CAN_FilterNumber;
000004  7a83              LDRB     r3,[r0,#0xa]
000006  2201              MOVS     r2,#1
000008  fa02f103          LSL      r1,r2,r3
;;;459    
;;;460      /* Initialisation mode for the filter */
;;;461      CAN1->FMR |= FMR_FINIT;
00000c  4a3d              LDR      r2,|L7.260|
00000e  6812              LDR      r2,[r2,#0]
000010  f0420201          ORR      r2,r2,#1
000014  4b3b              LDR      r3,|L7.260|
000016  601a              STR      r2,[r3,#0]
;;;462    
;;;463      /* Filter Deactivation */
;;;464      CAN1->FA1R &= ~(uint32_t)filter_number_bit_pos;
000018  4a3a              LDR      r2,|L7.260|
00001a  321c              ADDS     r2,r2,#0x1c
00001c  6812              LDR      r2,[r2,#0]
00001e  438a              BICS     r2,r2,r1
000020  4b38              LDR      r3,|L7.260|
000022  331c              ADDS     r3,r3,#0x1c
000024  601a              STR      r2,[r3,#0]
;;;465    
;;;466      /* Filter Scale */
;;;467      if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_16bit)
000026  7b02              LDRB     r2,[r0,#0xc]
000028  b9ca              CBNZ     r2,|L7.94|
;;;468      {
;;;469        /* 16-bit scale for the filter */
;;;470        CAN1->FS1R &= ~(uint32_t)filter_number_bit_pos;
00002a  4a36              LDR      r2,|L7.260|
00002c  320c              ADDS     r2,r2,#0xc
00002e  6812              LDR      r2,[r2,#0]
000030  438a              BICS     r2,r2,r1
000032  4b34              LDR      r3,|L7.260|
000034  330c              ADDS     r3,r3,#0xc
000036  601a              STR      r2,[r3,#0]
;;;471    
;;;472        /* First 16-bit identifier and First 16-bit mask */
;;;473        /* Or First 16-bit identifier and Second 16-bit identifier */
;;;474        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
000038  8842              LDRH     r2,[r0,#2]
00003a  88c3              LDRH     r3,[r0,#6]
00003c  ea424303          ORR      r3,r2,r3,LSL #16
000040  4a30              LDR      r2,|L7.260|
000042  3240              ADDS     r2,r2,#0x40
000044  7a84              LDRB     r4,[r0,#0xa]
000046  f8423034          STR      r3,[r2,r4,LSL #3]
;;;475           ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow) << 16) |
;;;476            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
;;;477    
;;;478        /* Second 16-bit identifier and Second 16-bit mask */
;;;479        /* Or Third 16-bit identifier and Fourth 16-bit identifier */
;;;480        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
00004a  8802              LDRH     r2,[r0,#0]
00004c  8883              LDRH     r3,[r0,#4]
00004e  ea424303          ORR      r3,r2,r3,LSL #16
000052  4a2c              LDR      r2,|L7.260|
000054  3240              ADDS     r2,r2,#0x40
000056  7a84              LDRB     r4,[r0,#0xa]
000058  eb0202c4          ADD      r2,r2,r4,LSL #3
00005c  6053              STR      r3,[r2,#4]
                  |L7.94|
;;;481           ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
;;;482            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh);
;;;483      }
;;;484    
;;;485      if (CAN_FilterInitStruct->CAN_FilterScale == CAN_FilterScale_32bit)
00005e  7b02              LDRB     r2,[r0,#0xc]
000060  2a01              CMP      r2,#1
000062  d119              BNE      |L7.152|
;;;486      {
;;;487        /* 32-bit scale for the filter */
;;;488        CAN1->FS1R |= filter_number_bit_pos;
000064  4a27              LDR      r2,|L7.260|
000066  320c              ADDS     r2,r2,#0xc
000068  6812              LDR      r2,[r2,#0]
00006a  430a              ORRS     r2,r2,r1
00006c  4b25              LDR      r3,|L7.260|
00006e  330c              ADDS     r3,r3,#0xc
000070  601a              STR      r2,[r3,#0]
;;;489        /* 32-bit identifier or First 32-bit identifier */
;;;490        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR1 = 
000072  8842              LDRH     r2,[r0,#2]
000074  8803              LDRH     r3,[r0,#0]
000076  ea424303          ORR      r3,r2,r3,LSL #16
00007a  4a22              LDR      r2,|L7.260|
00007c  3240              ADDS     r2,r2,#0x40
00007e  7a84              LDRB     r4,[r0,#0xa]
000080  f8423034          STR      r3,[r2,r4,LSL #3]
;;;491           ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdHigh) << 16) |
;;;492            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterIdLow);
;;;493        /* 32-bit mask or Second 32-bit identifier */
;;;494        CAN1->sFilterRegister[CAN_FilterInitStruct->CAN_FilterNumber].FR2 = 
000084  88c2              LDRH     r2,[r0,#6]
000086  8883              LDRH     r3,[r0,#4]
000088  ea424303          ORR      r3,r2,r3,LSL #16
00008c  4a1d              LDR      r2,|L7.260|
00008e  3240              ADDS     r2,r2,#0x40
000090  7a84              LDRB     r4,[r0,#0xa]
000092  eb0202c4          ADD      r2,r2,r4,LSL #3
000096  6053              STR      r3,[r2,#4]
                  |L7.152|
;;;495           ((0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdHigh) << 16) |
;;;496            (0x0000FFFF & (uint32_t)CAN_FilterInitStruct->CAN_FilterMaskIdLow);
;;;497      }
;;;498    
;;;499      /* Filter Mode */
;;;500      if (CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdMask)
000098  7ac2              LDRB     r2,[r0,#0xb]
00009a  b93a              CBNZ     r2,|L7.172|
;;;501      {
;;;502        /*Id/Mask mode for the filter*/
;;;503        CAN1->FM1R &= ~(uint32_t)filter_number_bit_pos;
00009c  4a19              LDR      r2,|L7.260|
00009e  1d12              ADDS     r2,r2,#4
0000a0  6812              LDR      r2,[r2,#0]
0000a2  438a              BICS     r2,r2,r1
0000a4  4b17              LDR      r3,|L7.260|
0000a6  1d1b              ADDS     r3,r3,#4
0000a8  601a              STR      r2,[r3,#0]
0000aa  e006              B        |L7.186|
                  |L7.172|
;;;504      }
;;;505      else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
;;;506      {
;;;507        /*Identifier list mode for the filter*/
;;;508        CAN1->FM1R |= (uint32_t)filter_number_bit_pos;
0000ac  4a15              LDR      r2,|L7.260|
0000ae  1d12              ADDS     r2,r2,#4
0000b0  6812              LDR      r2,[r2,#0]
0000b2  430a              ORRS     r2,r2,r1
0000b4  4b13              LDR      r3,|L7.260|
0000b6  1d1b              ADDS     r3,r3,#4
0000b8  601a              STR      r2,[r3,#0]
                  |L7.186|
;;;509      }
;;;510    
;;;511      /* Filter FIFO assignment */
;;;512      if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO0)
0000ba  8902              LDRH     r2,[r0,#8]
0000bc  b932              CBNZ     r2,|L7.204|
;;;513      {
;;;514        /* FIFO 0 assignation for the filter */
;;;515        CAN1->FFA1R &= ~(uint32_t)filter_number_bit_pos;
0000be  4a11              LDR      r2,|L7.260|
0000c0  3214              ADDS     r2,r2,#0x14
0000c2  6812              LDR      r2,[r2,#0]
0000c4  438a              BICS     r2,r2,r1
0000c6  4b0f              LDR      r3,|L7.260|
0000c8  3314              ADDS     r3,r3,#0x14
0000ca  601a              STR      r2,[r3,#0]
                  |L7.204|
;;;516      }
;;;517    
;;;518      if (CAN_FilterInitStruct->CAN_FilterFIFOAssignment == CAN_Filter_FIFO1)
0000cc  8902              LDRH     r2,[r0,#8]
0000ce  2a01              CMP      r2,#1
0000d0  d106              BNE      |L7.224|
;;;519      {
;;;520        /* FIFO 1 assignation for the filter */
;;;521        CAN1->FFA1R |= (uint32_t)filter_number_bit_pos;
0000d2  4a0c              LDR      r2,|L7.260|
0000d4  3214              ADDS     r2,r2,#0x14
0000d6  6812              LDR      r2,[r2,#0]
0000d8  430a              ORRS     r2,r2,r1
0000da  4b0a              LDR      r3,|L7.260|
0000dc  3314              ADDS     r3,r3,#0x14
0000de  601a              STR      r2,[r3,#0]
                  |L7.224|
;;;522      }
;;;523      
;;;524      /* Filter activation */
;;;525      if (CAN_FilterInitStruct->CAN_FilterActivation == ENABLE)
0000e0  7b42              LDRB     r2,[r0,#0xd]
0000e2  2a01              CMP      r2,#1
0000e4  d106              BNE      |L7.244|
;;;526      {
;;;527        CAN1->FA1R |= filter_number_bit_pos;
0000e6  4a07              LDR      r2,|L7.260|
0000e8  321c              ADDS     r2,r2,#0x1c
0000ea  6812              LDR      r2,[r2,#0]
0000ec  430a              ORRS     r2,r2,r1
0000ee  4b05              LDR      r3,|L7.260|
0000f0  331c              ADDS     r3,r3,#0x1c
0000f2  601a              STR      r2,[r3,#0]
                  |L7.244|
;;;528      }
;;;529    
;;;530      /* Leave the initialisation mode for the filter */
;;;531      CAN1->FMR &= ~FMR_FINIT;
0000f4  4a03              LDR      r2,|L7.260|
0000f6  6812              LDR      r2,[r2,#0]
0000f8  f0220201          BIC      r2,r2,#1
0000fc  4b01              LDR      r3,|L7.260|
0000fe  601a              STR      r2,[r3,#0]
;;;532    }
000100  bd10              POP      {r4,pc}
;;;533    #endif /* STM32F413_423xx */
                          ENDP

000102  0000              DCW      0x0000
                  |L7.260|
                          DCD      0x40006600

                          AREA ||i.CAN_GetFlagStatus||, CODE, READONLY, ALIGN=1

                  CAN_GetFlagStatus PROC
;;;1481     */
;;;1482   FlagStatus CAN_GetFlagStatus(CAN_TypeDef* CANx, uint32_t CAN_FLAG)
000000  b510              PUSH     {r4,lr}
;;;1483   {
000002  4602              MOV      r2,r0
;;;1484     FlagStatus bitstatus = RESET;
000004  2000              MOVS     r0,#0
;;;1485     
;;;1486     /* Check the parameters */
;;;1487     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1488     assert_param(IS_CAN_GET_FLAG(CAN_FLAG));
;;;1489     
;;;1490   
;;;1491     if((CAN_FLAG & CAN_FLAGS_ESR) != (uint32_t)RESET)
000006  f4010370          AND      r3,r1,#0xf00000
00000a  b143              CBZ      r3,|L8.30|
;;;1492     { 
;;;1493       /* Check the status of the specified CAN flag */
;;;1494       if ((CANx->ESR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
00000c  6993              LDR      r3,[r2,#0x18]
00000e  f3c10413          UBFX     r4,r1,#0,#20
000012  4023              ANDS     r3,r3,r4
000014  b10b              CBZ      r3,|L8.26|
;;;1495       { 
;;;1496         /* CAN_FLAG is set */
;;;1497         bitstatus = SET;
000016  2001              MOVS     r0,#1
000018  e02d              B        |L8.118|
                  |L8.26|
;;;1498       }
;;;1499       else
;;;1500       { 
;;;1501         /* CAN_FLAG is reset */
;;;1502         bitstatus = RESET;
00001a  2000              MOVS     r0,#0
00001c  e02b              B        |L8.118|
                  |L8.30|
;;;1503       }
;;;1504     }
;;;1505     else if((CAN_FLAG & CAN_FLAGS_MSR) != (uint32_t)RESET)
00001e  f0017380          AND      r3,r1,#0x1000000
000022  b143              CBZ      r3,|L8.54|
;;;1506     { 
;;;1507       /* Check the status of the specified CAN flag */
;;;1508       if ((CANx->MSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
000024  6853              LDR      r3,[r2,#4]
000026  f3c10413          UBFX     r4,r1,#0,#20
00002a  4023              ANDS     r3,r3,r4
00002c  b10b              CBZ      r3,|L8.50|
;;;1509       { 
;;;1510         /* CAN_FLAG is set */
;;;1511         bitstatus = SET;
00002e  2001              MOVS     r0,#1
000030  e021              B        |L8.118|
                  |L8.50|
;;;1512       }
;;;1513       else
;;;1514       { 
;;;1515         /* CAN_FLAG is reset */
;;;1516         bitstatus = RESET;
000032  2000              MOVS     r0,#0
000034  e01f              B        |L8.118|
                  |L8.54|
;;;1517       }
;;;1518     }
;;;1519     else if((CAN_FLAG & CAN_FLAGS_TSR) != (uint32_t)RESET)
000036  f0016300          AND      r3,r1,#0x8000000
00003a  b143              CBZ      r3,|L8.78|
;;;1520     { 
;;;1521       /* Check the status of the specified CAN flag */
;;;1522       if ((CANx->TSR & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
00003c  6893              LDR      r3,[r2,#8]
00003e  f3c10413          UBFX     r4,r1,#0,#20
000042  4023              ANDS     r3,r3,r4
000044  b10b              CBZ      r3,|L8.74|
;;;1523       { 
;;;1524         /* CAN_FLAG is set */
;;;1525         bitstatus = SET;
000046  2001              MOVS     r0,#1
000048  e015              B        |L8.118|
                  |L8.74|
;;;1526       }
;;;1527       else
;;;1528       { 
;;;1529         /* CAN_FLAG is reset */
;;;1530         bitstatus = RESET;
00004a  2000              MOVS     r0,#0
00004c  e013              B        |L8.118|
                  |L8.78|
;;;1531       }
;;;1532     }
;;;1533     else if((CAN_FLAG & CAN_FLAGS_RF0R) != (uint32_t)RESET)
00004e  f0017300          AND      r3,r1,#0x2000000
000052  b143              CBZ      r3,|L8.102|
;;;1534     { 
;;;1535       /* Check the status of the specified CAN flag */
;;;1536       if ((CANx->RF0R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
000054  68d3              LDR      r3,[r2,#0xc]
000056  f3c10413          UBFX     r4,r1,#0,#20
00005a  4023              ANDS     r3,r3,r4
00005c  b10b              CBZ      r3,|L8.98|
;;;1537       { 
;;;1538         /* CAN_FLAG is set */
;;;1539         bitstatus = SET;
00005e  2001              MOVS     r0,#1
000060  e009              B        |L8.118|
                  |L8.98|
;;;1540       }
;;;1541       else
;;;1542       { 
;;;1543         /* CAN_FLAG is reset */
;;;1544         bitstatus = RESET;
000062  2000              MOVS     r0,#0
000064  e007              B        |L8.118|
                  |L8.102|
;;;1545       }
;;;1546     }
;;;1547     else /* If(CAN_FLAG & CAN_FLAGS_RF1R != (uint32_t)RESET) */
;;;1548     { 
;;;1549       /* Check the status of the specified CAN flag */
;;;1550       if ((uint32_t)(CANx->RF1R & (CAN_FLAG & 0x000FFFFF)) != (uint32_t)RESET)
000066  6913              LDR      r3,[r2,#0x10]
000068  f3c10413          UBFX     r4,r1,#0,#20
00006c  4023              ANDS     r3,r3,r4
00006e  b10b              CBZ      r3,|L8.116|
;;;1551       { 
;;;1552         /* CAN_FLAG is set */
;;;1553         bitstatus = SET;
000070  2001              MOVS     r0,#1
000072  e000              B        |L8.118|
                  |L8.116|
;;;1554       }
;;;1555       else
;;;1556       { 
;;;1557         /* CAN_FLAG is reset */
;;;1558         bitstatus = RESET;
000074  2000              MOVS     r0,#0
                  |L8.118|
;;;1559       }
;;;1560     }
;;;1561     /* Return the CAN_FLAG status */
;;;1562     return  bitstatus;
;;;1563   }
000076  bd10              POP      {r4,pc}
;;;1564   
                          ENDP


                          AREA ||i.CAN_GetITStatus||, CODE, READONLY, ALIGN=2

                  CAN_GetITStatus PROC
;;;1643     */
;;;1644   ITStatus CAN_GetITStatus(CAN_TypeDef* CANx, uint32_t CAN_IT)
000000  b570              PUSH     {r4-r6,lr}
;;;1645   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1646     ITStatus itstatus = RESET;
000006  2600              MOVS     r6,#0
;;;1647     /* Check the parameters */
;;;1648     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1649     assert_param(IS_CAN_IT(CAN_IT));
;;;1650     
;;;1651     /* check the interrupt enable bit */
;;;1652    if((CANx->IER & CAN_IT) != RESET)
000008  6960              LDR      r0,[r4,#0x14]
00000a  4028              ANDS     r0,r0,r5
00000c  2800              CMP      r0,#0
00000e  d071              BEQ      |L9.244|
;;;1653    {
;;;1654      /* in case the Interrupt is enabled, .... */
;;;1655       switch (CAN_IT)
000010  f5b57f80          CMP      r5,#0x100
000014  d05c              BEQ      |L9.208|
000016  dc10              BGT      |L9.58|
000018  2d08              CMP      r5,#8
00001a  d035              BEQ      |L9.136|
00001c  dc06              BGT      |L9.44|
00001e  2d01              CMP      r5,#1
000020  d020              BEQ      |L9.100|
000022  2d02              CMP      r5,#2
000024  d024              BEQ      |L9.112|
000026  2d04              CMP      r5,#4
000028  d172              BNE      |L9.272|
00002a  e027              B        |L9.124|
                  |L9.44|
00002c  2d10              CMP      r5,#0x10
00002e  d031              BEQ      |L9.148|
000030  2d20              CMP      r5,#0x20
000032  d035              BEQ      |L9.160|
000034  2d40              CMP      r5,#0x40
000036  d16b              BNE      |L9.272|
000038  e038              B        |L9.172|
                  |L9.58|
00003a  f5b54f00          CMP      r5,#0x8000
00003e  d060              BEQ      |L9.258|
000040  dc09              BGT      |L9.86|
000042  f5b57f00          CMP      r5,#0x200
000046  d049              BEQ      |L9.220|
000048  f5b56f80          CMP      r5,#0x400
00004c  d04c              BEQ      |L9.232|
00004e  f5b56f00          CMP      r5,#0x800
000052  d15d              BNE      |L9.272|
000054  e04f              B        |L9.246|
                  |L9.86|
000056  f5b53f80          CMP      r5,#0x10000
00005a  d02d              BEQ      |L9.184|
00005c  f5b53f00          CMP      r5,#0x20000
000060  d156              BNE      |L9.272|
000062  e02f              B        |L9.196|
                  |L9.100|
;;;1656       {
;;;1657         case CAN_IT_TME:
;;;1658           /* Check CAN_TSR_RQCPx bits */
;;;1659           itstatus = CheckITStatus(CANx->TSR, CAN_TSR_RQCP0|CAN_TSR_RQCP1|CAN_TSR_RQCP2);  
000064  68a0              LDR      r0,[r4,#8]
000066  492d              LDR      r1,|L9.284|
000068  f7fffffe          BL       CheckITStatus
00006c  4606              MOV      r6,r0
;;;1660           break;
00006e  e051              B        |L9.276|
                  |L9.112|
;;;1661         case CAN_IT_FMP0:
;;;1662           /* Check CAN_RF0R_FMP0 bit */
;;;1663           itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FMP0);  
000070  68e0              LDR      r0,[r4,#0xc]
000072  2103              MOVS     r1,#3
000074  f7fffffe          BL       CheckITStatus
000078  4606              MOV      r6,r0
;;;1664           break;
00007a  e04b              B        |L9.276|
                  |L9.124|
;;;1665         case CAN_IT_FF0:
;;;1666           /* Check CAN_RF0R_FULL0 bit */
;;;1667           itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FULL0);  
00007c  68e0              LDR      r0,[r4,#0xc]
00007e  2108              MOVS     r1,#8
000080  f7fffffe          BL       CheckITStatus
000084  4606              MOV      r6,r0
;;;1668           break;
000086  e045              B        |L9.276|
                  |L9.136|
;;;1669         case CAN_IT_FOV0:
;;;1670           /* Check CAN_RF0R_FOVR0 bit */
;;;1671           itstatus = CheckITStatus(CANx->RF0R, CAN_RF0R_FOVR0);  
000088  68e0              LDR      r0,[r4,#0xc]
00008a  2110              MOVS     r1,#0x10
00008c  f7fffffe          BL       CheckITStatus
000090  4606              MOV      r6,r0
;;;1672           break;
000092  e03f              B        |L9.276|
                  |L9.148|
;;;1673         case CAN_IT_FMP1:
;;;1674           /* Check CAN_RF1R_FMP1 bit */
;;;1675           itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FMP1);  
000094  6920              LDR      r0,[r4,#0x10]
000096  2103              MOVS     r1,#3
000098  f7fffffe          BL       CheckITStatus
00009c  4606              MOV      r6,r0
;;;1676           break;
00009e  e039              B        |L9.276|
                  |L9.160|
;;;1677         case CAN_IT_FF1:
;;;1678           /* Check CAN_RF1R_FULL1 bit */
;;;1679           itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FULL1);  
0000a0  6920              LDR      r0,[r4,#0x10]
0000a2  2108              MOVS     r1,#8
0000a4  f7fffffe          BL       CheckITStatus
0000a8  4606              MOV      r6,r0
;;;1680           break;
0000aa  e033              B        |L9.276|
                  |L9.172|
;;;1681         case CAN_IT_FOV1:
;;;1682           /* Check CAN_RF1R_FOVR1 bit */
;;;1683           itstatus = CheckITStatus(CANx->RF1R, CAN_RF1R_FOVR1);  
0000ac  6920              LDR      r0,[r4,#0x10]
0000ae  2110              MOVS     r1,#0x10
0000b0  f7fffffe          BL       CheckITStatus
0000b4  4606              MOV      r6,r0
;;;1684           break;
0000b6  e02d              B        |L9.276|
                  |L9.184|
;;;1685         case CAN_IT_WKU:
;;;1686           /* Check CAN_MSR_WKUI bit */
;;;1687           itstatus = CheckITStatus(CANx->MSR, CAN_MSR_WKUI);  
0000b8  6860              LDR      r0,[r4,#4]
0000ba  2108              MOVS     r1,#8
0000bc  f7fffffe          BL       CheckITStatus
0000c0  4606              MOV      r6,r0
;;;1688           break;
0000c2  e027              B        |L9.276|
                  |L9.196|
;;;1689         case CAN_IT_SLK:
;;;1690           /* Check CAN_MSR_SLAKI bit */
;;;1691           itstatus = CheckITStatus(CANx->MSR, CAN_MSR_SLAKI);  
0000c4  6860              LDR      r0,[r4,#4]
0000c6  2110              MOVS     r1,#0x10
0000c8  f7fffffe          BL       CheckITStatus
0000cc  4606              MOV      r6,r0
;;;1692           break;
0000ce  e021              B        |L9.276|
                  |L9.208|
;;;1693         case CAN_IT_EWG:
;;;1694           /* Check CAN_ESR_EWGF bit */
;;;1695           itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EWGF);  
0000d0  69a0              LDR      r0,[r4,#0x18]
0000d2  2101              MOVS     r1,#1
0000d4  f7fffffe          BL       CheckITStatus
0000d8  4606              MOV      r6,r0
;;;1696           break;
0000da  e01b              B        |L9.276|
                  |L9.220|
;;;1697         case CAN_IT_EPV:
;;;1698           /* Check CAN_ESR_EPVF bit */
;;;1699           itstatus = CheckITStatus(CANx->ESR, CAN_ESR_EPVF);  
0000dc  69a0              LDR      r0,[r4,#0x18]
0000de  2102              MOVS     r1,#2
0000e0  f7fffffe          BL       CheckITStatus
0000e4  4606              MOV      r6,r0
;;;1700           break;
0000e6  e015              B        |L9.276|
                  |L9.232|
;;;1701         case CAN_IT_BOF:
;;;1702           /* Check CAN_ESR_BOFF bit */
;;;1703           itstatus = CheckITStatus(CANx->ESR, CAN_ESR_BOFF);  
0000e8  69a0              LDR      r0,[r4,#0x18]
0000ea  2104              MOVS     r1,#4
0000ec  f7fffffe          BL       CheckITStatus
0000f0  4606              MOV      r6,r0
;;;1704           break;
0000f2  e00f              B        |L9.276|
                  |L9.244|
0000f4  e00f              B        |L9.278|
                  |L9.246|
;;;1705         case CAN_IT_LEC:
;;;1706           /* Check CAN_ESR_LEC bit */
;;;1707           itstatus = CheckITStatus(CANx->ESR, CAN_ESR_LEC);  
0000f6  69a0              LDR      r0,[r4,#0x18]
0000f8  2170              MOVS     r1,#0x70
0000fa  f7fffffe          BL       CheckITStatus
0000fe  4606              MOV      r6,r0
;;;1708           break;
000100  e008              B        |L9.276|
                  |L9.258|
;;;1709         case CAN_IT_ERR:
;;;1710           /* Check CAN_MSR_ERRI bit */ 
;;;1711           itstatus = CheckITStatus(CANx->MSR, CAN_MSR_ERRI); 
000102  6860              LDR      r0,[r4,#4]
000104  2104              MOVS     r1,#4
000106  f7fffffe          BL       CheckITStatus
00010a  4606              MOV      r6,r0
;;;1712           break;
00010c  e002              B        |L9.276|
00010e  e7ff              B        |L9.272|
                  |L9.272|
;;;1713         default:
;;;1714           /* in case of error, return RESET */
;;;1715           itstatus = RESET;
000110  2600              MOVS     r6,#0
;;;1716           break;
000112  bf00              NOP      
                  |L9.276|
000114  e000              B        |L9.280|
                  |L9.278|
;;;1717       }
;;;1718     }
;;;1719     else
;;;1720     {
;;;1721      /* in case the Interrupt is not enabled, return RESET */
;;;1722       itstatus  = RESET;
000116  2600              MOVS     r6,#0
                  |L9.280|
;;;1723     }
;;;1724     
;;;1725     /* Return the CAN_IT status */
;;;1726     return  itstatus;
000118  4630              MOV      r0,r6
;;;1727   }
00011a  bd70              POP      {r4-r6,pc}
;;;1728   
                          ENDP

                  |L9.284|
                          DCD      0x00010101

                          AREA ||i.CAN_GetLSBTransmitErrorCounter||, CODE, READONLY, ALIGN=1

                  CAN_GetLSBTransmitErrorCounter PROC
;;;1234     */
;;;1235   uint8_t CAN_GetLSBTransmitErrorCounter(CAN_TypeDef* CANx)
000000  4601              MOV      r1,r0
;;;1236   {
;;;1237     uint8_t counter=0;
000002  2000              MOVS     r0,#0
;;;1238     
;;;1239     /* Check the parameters */
;;;1240     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1241     
;;;1242     /* Get the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
;;;1243     counter = (uint8_t)((CANx->ESR & CAN_ESR_TEC)>> 16);
000004  698a              LDR      r2,[r1,#0x18]
000006  f3c24007          UBFX     r0,r2,#16,#8
;;;1244     
;;;1245     /* Return the LSB of the 9-bit CANx Transmit Error Counter(TEC) */
;;;1246     return counter;
;;;1247   }
00000a  4770              BX       lr
;;;1248   /**
                          ENDP


                          AREA ||i.CAN_GetLastErrorCode||, CODE, READONLY, ALIGN=1

                  CAN_GetLastErrorCode PROC
;;;1187     */
;;;1188   uint8_t CAN_GetLastErrorCode(CAN_TypeDef* CANx)
000000  4601              MOV      r1,r0
;;;1189   {
;;;1190     uint8_t errorcode=0;
000002  2000              MOVS     r0,#0
;;;1191     
;;;1192     /* Check the parameters */
;;;1193     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1194     
;;;1195     /* Get the error code*/
;;;1196     errorcode = (((uint8_t)CANx->ESR) & (uint8_t)CAN_ESR_LEC);
000004  698a              LDR      r2,[r1,#0x18]
000006  f0020070          AND      r0,r2,#0x70
;;;1197     
;;;1198     /* Return the error code*/
;;;1199     return errorcode;
;;;1200   }
00000a  4770              BX       lr
;;;1201   
                          ENDP


                          AREA ||i.CAN_GetReceiveErrorCounter||, CODE, READONLY, ALIGN=1

                  CAN_GetReceiveErrorCounter PROC
;;;1213     */
;;;1214   uint8_t CAN_GetReceiveErrorCounter(CAN_TypeDef* CANx)
000000  4601              MOV      r1,r0
;;;1215   {
;;;1216     uint8_t counter=0;
000002  2000              MOVS     r0,#0
;;;1217     
;;;1218     /* Check the parameters */
;;;1219     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1220     
;;;1221     /* Get the Receive Error Counter*/
;;;1222     counter = (uint8_t)((CANx->ESR & CAN_ESR_REC)>> 24);
000004  698a              LDR      r2,[r1,#0x18]
000006  0e10              LSRS     r0,r2,#24
;;;1223     
;;;1224     /* Return the Receive Error Counter*/
;;;1225     return counter;
;;;1226   }
000008  4770              BX       lr
;;;1227   
                          ENDP


                          AREA ||i.CAN_ITConfig||, CODE, READONLY, ALIGN=1

                  CAN_ITConfig PROC
;;;1440     */
;;;1441   void CAN_ITConfig(CAN_TypeDef* CANx, uint32_t CAN_IT, FunctionalState NewState)
000000  b11a              CBZ      r2,|L13.10|
;;;1442   {
;;;1443     /* Check the parameters */
;;;1444     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1445     assert_param(IS_CAN_IT(CAN_IT));
;;;1446     assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;1447   
;;;1448     if (NewState != DISABLE)
;;;1449     {
;;;1450       /* Enable the selected CANx interrupt */
;;;1451       CANx->IER |= CAN_IT;
000002  6943              LDR      r3,[r0,#0x14]
000004  430b              ORRS     r3,r3,r1
000006  6143              STR      r3,[r0,#0x14]
000008  e002              B        |L13.16|
                  |L13.10|
;;;1452     }
;;;1453     else
;;;1454     {
;;;1455       /* Disable the selected CANx interrupt */
;;;1456       CANx->IER &= ~CAN_IT;
00000a  6943              LDR      r3,[r0,#0x14]
00000c  438b              BICS     r3,r3,r1
00000e  6143              STR      r3,[r0,#0x14]
                  |L13.16|
;;;1457     }
;;;1458   }
000010  4770              BX       lr
;;;1459   /**
                          ENDP


                          AREA ||i.CAN_Init||, CODE, READONLY, ALIGN=1

                  CAN_Init PROC
;;;215      */
;;;216    uint8_t CAN_Init(CAN_TypeDef* CANx, CAN_InitTypeDef* CAN_InitStruct)
000000  b530              PUSH     {r4,r5,lr}
;;;217    {
000002  4602              MOV      r2,r0
;;;218      uint8_t InitStatus = CAN_InitStatus_Failed;
000004  2000              MOVS     r0,#0
;;;219      uint32_t wait_ack = 0x00000000;
000006  2300              MOVS     r3,#0
;;;220      /* Check the parameters */
;;;221      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;222      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TTCM));
;;;223      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_ABOM));
;;;224      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_AWUM));
;;;225      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_NART));
;;;226      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_RFLM));
;;;227      assert_param(IS_FUNCTIONAL_STATE(CAN_InitStruct->CAN_TXFP));
;;;228      assert_param(IS_CAN_MODE(CAN_InitStruct->CAN_Mode));
;;;229      assert_param(IS_CAN_SJW(CAN_InitStruct->CAN_SJW));
;;;230      assert_param(IS_CAN_BS1(CAN_InitStruct->CAN_BS1));
;;;231      assert_param(IS_CAN_BS2(CAN_InitStruct->CAN_BS2));
;;;232      assert_param(IS_CAN_PRESCALER(CAN_InitStruct->CAN_Prescaler));
;;;233    
;;;234      /* Exit from sleep mode */
;;;235      CANx->MCR &= (~(uint32_t)CAN_MCR_SLEEP);
000008  6814              LDR      r4,[r2,#0]
00000a  f0240402          BIC      r4,r4,#2
00000e  6014              STR      r4,[r2,#0]
;;;236    
;;;237      /* Request initialisation */
;;;238      CANx->MCR |= CAN_MCR_INRQ ;
000010  6814              LDR      r4,[r2,#0]
000012  f0440401          ORR      r4,r4,#1
000016  6014              STR      r4,[r2,#0]
;;;239    
;;;240      /* Wait the acknowledge */
;;;241      while (((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
000018  e000              B        |L14.28|
                  |L14.26|
;;;242      {
;;;243        wait_ack++;
00001a  1c5b              ADDS     r3,r3,#1
                  |L14.28|
00001c  6854              LDR      r4,[r2,#4]            ;241
00001e  f0040401          AND      r4,r4,#1              ;241
000022  b91c              CBNZ     r4,|L14.44|
000024  f64f74ff          MOV      r4,#0xffff            ;241
000028  42a3              CMP      r3,r4                 ;241
00002a  d1f6              BNE      |L14.26|
                  |L14.44|
;;;244      }
;;;245    
;;;246      /* Check acknowledge */
;;;247      if ((CANx->MSR & CAN_MSR_INAK) != CAN_MSR_INAK)
00002c  6854              LDR      r4,[r2,#4]
00002e  f0040401          AND      r4,r4,#1
000032  b90c              CBNZ     r4,|L14.56|
;;;248      {
;;;249        InitStatus = CAN_InitStatus_Failed;
000034  2000              MOVS     r0,#0
000036  e06c              B        |L14.274|
                  |L14.56|
;;;250      }
;;;251      else 
;;;252      {
;;;253        /* Set the time triggered communication mode */
;;;254        if (CAN_InitStruct->CAN_TTCM == ENABLE)
000038  798c              LDRB     r4,[r1,#6]
00003a  2c01              CMP      r4,#1
00003c  d104              BNE      |L14.72|
;;;255        {
;;;256          CANx->MCR |= CAN_MCR_TTCM;
00003e  6814              LDR      r4,[r2,#0]
000040  f0440480          ORR      r4,r4,#0x80
000044  6014              STR      r4,[r2,#0]
000046  e003              B        |L14.80|
                  |L14.72|
;;;257        }
;;;258        else
;;;259        {
;;;260          CANx->MCR &= ~(uint32_t)CAN_MCR_TTCM;
000048  6814              LDR      r4,[r2,#0]
00004a  f0240480          BIC      r4,r4,#0x80
00004e  6014              STR      r4,[r2,#0]
                  |L14.80|
;;;261        }
;;;262    
;;;263        /* Set the automatic bus-off management */
;;;264        if (CAN_InitStruct->CAN_ABOM == ENABLE)
000050  79cc              LDRB     r4,[r1,#7]
000052  2c01              CMP      r4,#1
000054  d104              BNE      |L14.96|
;;;265        {
;;;266          CANx->MCR |= CAN_MCR_ABOM;
000056  6814              LDR      r4,[r2,#0]
000058  f0440440          ORR      r4,r4,#0x40
00005c  6014              STR      r4,[r2,#0]
00005e  e003              B        |L14.104|
                  |L14.96|
;;;267        }
;;;268        else
;;;269        {
;;;270          CANx->MCR &= ~(uint32_t)CAN_MCR_ABOM;
000060  6814              LDR      r4,[r2,#0]
000062  f0240440          BIC      r4,r4,#0x40
000066  6014              STR      r4,[r2,#0]
                  |L14.104|
;;;271        }
;;;272    
;;;273        /* Set the automatic wake-up mode */
;;;274        if (CAN_InitStruct->CAN_AWUM == ENABLE)
000068  7a0c              LDRB     r4,[r1,#8]
00006a  2c01              CMP      r4,#1
00006c  d104              BNE      |L14.120|
;;;275        {
;;;276          CANx->MCR |= CAN_MCR_AWUM;
00006e  6814              LDR      r4,[r2,#0]
000070  f0440420          ORR      r4,r4,#0x20
000074  6014              STR      r4,[r2,#0]
000076  e003              B        |L14.128|
                  |L14.120|
;;;277        }
;;;278        else
;;;279        {
;;;280          CANx->MCR &= ~(uint32_t)CAN_MCR_AWUM;
000078  6814              LDR      r4,[r2,#0]
00007a  f0240420          BIC      r4,r4,#0x20
00007e  6014              STR      r4,[r2,#0]
                  |L14.128|
;;;281        }
;;;282    
;;;283        /* Set the no automatic retransmission */
;;;284        if (CAN_InitStruct->CAN_NART == ENABLE)
000080  7a4c              LDRB     r4,[r1,#9]
000082  2c01              CMP      r4,#1
000084  d104              BNE      |L14.144|
;;;285        {
;;;286          CANx->MCR |= CAN_MCR_NART;
000086  6814              LDR      r4,[r2,#0]
000088  f0440410          ORR      r4,r4,#0x10
00008c  6014              STR      r4,[r2,#0]
00008e  e003              B        |L14.152|
                  |L14.144|
;;;287        }
;;;288        else
;;;289        {
;;;290          CANx->MCR &= ~(uint32_t)CAN_MCR_NART;
000090  6814              LDR      r4,[r2,#0]
000092  f0240410          BIC      r4,r4,#0x10
000096  6014              STR      r4,[r2,#0]
                  |L14.152|
;;;291        }
;;;292    
;;;293        /* Set the receive FIFO locked mode */
;;;294        if (CAN_InitStruct->CAN_RFLM == ENABLE)
000098  7a8c              LDRB     r4,[r1,#0xa]
00009a  2c01              CMP      r4,#1
00009c  d104              BNE      |L14.168|
;;;295        {
;;;296          CANx->MCR |= CAN_MCR_RFLM;
00009e  6814              LDR      r4,[r2,#0]
0000a0  f0440408          ORR      r4,r4,#8
0000a4  6014              STR      r4,[r2,#0]
0000a6  e003              B        |L14.176|
                  |L14.168|
;;;297        }
;;;298        else
;;;299        {
;;;300          CANx->MCR &= ~(uint32_t)CAN_MCR_RFLM;
0000a8  6814              LDR      r4,[r2,#0]
0000aa  f0240408          BIC      r4,r4,#8
0000ae  6014              STR      r4,[r2,#0]
                  |L14.176|
;;;301        }
;;;302    
;;;303        /* Set the transmit FIFO priority */
;;;304        if (CAN_InitStruct->CAN_TXFP == ENABLE)
0000b0  7acc              LDRB     r4,[r1,#0xb]
0000b2  2c01              CMP      r4,#1
0000b4  d104              BNE      |L14.192|
;;;305        {
;;;306          CANx->MCR |= CAN_MCR_TXFP;
0000b6  6814              LDR      r4,[r2,#0]
0000b8  f0440404          ORR      r4,r4,#4
0000bc  6014              STR      r4,[r2,#0]
0000be  e003              B        |L14.200|
                  |L14.192|
;;;307        }
;;;308        else
;;;309        {
;;;310          CANx->MCR &= ~(uint32_t)CAN_MCR_TXFP;
0000c0  6814              LDR      r4,[r2,#0]
0000c2  f0240404          BIC      r4,r4,#4
0000c6  6014              STR      r4,[r2,#0]
                  |L14.200|
;;;311        }
;;;312    
;;;313        /* Set the bit timing register */
;;;314        CANx->BTR = (uint32_t)((uint32_t)CAN_InitStruct->CAN_Mode << 30) | \
0000c8  788c              LDRB     r4,[r1,#2]
0000ca  07a4              LSLS     r4,r4,#30
0000cc  78cd              LDRB     r5,[r1,#3]
0000ce  ea446405          ORR      r4,r4,r5,LSL #24
0000d2  790d              LDRB     r5,[r1,#4]
0000d4  ea444405          ORR      r4,r4,r5,LSL #16
0000d8  794d              LDRB     r5,[r1,#5]
0000da  ea445405          ORR      r4,r4,r5,LSL #20
0000de  880d              LDRH     r5,[r1,#0]
0000e0  1e6d              SUBS     r5,r5,#1
0000e2  432c              ORRS     r4,r4,r5
0000e4  61d4              STR      r4,[r2,#0x1c]
;;;315                    ((uint32_t)CAN_InitStruct->CAN_SJW << 24) | \
;;;316                    ((uint32_t)CAN_InitStruct->CAN_BS1 << 16) | \
;;;317                    ((uint32_t)CAN_InitStruct->CAN_BS2 << 20) | \
;;;318                   ((uint32_t)CAN_InitStruct->CAN_Prescaler - 1);
;;;319    
;;;320        /* Request leave initialisation */
;;;321        CANx->MCR &= ~(uint32_t)CAN_MCR_INRQ;
0000e6  6814              LDR      r4,[r2,#0]
0000e8  f0240401          BIC      r4,r4,#1
0000ec  6014              STR      r4,[r2,#0]
;;;322    
;;;323       /* Wait the acknowledge */
;;;324       wait_ack = 0;
0000ee  2300              MOVS     r3,#0
;;;325    
;;;326       while (((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK) && (wait_ack != INAK_TIMEOUT))
0000f0  e000              B        |L14.244|
                  |L14.242|
;;;327       {
;;;328         wait_ack++;
0000f2  1c5b              ADDS     r3,r3,#1
                  |L14.244|
0000f4  6854              LDR      r4,[r2,#4]            ;326
0000f6  f0040401          AND      r4,r4,#1              ;326
0000fa  b11c              CBZ      r4,|L14.260|
0000fc  f64f74ff          MOV      r4,#0xffff            ;326
000100  42a3              CMP      r3,r4                 ;326
000102  d1f6              BNE      |L14.242|
                  |L14.260|
;;;329       }
;;;330    
;;;331        /* ...and check acknowledged */
;;;332        if ((CANx->MSR & CAN_MSR_INAK) == CAN_MSR_INAK)
000104  6854              LDR      r4,[r2,#4]
000106  f0040401          AND      r4,r4,#1
00010a  b10c              CBZ      r4,|L14.272|
;;;333        {
;;;334          InitStatus = CAN_InitStatus_Failed;
00010c  2000              MOVS     r0,#0
00010e  e000              B        |L14.274|
                  |L14.272|
;;;335        }
;;;336        else
;;;337        {
;;;338          InitStatus = CAN_InitStatus_Success ;
000110  2001              MOVS     r0,#1
                  |L14.274|
;;;339        }
;;;340      }
;;;341    
;;;342      /* At this step, return the status of initialization */
;;;343      return InitStatus;
;;;344    }
000112  bd30              POP      {r4,r5,pc}
;;;345    
                          ENDP


                          AREA ||i.CAN_MessagePending||, CODE, READONLY, ALIGN=1

                  CAN_MessagePending PROC
;;;967      */
;;;968    uint8_t CAN_MessagePending(CAN_TypeDef* CANx, uint8_t FIFONumber)
000000  4602              MOV      r2,r0
;;;969    {
;;;970      uint8_t message_pending=0;
000002  2000              MOVS     r0,#0
;;;971      /* Check the parameters */
;;;972      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;973      assert_param(IS_CAN_FIFO(FIFONumber));
;;;974      if (FIFONumber == CAN_FIFO0)
000004  b919              CBNZ     r1,|L15.14|
;;;975      {
;;;976        message_pending = (uint8_t)(CANx->RF0R&(uint32_t)0x03);
000006  68d3              LDR      r3,[r2,#0xc]
000008  f0030003          AND      r0,r3,#3
00000c  e006              B        |L15.28|
                  |L15.14|
;;;977      }
;;;978      else if (FIFONumber == CAN_FIFO1)
00000e  2901              CMP      r1,#1
000010  d103              BNE      |L15.26|
;;;979      {
;;;980        message_pending = (uint8_t)(CANx->RF1R&(uint32_t)0x03);
000012  6913              LDR      r3,[r2,#0x10]
000014  f0030003          AND      r0,r3,#3
000018  e000              B        |L15.28|
                  |L15.26|
;;;981      }
;;;982      else
;;;983      {
;;;984        message_pending = 0;
00001a  2000              MOVS     r0,#0
                  |L15.28|
;;;985      }
;;;986      return message_pending;
;;;987    }
00001c  4770              BX       lr
;;;988    /**
                          ENDP


                          AREA ||i.CAN_OperatingModeRequest||, CODE, READONLY, ALIGN=1

                  CAN_OperatingModeRequest PROC
;;;1017     */
;;;1018   uint8_t CAN_OperatingModeRequest(CAN_TypeDef* CANx, uint8_t CAN_OperatingMode)
000000  b510              PUSH     {r4,lr}
;;;1019   {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;1020     uint8_t status = CAN_ModeStatus_Failed;
000006  2000              MOVS     r0,#0
;;;1021     
;;;1022     /* Timeout for INAK or also for SLAK bits*/
;;;1023     uint32_t timeout = INAK_TIMEOUT; 
000008  f64f71ff          MOV      r1,#0xffff
;;;1024   
;;;1025     /* Check the parameters */
;;;1026     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1027     assert_param(IS_CAN_OPERATING_MODE(CAN_OperatingMode));
;;;1028   
;;;1029     if (CAN_OperatingMode == CAN_OperatingMode_Initialization)
00000c  b9bb              CBNZ     r3,|L16.62|
;;;1030     {
;;;1031       /* Request initialisation */
;;;1032       CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_SLEEP)) | CAN_MCR_INRQ);
00000e  6814              LDR      r4,[r2,#0]
000010  f0240402          BIC      r4,r4,#2
000014  f0440401          ORR      r4,r4,#1
000018  6014              STR      r4,[r2,#0]
;;;1033   
;;;1034       /* Wait the acknowledge */
;;;1035       while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK) && (timeout != 0))
00001a  e000              B        |L16.30|
                  |L16.28|
;;;1036       {
;;;1037         timeout--;
00001c  1e49              SUBS     r1,r1,#1
                  |L16.30|
00001e  6854              LDR      r4,[r2,#4]            ;1035
000020  f0040403          AND      r4,r4,#3              ;1035
000024  2c01              CMP      r4,#1                 ;1035
000026  d001              BEQ      |L16.44|
000028  2900              CMP      r1,#0                 ;1035
00002a  d1f7              BNE      |L16.28|
                  |L16.44|
;;;1038       }
;;;1039       if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_INAK)
00002c  6854              LDR      r4,[r2,#4]
00002e  f0040403          AND      r4,r4,#3
000032  2c01              CMP      r4,#1
000034  d001              BEQ      |L16.58|
;;;1040       {
;;;1041         status = CAN_ModeStatus_Failed;
000036  2000              MOVS     r0,#0
000038  e032              B        |L16.160|
                  |L16.58|
;;;1042       }
;;;1043       else
;;;1044       {
;;;1045         status = CAN_ModeStatus_Success;
00003a  2001              MOVS     r0,#1
00003c  e030              B        |L16.160|
                  |L16.62|
;;;1046       }
;;;1047     }
;;;1048     else  if (CAN_OperatingMode == CAN_OperatingMode_Normal)
00003e  2b01              CMP      r3,#1
000040  d113              BNE      |L16.106|
;;;1049     {
;;;1050       /* Request leave initialisation and sleep mode  and enter Normal mode */
;;;1051       CANx->MCR &= (uint32_t)(~(CAN_MCR_SLEEP|CAN_MCR_INRQ));
000042  6814              LDR      r4,[r2,#0]
000044  f0240403          BIC      r4,r4,#3
000048  6014              STR      r4,[r2,#0]
;;;1052   
;;;1053       /* Wait the acknowledge */
;;;1054       while (((CANx->MSR & CAN_MODE_MASK) != 0) && (timeout!=0))
00004a  e000              B        |L16.78|
                  |L16.76|
;;;1055       {
;;;1056         timeout--;
00004c  1e49              SUBS     r1,r1,#1
                  |L16.78|
00004e  6854              LDR      r4,[r2,#4]            ;1054
000050  f0040403          AND      r4,r4,#3              ;1054
000054  b10c              CBZ      r4,|L16.90|
000056  2900              CMP      r1,#0                 ;1054
000058  d1f8              BNE      |L16.76|
                  |L16.90|
;;;1057       }
;;;1058       if ((CANx->MSR & CAN_MODE_MASK) != 0)
00005a  6854              LDR      r4,[r2,#4]
00005c  f0040403          AND      r4,r4,#3
000060  b10c              CBZ      r4,|L16.102|
;;;1059       {
;;;1060         status = CAN_ModeStatus_Failed;
000062  2000              MOVS     r0,#0
000064  e01c              B        |L16.160|
                  |L16.102|
;;;1061       }
;;;1062       else
;;;1063       {
;;;1064         status = CAN_ModeStatus_Success;
000066  2001              MOVS     r0,#1
000068  e01a              B        |L16.160|
                  |L16.106|
;;;1065       }
;;;1066     }
;;;1067     else  if (CAN_OperatingMode == CAN_OperatingMode_Sleep)
00006a  2b02              CMP      r3,#2
00006c  d117              BNE      |L16.158|
;;;1068     {
;;;1069       /* Request Sleep mode */
;;;1070       CANx->MCR = (uint32_t)((CANx->MCR & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
00006e  6814              LDR      r4,[r2,#0]
000070  f0240401          BIC      r4,r4,#1
000074  f0440402          ORR      r4,r4,#2
000078  6014              STR      r4,[r2,#0]
;;;1071   
;;;1072       /* Wait the acknowledge */
;;;1073       while (((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK) && (timeout!=0))
00007a  e000              B        |L16.126|
                  |L16.124|
;;;1074       {
;;;1075         timeout--;
00007c  1e49              SUBS     r1,r1,#1
                  |L16.126|
00007e  6854              LDR      r4,[r2,#4]            ;1073
000080  f0040403          AND      r4,r4,#3              ;1073
000084  2c02              CMP      r4,#2                 ;1073
000086  d001              BEQ      |L16.140|
000088  2900              CMP      r1,#0                 ;1073
00008a  d1f7              BNE      |L16.124|
                  |L16.140|
;;;1076       }
;;;1077       if ((CANx->MSR & CAN_MODE_MASK) != CAN_MSR_SLAK)
00008c  6854              LDR      r4,[r2,#4]
00008e  f0040403          AND      r4,r4,#3
000092  2c02              CMP      r4,#2
000094  d001              BEQ      |L16.154|
;;;1078       {
;;;1079         status = CAN_ModeStatus_Failed;
000096  2000              MOVS     r0,#0
000098  e002              B        |L16.160|
                  |L16.154|
;;;1080       }
;;;1081       else
;;;1082       {
;;;1083         status = CAN_ModeStatus_Success;
00009a  2001              MOVS     r0,#1
00009c  e000              B        |L16.160|
                  |L16.158|
;;;1084       }
;;;1085     }
;;;1086     else
;;;1087     {
;;;1088       status = CAN_ModeStatus_Failed;
00009e  2000              MOVS     r0,#0
                  |L16.160|
;;;1089     }
;;;1090   
;;;1091     return  (uint8_t) status;
;;;1092   }
0000a0  bd10              POP      {r4,pc}
;;;1093   
                          ENDP


                          AREA ||i.CAN_Receive||, CODE, READONLY, ALIGN=1

                  CAN_Receive PROC
;;;893      */
;;;894    void CAN_Receive(CAN_TypeDef* CANx, uint8_t FIFONumber, CanRxMsg* RxMessage)
000000  b510              PUSH     {r4,lr}
;;;895    {
;;;896      /* Check the parameters */
;;;897      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;898      assert_param(IS_CAN_FIFO(FIFONumber));
;;;899      /* Get the Id */
;;;900      RxMessage->IDE = (uint8_t)0x04 & CANx->sFIFOMailBox[FIFONumber].RIR;
000002  f50073d8          ADD      r3,r0,#0x1b0
000006  eb031301          ADD      r3,r3,r1,LSL #4
00000a  681b              LDR      r3,[r3,#0]
00000c  f0030304          AND      r3,r3,#4
000010  7213              STRB     r3,[r2,#8]
;;;901      if (RxMessage->IDE == CAN_Id_Standard)
000012  7a13              LDRB     r3,[r2,#8]
000014  b953              CBNZ     r3,|L17.44|
;;;902      {
;;;903        RxMessage->StdId = (uint32_t)0x000007FF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 21);
000016  f50073d8          ADD      r3,r0,#0x1b0
00001a  eb031301          ADD      r3,r3,r1,LSL #4
00001e  681b              LDR      r3,[r3,#0]
000020  f24074ff          MOV      r4,#0x7ff
000024  ea045353          AND      r3,r4,r3,LSR #21
000028  6013              STR      r3,[r2,#0]
00002a  e009              B        |L17.64|
                  |L17.44|
;;;904      }
;;;905      else
;;;906      {
;;;907        RxMessage->ExtId = (uint32_t)0x1FFFFFFF & (CANx->sFIFOMailBox[FIFONumber].RIR >> 3);
00002c  f50073d8          ADD      r3,r0,#0x1b0
000030  eb031301          ADD      r3,r3,r1,LSL #4
000034  681b              LDR      r3,[r3,#0]
000036  f06f4460          MVN      r4,#0xe0000000
00003a  ea0403d3          AND      r3,r4,r3,LSR #3
00003e  6053              STR      r3,[r2,#4]
                  |L17.64|
;;;908      }
;;;909      
;;;910      RxMessage->RTR = (uint8_t)0x02 & CANx->sFIFOMailBox[FIFONumber].RIR;
000040  f50073d8          ADD      r3,r0,#0x1b0
000044  eb031301          ADD      r3,r3,r1,LSL #4
000048  681b              LDR      r3,[r3,#0]
00004a  f0030302          AND      r3,r3,#2
00004e  7253              STRB     r3,[r2,#9]
;;;911      /* Get the DLC */
;;;912      RxMessage->DLC = (uint8_t)0x0F & CANx->sFIFOMailBox[FIFONumber].RDTR;
000050  f50073d8          ADD      r3,r0,#0x1b0
000054  eb031301          ADD      r3,r3,r1,LSL #4
000058  685b              LDR      r3,[r3,#4]
00005a  f003030f          AND      r3,r3,#0xf
00005e  7293              STRB     r3,[r2,#0xa]
;;;913      /* Get the FMI */
;;;914      RxMessage->FMI = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDTR >> 8);
000060  f50073d8          ADD      r3,r0,#0x1b0
000064  eb031301          ADD      r3,r3,r1,LSL #4
000068  685b              LDR      r3,[r3,#4]
00006a  0a1b              LSRS     r3,r3,#8
00006c  74d3              STRB     r3,[r2,#0x13]
;;;915      /* Get the data field */
;;;916      RxMessage->Data[0] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDLR;
00006e  f50073d8          ADD      r3,r0,#0x1b0
000072  eb031301          ADD      r3,r3,r1,LSL #4
000076  689b              LDR      r3,[r3,#8]
000078  72d3              STRB     r3,[r2,#0xb]
;;;917      RxMessage->Data[1] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 8);
00007a  f50073d8          ADD      r3,r0,#0x1b0
00007e  eb031301          ADD      r3,r3,r1,LSL #4
000082  689b              LDR      r3,[r3,#8]
000084  0a1c              LSRS     r4,r3,#8
000086  7314              STRB     r4,[r2,#0xc]
;;;918      RxMessage->Data[2] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 16);
000088  f50073d8          ADD      r3,r0,#0x1b0
00008c  eb031301          ADD      r3,r3,r1,LSL #4
000090  689b              LDR      r3,[r3,#8]
000092  0c1c              LSRS     r4,r3,#16
000094  7354              STRB     r4,[r2,#0xd]
;;;919      RxMessage->Data[3] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDLR >> 24);
000096  f50073d8          ADD      r3,r0,#0x1b0
00009a  eb031301          ADD      r3,r3,r1,LSL #4
00009e  689b              LDR      r3,[r3,#8]
0000a0  0e1b              LSRS     r3,r3,#24
0000a2  7393              STRB     r3,[r2,#0xe]
;;;920      RxMessage->Data[4] = (uint8_t)0xFF & CANx->sFIFOMailBox[FIFONumber].RDHR;
0000a4  f50073d8          ADD      r3,r0,#0x1b0
0000a8  eb031301          ADD      r3,r3,r1,LSL #4
0000ac  68db              LDR      r3,[r3,#0xc]
0000ae  73d3              STRB     r3,[r2,#0xf]
;;;921      RxMessage->Data[5] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 8);
0000b0  f50073d8          ADD      r3,r0,#0x1b0
0000b4  eb031301          ADD      r3,r3,r1,LSL #4
0000b8  68db              LDR      r3,[r3,#0xc]
0000ba  0a1c              LSRS     r4,r3,#8
0000bc  7414              STRB     r4,[r2,#0x10]
;;;922      RxMessage->Data[6] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 16);
0000be  f50073d8          ADD      r3,r0,#0x1b0
0000c2  eb031301          ADD      r3,r3,r1,LSL #4
0000c6  68db              LDR      r3,[r3,#0xc]
0000c8  0c1c              LSRS     r4,r3,#16
0000ca  7454              STRB     r4,[r2,#0x11]
;;;923      RxMessage->Data[7] = (uint8_t)0xFF & (CANx->sFIFOMailBox[FIFONumber].RDHR >> 24);
0000cc  f50073d8          ADD      r3,r0,#0x1b0
0000d0  eb031301          ADD      r3,r3,r1,LSL #4
0000d4  68db              LDR      r3,[r3,#0xc]
0000d6  0e1b              LSRS     r3,r3,#24
0000d8  7493              STRB     r3,[r2,#0x12]
;;;924      /* Release the FIFO */
;;;925      /* Release FIFO0 */
;;;926      if (FIFONumber == CAN_FIFO0)
0000da  b921              CBNZ     r1,|L17.230|
;;;927      {
;;;928        CANx->RF0R |= CAN_RF0R_RFOM0;
0000dc  68c3              LDR      r3,[r0,#0xc]
0000de  f0430320          ORR      r3,r3,#0x20
0000e2  60c3              STR      r3,[r0,#0xc]
0000e4  e003              B        |L17.238|
                  |L17.230|
;;;929      }
;;;930      /* Release FIFO1 */
;;;931      else /* FIFONumber == CAN_FIFO1 */
;;;932      {
;;;933        CANx->RF1R |= CAN_RF1R_RFOM1;
0000e6  6903              LDR      r3,[r0,#0x10]
0000e8  f0430320          ORR      r3,r3,#0x20
0000ec  6103              STR      r3,[r0,#0x10]
                  |L17.238|
;;;934      }
;;;935    }
0000ee  bd10              POP      {r4,pc}
;;;936    
                          ENDP


                          AREA ||i.CAN_SlaveStartBank||, CODE, READONLY, ALIGN=2

                  CAN_SlaveStartBank PROC
;;;605      */
;;;606    void CAN_SlaveStartBank(uint8_t CAN_BankNumber) 
000000  490b              LDR      r1,|L18.48|
;;;607    {
;;;608      /* Check the parameters */
;;;609      assert_param(IS_CAN_BANKNUMBER(CAN_BankNumber));
;;;610      
;;;611      /* Enter Initialisation mode for the filter */
;;;612      CAN1->FMR |= FMR_FINIT;
000002  6809              LDR      r1,[r1,#0]
000004  f0410101          ORR      r1,r1,#1
000008  4a09              LDR      r2,|L18.48|
00000a  6011              STR      r1,[r2,#0]
;;;613      
;;;614      /* Select the start slave bank */
;;;615      CAN1->FMR &= (uint32_t)0xFFFFC0F1 ;
00000c  4611              MOV      r1,r2
00000e  6809              LDR      r1,[r1,#0]
000010  f643720e          MOV      r2,#0x3f0e
000014  4391              BICS     r1,r1,r2
000016  4a06              LDR      r2,|L18.48|
000018  6011              STR      r1,[r2,#0]
;;;616      CAN1->FMR |= (uint32_t)(CAN_BankNumber)<<8;
00001a  4611              MOV      r1,r2
00001c  6809              LDR      r1,[r1,#0]
00001e  ea412100          ORR      r1,r1,r0,LSL #8
000022  6011              STR      r1,[r2,#0]
;;;617      
;;;618      /* Leave Initialisation mode for the filter */
;;;619      CAN1->FMR &= ~FMR_FINIT;
000024  4611              MOV      r1,r2
000026  6809              LDR      r1,[r1,#0]
000028  f0210101          BIC      r1,r1,#1
00002c  6011              STR      r1,[r2,#0]
;;;620    }
00002e  4770              BX       lr
;;;621    #endif /* STM32F413_423xx */
                          ENDP

                  |L18.48|
                          DCD      0x40006600

                          AREA ||i.CAN_Sleep||, CODE, READONLY, ALIGN=1

                  CAN_Sleep PROC
;;;1099     */
;;;1100   uint8_t CAN_Sleep(CAN_TypeDef* CANx)
000000  4601              MOV      r1,r0
;;;1101   {
;;;1102     uint8_t sleepstatus = CAN_Sleep_Failed;
000002  2000              MOVS     r0,#0
;;;1103     
;;;1104     /* Check the parameters */
;;;1105     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1106       
;;;1107     /* Request Sleep mode */
;;;1108      CANx->MCR = (((CANx->MCR) & (uint32_t)(~(uint32_t)CAN_MCR_INRQ)) | CAN_MCR_SLEEP);
000004  680a              LDR      r2,[r1,#0]
000006  f0220201          BIC      r2,r2,#1
00000a  f0420202          ORR      r2,r2,#2
00000e  600a              STR      r2,[r1,#0]
;;;1109      
;;;1110     /* Sleep mode status */
;;;1111     if ((CANx->MSR & (CAN_MSR_SLAK|CAN_MSR_INAK)) == CAN_MSR_SLAK)
000010  684a              LDR      r2,[r1,#4]
000012  f0020203          AND      r2,r2,#3
000016  2a02              CMP      r2,#2
000018  d100              BNE      |L19.28|
;;;1112     {
;;;1113       /* Sleep mode not entered */
;;;1114       sleepstatus =  CAN_Sleep_Ok;
00001a  2001              MOVS     r0,#1
                  |L19.28|
;;;1115     }
;;;1116     /* return sleep mode status */
;;;1117      return (uint8_t)sleepstatus;
;;;1118   }
00001c  4770              BX       lr
;;;1119   
                          ENDP


                          AREA ||i.CAN_StructInit||, CODE, READONLY, ALIGN=1

                  CAN_StructInit PROC
;;;539      */
;;;540    void CAN_StructInit(CAN_InitTypeDef* CAN_InitStruct)
000000  2100              MOVS     r1,#0
;;;541    {
;;;542      /* Reset CAN init structure parameters values */
;;;543      
;;;544      /* Initialize the time triggered communication mode */
;;;545      CAN_InitStruct->CAN_TTCM = DISABLE;
000002  7181              STRB     r1,[r0,#6]
;;;546      
;;;547      /* Initialize the automatic bus-off management */
;;;548      CAN_InitStruct->CAN_ABOM = DISABLE;
000004  71c1              STRB     r1,[r0,#7]
;;;549      
;;;550      /* Initialize the automatic wake-up mode */
;;;551      CAN_InitStruct->CAN_AWUM = DISABLE;
000006  7201              STRB     r1,[r0,#8]
;;;552      
;;;553      /* Initialize the no automatic retransmission */
;;;554      CAN_InitStruct->CAN_NART = DISABLE;
000008  7241              STRB     r1,[r0,#9]
;;;555      
;;;556      /* Initialize the receive FIFO locked mode */
;;;557      CAN_InitStruct->CAN_RFLM = DISABLE;
00000a  7281              STRB     r1,[r0,#0xa]
;;;558      
;;;559      /* Initialize the transmit FIFO priority */
;;;560      CAN_InitStruct->CAN_TXFP = DISABLE;
00000c  72c1              STRB     r1,[r0,#0xb]
;;;561      
;;;562      /* Initialize the CAN_Mode member */
;;;563      CAN_InitStruct->CAN_Mode = CAN_Mode_Normal;
00000e  7081              STRB     r1,[r0,#2]
;;;564      
;;;565      /* Initialize the CAN_SJW member */
;;;566      CAN_InitStruct->CAN_SJW = CAN_SJW_1tq;
000010  70c1              STRB     r1,[r0,#3]
;;;567      
;;;568      /* Initialize the CAN_BS1 member */
;;;569      CAN_InitStruct->CAN_BS1 = CAN_BS1_4tq;
000012  2103              MOVS     r1,#3
000014  7101              STRB     r1,[r0,#4]
;;;570      
;;;571      /* Initialize the CAN_BS2 member */
;;;572      CAN_InitStruct->CAN_BS2 = CAN_BS2_3tq;
000016  2102              MOVS     r1,#2
000018  7141              STRB     r1,[r0,#5]
;;;573      
;;;574      /* Initialize the CAN_Prescaler member */
;;;575      CAN_InitStruct->CAN_Prescaler = 1;
00001a  2101              MOVS     r1,#1
00001c  8001              STRH     r1,[r0,#0]
;;;576    }
00001e  4770              BX       lr
;;;577    
                          ENDP


                          AREA ||i.CAN_TTComModeCmd||, CODE, READONLY, ALIGN=1

                  CAN_TTComModeCmd PROC
;;;662      */
;;;663    void CAN_TTComModeCmd(CAN_TypeDef* CANx, FunctionalState NewState)
000000  b1e1              CBZ      r1,|L21.60|
;;;664    {
;;;665      /* Check the parameters */
;;;666      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;667      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;668      if (NewState != DISABLE)
;;;669      {
;;;670        /* Enable the TTCM mode */
;;;671        CANx->MCR |= CAN_MCR_TTCM;
000002  6802              LDR      r2,[r0,#0]
000004  f0420280          ORR      r2,r2,#0x80
000008  6002              STR      r2,[r0,#0]
;;;672    
;;;673        /* Set TGT bits */
;;;674        CANx->sTxMailBox[0].TDTR |= ((uint32_t)CAN_TDT0R_TGT);
00000a  f44f72c2          MOV      r2,#0x184
00000e  5812              LDR      r2,[r2,r0]
000010  f4427380          ORR      r3,r2,#0x100
000014  f44f72c2          MOV      r2,#0x184
000018  5013              STR      r3,[r2,r0]
;;;675        CANx->sTxMailBox[1].TDTR |= ((uint32_t)CAN_TDT1R_TGT);
00001a  f44f72ca          MOV      r2,#0x194
00001e  5812              LDR      r2,[r2,r0]
000020  f4427380          ORR      r3,r2,#0x100
000024  f44f72ca          MOV      r2,#0x194
000028  5013              STR      r3,[r2,r0]
;;;676        CANx->sTxMailBox[2].TDTR |= ((uint32_t)CAN_TDT2R_TGT);
00002a  f44f72d2          MOV      r2,#0x1a4
00002e  5812              LDR      r2,[r2,r0]
000030  f4427380          ORR      r3,r2,#0x100
000034  f44f72d2          MOV      r2,#0x1a4
000038  5013              STR      r3,[r2,r0]
00003a  e01b              B        |L21.116|
                  |L21.60|
;;;677      }
;;;678      else
;;;679      {
;;;680        /* Disable the TTCM mode */
;;;681        CANx->MCR &= (uint32_t)(~(uint32_t)CAN_MCR_TTCM);
00003c  6802              LDR      r2,[r0,#0]
00003e  f0220280          BIC      r2,r2,#0x80
000042  6002              STR      r2,[r0,#0]
;;;682    
;;;683        /* Reset TGT bits */
;;;684        CANx->sTxMailBox[0].TDTR &= ((uint32_t)~CAN_TDT0R_TGT);
000044  f44f72c2          MOV      r2,#0x184
000048  5812              LDR      r2,[r2,r0]
00004a  f4227380          BIC      r3,r2,#0x100
00004e  f44f72c2          MOV      r2,#0x184
000052  5013              STR      r3,[r2,r0]
;;;685        CANx->sTxMailBox[1].TDTR &= ((uint32_t)~CAN_TDT1R_TGT);
000054  f44f72ca          MOV      r2,#0x194
000058  5812              LDR      r2,[r2,r0]
00005a  f4227380          BIC      r3,r2,#0x100
00005e  f44f72ca          MOV      r2,#0x194
000062  5013              STR      r3,[r2,r0]
;;;686        CANx->sTxMailBox[2].TDTR &= ((uint32_t)~CAN_TDT2R_TGT);
000064  f44f72d2          MOV      r2,#0x1a4
000068  5812              LDR      r2,[r2,r0]
00006a  f4227380          BIC      r3,r2,#0x100
00006e  f44f72d2          MOV      r2,#0x1a4
000072  5013              STR      r3,[r2,r0]
                  |L21.116|
;;;687      }
;;;688    }
000074  4770              BX       lr
;;;689    /**
                          ENDP


                          AREA ||i.CAN_Transmit||, CODE, READONLY, ALIGN=1

                  CAN_Transmit PROC
;;;717      */
;;;718    uint8_t CAN_Transmit(CAN_TypeDef* CANx, CanTxMsg* TxMessage)
000000  b510              PUSH     {r4,lr}
;;;719    {
000002  4602              MOV      r2,r0
;;;720      uint8_t transmit_mailbox = 0;
000004  2000              MOVS     r0,#0
;;;721      /* Check the parameters */
;;;722      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;723      assert_param(IS_CAN_IDTYPE(TxMessage->IDE));
;;;724      assert_param(IS_CAN_RTR(TxMessage->RTR));
;;;725      assert_param(IS_CAN_DLC(TxMessage->DLC));
;;;726    
;;;727      /* Select one empty transmit mailbox */
;;;728      if ((CANx->TSR&CAN_TSR_TME0) == CAN_TSR_TME0)
000006  6893              LDR      r3,[r2,#8]
000008  f0036380          AND      r3,r3,#0x4000000
00000c  f1b36f80          CMP      r3,#0x4000000
000010  d100              BNE      |L22.20|
;;;729      {
;;;730        transmit_mailbox = 0;
000012  e010              B        |L22.54|
                  |L22.20|
;;;731      }
;;;732      else if ((CANx->TSR&CAN_TSR_TME1) == CAN_TSR_TME1)
000014  6893              LDR      r3,[r2,#8]
000016  f0036300          AND      r3,r3,#0x8000000
00001a  f1b36f00          CMP      r3,#0x8000000
00001e  d101              BNE      |L22.36|
;;;733      {
;;;734        transmit_mailbox = 1;
000020  2001              MOVS     r0,#1
000022  e008              B        |L22.54|
                  |L22.36|
;;;735      }
;;;736      else if ((CANx->TSR&CAN_TSR_TME2) == CAN_TSR_TME2)
000024  6893              LDR      r3,[r2,#8]
000026  f0035380          AND      r3,r3,#0x10000000
00002a  f1b35f80          CMP      r3,#0x10000000
00002e  d101              BNE      |L22.52|
;;;737      {
;;;738        transmit_mailbox = 2;
000030  2002              MOVS     r0,#2
000032  e000              B        |L22.54|
                  |L22.52|
;;;739      }
;;;740      else
;;;741      {
;;;742        transmit_mailbox = CAN_TxStatus_NoMailBox;
000034  2004              MOVS     r0,#4
                  |L22.54|
;;;743      }
;;;744    
;;;745      if (transmit_mailbox != CAN_TxStatus_NoMailBox)
000036  2804              CMP      r0,#4
000038  d074              BEQ      |L22.292|
;;;746      {
;;;747        /* Set up the Id */
;;;748        CANx->sTxMailBox[transmit_mailbox].TIR &= TMIDxR_TXRQ;
00003a  f50273c0          ADD      r3,r2,#0x180
00003e  eb031300          ADD      r3,r3,r0,LSL #4
000042  681b              LDR      r3,[r3,#0]
000044  f0030401          AND      r4,r3,#1
000048  f50273c0          ADD      r3,r2,#0x180
00004c  eb031300          ADD      r3,r3,r0,LSL #4
000050  601c              STR      r4,[r3,#0]
;;;749        if (TxMessage->IDE == CAN_Id_Standard)
000052  7a0b              LDRB     r3,[r1,#8]
000054  b97b              CBNZ     r3,|L22.118|
;;;750        {
;;;751          assert_param(IS_CAN_STDID(TxMessage->StdId));  
;;;752          CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->StdId << 21) | \
000056  7a4b              LDRB     r3,[r1,#9]
000058  880c              LDRH     r4,[r1,#0]
00005a  ea435344          ORR      r3,r3,r4,LSL #21
00005e  f50274c0          ADD      r4,r2,#0x180
000062  eb041400          ADD      r4,r4,r0,LSL #4
000066  6824              LDR      r4,[r4,#0]
000068  4323              ORRS     r3,r3,r4
00006a  f50274c0          ADD      r4,r2,#0x180
00006e  eb041400          ADD      r4,r4,r0,LSL #4
000072  6023              STR      r3,[r4,#0]
000074  e010              B        |L22.152|
                  |L22.118|
;;;753                                                      TxMessage->RTR);
;;;754        }
;;;755        else
;;;756        {
;;;757          assert_param(IS_CAN_EXTID(TxMessage->ExtId));
;;;758          CANx->sTxMailBox[transmit_mailbox].TIR |= ((TxMessage->ExtId << 3) | \
000076  7a0b              LDRB     r3,[r1,#8]
000078  684c              LDR      r4,[r1,#4]
00007a  ea4303c4          ORR      r3,r3,r4,LSL #3
00007e  7a4c              LDRB     r4,[r1,#9]
000080  4323              ORRS     r3,r3,r4
000082  f50274c0          ADD      r4,r2,#0x180
000086  eb041400          ADD      r4,r4,r0,LSL #4
00008a  6824              LDR      r4,[r4,#0]
00008c  4323              ORRS     r3,r3,r4
00008e  f50274c0          ADD      r4,r2,#0x180
000092  eb041400          ADD      r4,r4,r0,LSL #4
000096  6023              STR      r3,[r4,#0]
                  |L22.152|
;;;759                                                      TxMessage->IDE | \
;;;760                                                      TxMessage->RTR);
;;;761        }
;;;762        
;;;763        /* Set up the DLC */
;;;764        TxMessage->DLC &= (uint8_t)0x0000000F;
000098  7a8b              LDRB     r3,[r1,#0xa]
00009a  f003030f          AND      r3,r3,#0xf
00009e  728b              STRB     r3,[r1,#0xa]
;;;765        CANx->sTxMailBox[transmit_mailbox].TDTR &= (uint32_t)0xFFFFFFF0;
0000a0  f50273c0          ADD      r3,r2,#0x180
0000a4  eb031300          ADD      r3,r3,r0,LSL #4
0000a8  685b              LDR      r3,[r3,#4]
0000aa  f023040f          BIC      r4,r3,#0xf
0000ae  f50273c0          ADD      r3,r2,#0x180
0000b2  eb031300          ADD      r3,r3,r0,LSL #4
0000b6  605c              STR      r4,[r3,#4]
;;;766        CANx->sTxMailBox[transmit_mailbox].TDTR |= TxMessage->DLC;
0000b8  f50273c0          ADD      r3,r2,#0x180
0000bc  eb031300          ADD      r3,r3,r0,LSL #4
0000c0  685b              LDR      r3,[r3,#4]
0000c2  7a8c              LDRB     r4,[r1,#0xa]
0000c4  4323              ORRS     r3,r3,r4
0000c6  f50274c0          ADD      r4,r2,#0x180
0000ca  eb041400          ADD      r4,r4,r0,LSL #4
0000ce  6063              STR      r3,[r4,#4]
;;;767    
;;;768        /* Set up the data field */
;;;769        CANx->sTxMailBox[transmit_mailbox].TDLR = (((uint32_t)TxMessage->Data[3] << 24) | 
0000d0  7b8b              LDRB     r3,[r1,#0xe]
0000d2  061c              LSLS     r4,r3,#24
0000d4  7b4b              LDRB     r3,[r1,#0xd]
0000d6  ea444403          ORR      r4,r4,r3,LSL #16
0000da  7b0b              LDRB     r3,[r1,#0xc]
0000dc  ea442303          ORR      r3,r4,r3,LSL #8
0000e0  7acc              LDRB     r4,[r1,#0xb]
0000e2  4323              ORRS     r3,r3,r4
0000e4  f50274c0          ADD      r4,r2,#0x180
0000e8  eb041400          ADD      r4,r4,r0,LSL #4
0000ec  60a3              STR      r3,[r4,#8]
;;;770                                                 ((uint32_t)TxMessage->Data[2] << 16) |
;;;771                                                 ((uint32_t)TxMessage->Data[1] << 8) | 
;;;772                                                 ((uint32_t)TxMessage->Data[0]));
;;;773        CANx->sTxMailBox[transmit_mailbox].TDHR = (((uint32_t)TxMessage->Data[7] << 24) | 
0000ee  7c8b              LDRB     r3,[r1,#0x12]
0000f0  061c              LSLS     r4,r3,#24
0000f2  7c4b              LDRB     r3,[r1,#0x11]
0000f4  ea444403          ORR      r4,r4,r3,LSL #16
0000f8  7c0b              LDRB     r3,[r1,#0x10]
0000fa  ea442303          ORR      r3,r4,r3,LSL #8
0000fe  7bcc              LDRB     r4,[r1,#0xf]
000100  4323              ORRS     r3,r3,r4
000102  f50274c0          ADD      r4,r2,#0x180
000106  eb041400          ADD      r4,r4,r0,LSL #4
00010a  60e3              STR      r3,[r4,#0xc]
;;;774                                                 ((uint32_t)TxMessage->Data[6] << 16) |
;;;775                                                 ((uint32_t)TxMessage->Data[5] << 8) |
;;;776                                                 ((uint32_t)TxMessage->Data[4]));
;;;777        /* Request transmission */
;;;778        CANx->sTxMailBox[transmit_mailbox].TIR |= TMIDxR_TXRQ;
00010c  f50273c0          ADD      r3,r2,#0x180
000110  eb031300          ADD      r3,r3,r0,LSL #4
000114  681b              LDR      r3,[r3,#0]
000116  f0430401          ORR      r4,r3,#1
00011a  f50273c0          ADD      r3,r2,#0x180
00011e  eb031300          ADD      r3,r3,r0,LSL #4
000122  601c              STR      r4,[r3,#0]
                  |L22.292|
;;;779      }
;;;780      return transmit_mailbox;
;;;781    }
000124  bd10              POP      {r4,pc}
;;;782    
                          ENDP


                          AREA ||i.CAN_TransmitStatus||, CODE, READONLY, ALIGN=2

                  CAN_TransmitStatus PROC
;;;790      */
;;;791    uint8_t CAN_TransmitStatus(CAN_TypeDef* CANx, uint8_t TransmitMailbox)
000000  b510              PUSH     {r4,lr}
;;;792    {
000002  4602              MOV      r2,r0
;;;793      uint32_t state = 0;
000004  2300              MOVS     r3,#0
;;;794    
;;;795      /* Check the parameters */
;;;796      assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;797      assert_param(IS_CAN_TRANSMITMAILBOX(TransmitMailbox));
;;;798     
;;;799      switch (TransmitMailbox)
000006  b121              CBZ      r1,|L23.18|
000008  2901              CMP      r1,#1
00000a  d007              BEQ      |L23.28|
00000c  2902              CMP      r1,#2
00000e  d10f              BNE      |L23.48|
000010  e009              B        |L23.38|
                  |L23.18|
;;;800      {
;;;801        case (CAN_TXMAILBOX_0): 
;;;802          state =   CANx->TSR &  (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0);
000012  6890              LDR      r0,[r2,#8]
000014  4c1d              LDR      r4,|L23.140|
000016  ea000304          AND      r3,r0,r4
;;;803          break;
00001a  e00b              B        |L23.52|
                  |L23.28|
;;;804        case (CAN_TXMAILBOX_1): 
;;;805          state =   CANx->TSR &  (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1);
00001c  6890              LDR      r0,[r2,#8]
00001e  4c1c              LDR      r4,|L23.144|
000020  ea000304          AND      r3,r0,r4
;;;806          break;
000024  e006              B        |L23.52|
                  |L23.38|
;;;807        case (CAN_TXMAILBOX_2): 
;;;808          state =   CANx->TSR &  (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2);
000026  6890              LDR      r0,[r2,#8]
000028  4c1a              LDR      r4,|L23.148|
00002a  ea000304          AND      r3,r0,r4
;;;809          break;
00002e  e001              B        |L23.52|
                  |L23.48|
;;;810        default:
;;;811          state = CAN_TxStatus_Failed;
000030  2300              MOVS     r3,#0
;;;812          break;
000032  bf00              NOP      
                  |L23.52|
000034  bf00              NOP                            ;803
;;;813      }
;;;814      switch (state)
000036  4c18              LDR      r4,|L23.152|
000038  1b18              SUBS     r0,r3,r4
00003a  42a3              CMP      r3,r4
00003c  d016              BEQ      |L23.108|
00003e  dc07              BGT      |L23.80|
000040  b183              CBZ      r3,|L23.100|
000042  f06f6080          MVN      r0,#0x4000000
000046  4418              ADD      r0,r0,r3
000048  b170              CBZ      r0,|L23.104|
00004a  2802              CMP      r0,#2
00004c  d118              BNE      |L23.128|
00004e  e011              B        |L23.116|
                  |L23.80|
000050  f5b07f00          CMP      r0,#0x200
000054  d010              BEQ      |L23.120|
000056  4c11              LDR      r4,|L23.156|
000058  4420              ADD      r0,r0,r4
00005a  b148              CBZ      r0,|L23.112|
00005c  f5b03f00          CMP      r0,#0x20000
000060  d10e              BNE      |L23.128|
000062  e00b              B        |L23.124|
                  |L23.100|
;;;815      {
;;;816          /* transmit pending  */
;;;817        case (0x0): state = CAN_TxStatus_Pending;
000064  2302              MOVS     r3,#2
;;;818          break;
000066  e00d              B        |L23.132|
                  |L23.104|
;;;819          /* transmit failed  */
;;;820         case (CAN_TSR_RQCP0 | CAN_TSR_TME0): state = CAN_TxStatus_Failed;
000068  2300              MOVS     r3,#0
;;;821          break;
00006a  e00b              B        |L23.132|
                  |L23.108|
;;;822         case (CAN_TSR_RQCP1 | CAN_TSR_TME1): state = CAN_TxStatus_Failed;
00006c  2300              MOVS     r3,#0
;;;823          break;
00006e  e009              B        |L23.132|
                  |L23.112|
;;;824         case (CAN_TSR_RQCP2 | CAN_TSR_TME2): state = CAN_TxStatus_Failed;
000070  2300              MOVS     r3,#0
;;;825          break;
000072  e007              B        |L23.132|
                  |L23.116|
;;;826          /* transmit succeeded  */
;;;827        case (CAN_TSR_RQCP0 | CAN_TSR_TXOK0 | CAN_TSR_TME0):state = CAN_TxStatus_Ok;
000074  2301              MOVS     r3,#1
;;;828          break;
000076  e005              B        |L23.132|
                  |L23.120|
;;;829        case (CAN_TSR_RQCP1 | CAN_TSR_TXOK1 | CAN_TSR_TME1):state = CAN_TxStatus_Ok;
000078  2301              MOVS     r3,#1
;;;830          break;
00007a  e003              B        |L23.132|
                  |L23.124|
;;;831        case (CAN_TSR_RQCP2 | CAN_TSR_TXOK2 | CAN_TSR_TME2):state = CAN_TxStatus_Ok;
00007c  2301              MOVS     r3,#1
;;;832          break;
00007e  e001              B        |L23.132|
                  |L23.128|
;;;833        default: state = CAN_TxStatus_Failed;
000080  2300              MOVS     r3,#0
;;;834          break;
000082  bf00              NOP      
                  |L23.132|
000084  bf00              NOP                            ;818
;;;835      }
;;;836      return (uint8_t) state;
000086  b2d8              UXTB     r0,r3
;;;837    }
000088  bd10              POP      {r4,pc}
;;;838    
                          ENDP

00008a  0000              DCW      0x0000
                  |L23.140|
                          DCD      0x04000003
                  |L23.144|
                          DCD      0x08000300
                  |L23.148|
                          DCD      0x10030000
                  |L23.152|
                          DCD      0x08000100
                  |L23.156|
                          DCD      0xf7ff0100

                          AREA ||i.CAN_WakeUp||, CODE, READONLY, ALIGN=1

                  CAN_WakeUp PROC
;;;1125     */
;;;1126   uint8_t CAN_WakeUp(CAN_TypeDef* CANx)
000000  4601              MOV      r1,r0
;;;1127   {
;;;1128     uint32_t wait_slak = SLAK_TIMEOUT;
000002  f64f72ff          MOV      r2,#0xffff
;;;1129     uint8_t wakeupstatus = CAN_WakeUp_Failed;
000006  2000              MOVS     r0,#0
;;;1130     
;;;1131     /* Check the parameters */
;;;1132     assert_param(IS_CAN_ALL_PERIPH(CANx));
;;;1133       
;;;1134     /* Wake up request */
;;;1135     CANx->MCR &= ~(uint32_t)CAN_MCR_SLEEP;
000008  680b              LDR      r3,[r1,#0]
00000a  f0230302          BIC      r3,r3,#2
00000e  600b              STR      r3,[r1,#0]
;;;1136       
;;;1137     /* Sleep mode status */
;;;1138     while(((CANx->MSR & CAN_MSR_SLAK) == CAN_MSR_SLAK)&&(wait_slak!=0x00))
000010  e000              B        |L24.20|
                  |L24.18|
;;;1139     {
;;;1140      wait_slak--;
000012  1e52              SUBS     r2,r2,#1
                  |L24.20|
000014  684b              LDR      r3,[r1,#4]            ;1138
000016  f0030302          AND      r3,r3,#2              ;1138
00001a  2b02              CMP      r3,#2                 ;1138
00001c  d101              BNE      |L24.34|
00001e  2a00              CMP      r2,#0                 ;1138
000020  d1f7              BNE      |L24.18|
                  |L24.34|
;;;1141     }
;;;1142     if((CANx->MSR & CAN_MSR_SLAK) != CAN_MSR_SLAK)
000022  684b              LDR      r3,[r1,#4]
000024  f0030302          AND      r3,r3,#2
000028  2b02              CMP      r3,#2
00002a  d000              BEQ      |L24.46|
;;;1143     {
;;;1144      /* wake up done : Sleep mode exited */
;;;1145       wakeupstatus = CAN_WakeUp_Ok;
00002c  2001              MOVS     r0,#1
                  |L24.46|
;;;1146     }
;;;1147     /* return wakeup status */
;;;1148     return (uint8_t)wakeupstatus;
;;;1149   }
00002e  4770              BX       lr
;;;1150   /**
                          ENDP


                          AREA ||i.CheckITStatus||, CODE, READONLY, ALIGN=1

                  CheckITStatus PROC
;;;1826     */
;;;1827   static ITStatus CheckITStatus(uint32_t CAN_Reg, uint32_t It_Bit)
000000  4602              MOV      r2,r0
;;;1828   {
;;;1829     ITStatus pendingbitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;1830     
;;;1831     if ((CAN_Reg & It_Bit) != (uint32_t)RESET)
000004  ea020301          AND      r3,r2,r1
000008  b10b              CBZ      r3,|L25.14|
;;;1832     {
;;;1833       /* CAN_IT is set */
;;;1834       pendingbitstatus = SET;
00000a  2001              MOVS     r0,#1
00000c  e000              B        |L25.16|
                  |L25.14|
;;;1835     }
;;;1836     else
;;;1837     {
;;;1838       /* CAN_IT is reset */
;;;1839       pendingbitstatus = RESET;
00000e  2000              MOVS     r0,#0
                  |L25.16|
;;;1840     }
;;;1841     return pendingbitstatus;
;;;1842   }
000010  4770              BX       lr
;;;1843   
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\FWLIB\\src\\stm32f4xx_can.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_can_c_347dae01____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___15_stm32f4xx_can_c_347dae01____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_can_c_347dae01____REVSH|
#line 153
|__asm___15_stm32f4xx_can_c_347dae01____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_can_c_347dae01____RRX|
#line 328
|__asm___15_stm32f4xx_can_c_347dae01____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
