; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\rm_pid.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\rm_pid.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\rm_pid.crf ..\BSP\rm_pid.c]
                          THUMB

                          AREA ||i.ALL_Pid_Incr_Configuration||, CODE, READONLY, ALIGN=2

                  ALL_Pid_Incr_Configuration PROC
;;;54     
;;;55     void ALL_Pid_Incr_Configuration()
000000  b50e              PUSH     {r1-r3,lr}
;;;56     {
;;;57     	float PID_INCR_CHASSIS[3] = {10.0f, 1.0f, 0.0f};
000002  4a14              LDR      r2,|L1.84|
000004  ca07              LDM      r2,{r0-r2}
000006  e88d0007          STM      sp,{r0-r2}
;;;58     	
;;;59     	pid_incr_init(&pid_incr[FR], PID_INCR_CHASSIS, 5000.0f, 50.0f);
00000a  eddf0a13          VLDR     s1,|L1.88|
00000e  ed9f0a13          VLDR     s0,|L1.92|
000012  4669              MOV      r1,sp
000014  4812              LDR      r0,|L1.96|
000016  f7fffffe          BL       pid_incr_init
;;;60     	pid_incr_init(&pid_incr[FL], PID_INCR_CHASSIS, 5000.0f, 50.0f);
00001a  eddf0a0f          VLDR     s1,|L1.88|
00001e  ed9f0a0f          VLDR     s0,|L1.92|
000022  4669              MOV      r1,sp
000024  480e              LDR      r0,|L1.96|
000026  3044              ADDS     r0,r0,#0x44
000028  f7fffffe          BL       pid_incr_init
;;;61     	pid_incr_init(&pid_incr[BL], PID_INCR_CHASSIS, 5000.0f, 50.0f);
00002c  eddf0a0a          VLDR     s1,|L1.88|
000030  ed9f0a0a          VLDR     s0,|L1.92|
000034  4669              MOV      r1,sp
000036  480a              LDR      r0,|L1.96|
000038  3088              ADDS     r0,r0,#0x88
00003a  f7fffffe          BL       pid_incr_init
;;;62     	pid_incr_init(&pid_incr[BR], PID_INCR_CHASSIS, 5000.0f, 50.0f);
00003e  eddf0a06          VLDR     s1,|L1.88|
000042  ed9f0a06          VLDR     s0,|L1.92|
000046  4669              MOV      r1,sp
000048  4805              LDR      r0,|L1.96|
00004a  30cc              ADDS     r0,r0,#0xcc
00004c  f7fffffe          BL       pid_incr_init
;;;63     	
;;;64     	
;;;65     }
000050  bd0e              POP      {r1-r3,pc}
;;;66     
                          ENDP

000052  0000              DCW      0x0000
                  |L1.84|
                          DCD      ||.constdata||
                  |L1.88|
000058  42480000          DCFS     0x42480000 ; 50
                  |L1.92|
00005c  459c4000          DCFS     0x459c4000 ; 5000
                  |L1.96|
                          DCD      pid_incr

                          AREA ||i.All_Pid_Configuration||, CODE, READONLY, ALIGN=2

                  All_Pid_Configuration PROC
;;;150    //(&pid[i], kp, ki, kd, poutmax, ioutmax, doutmax, outmax)
;;;151    void All_Pid_Configuration(PID pid[])
000000  b510              PUSH     {r4,lr}
;;;152    {	
000002  4604              MOV      r4,r0
;;;153    	pid[PITCH_ANGLE].f_pid_init = pid_init;
000004  4984              LDR      r1,|L2.536|
000006  f44f70ba          MOV      r0,#0x174
00000a  5101              STR      r1,[r0,r4]
;;;154    	pid[PITCH_ANGLE].f_pid_init(&pid[PITCH_ANGLE], 50.0f, 0.0f, 0.0f, 250.0f, 50.0f, 100.0f, 250.0f);
00000c  5901              LDR      r1,[r0,r4]
00000e  ed9f3a83          VLDR     s6,|L2.540|
000012  eddf2a83          VLDR     s5,|L2.544|
000016  ed9f2a83          VLDR     s4,|L2.548|
00001a  eddf1a80          VLDR     s3,|L2.540|
00001e  ed9f1a82          VLDR     s2,|L2.552|
000022  eddf0a81          VLDR     s1,|L2.552|
000026  ed9f0a7f          VLDR     s0,|L2.548|
00002a  f5047098          ADD      r0,r4,#0x130
00002e  4788              BLX      r1
;;;155    	
;;;156    	pid[PITCH_SPEED].f_pid_init = pid_init;
000030  4979              LDR      r1,|L2.536|
000032  f44f70e0          MOV      r0,#0x1c0
000036  5101              STR      r1,[r0,r4]
;;;157    	pid[PITCH_SPEED].f_pid_init(&pid[PITCH_SPEED], 45.0f, 1.0f, 80.0f, 5000.0f, 500.0f, 1000.0f, 5000.0f);
000038  5901              LDR      r1,[r0,r4]
00003a  ed9f3a7c          VLDR     s6,|L2.556|
00003e  eddf2a7c          VLDR     s5,|L2.560|
000042  ed9f2a7c          VLDR     s4,|L2.564|
000046  eddf1a79          VLDR     s3,|L2.556|
00004a  ed9f1a7b          VLDR     s2,|L2.568|
00004e  eef70a00          VMOV.F32 s1,#1.00000000
000052  ed9f0a7a          VLDR     s0,|L2.572|
000056  f50470be          ADD      r0,r4,#0x17c
00005a  4788              BLX      r1
;;;158    
;;;159    	pid[YAW_ANGLE].f_pid_init = pid_init;
00005c  496e              LDR      r1,|L2.536|
00005e  f44f7003          MOV      r0,#0x20c
000062  5101              STR      r1,[r0,r4]
;;;160    	pid[YAW_ANGLE].f_pid_init(&pid[YAW_ANGLE], 25.0f, 0.0f, 0.0f, 1000.0f, 50.0f, 500.0f, 1000.0f);
000064  5901              LDR      r1,[r0,r4]
000066  ed9f3a72          VLDR     s6,|L2.560|
00006a  eddf2a72          VLDR     s5,|L2.564|
00006e  ed9f2a6d          VLDR     s4,|L2.548|
000072  eddf1a6f          VLDR     s3,|L2.560|
000076  ed9f1a6c          VLDR     s2,|L2.552|
00007a  eddf0a6b          VLDR     s1,|L2.552|
00007e  eeb30a09          VMOV.F32 s0,#25.00000000
000082  f50470e4          ADD      r0,r4,#0x1c8
000086  4788              BLX      r1
;;;161    
;;;162    	pid[YAW_SPEED].f_pid_init = pid_init;
000088  4963              LDR      r1,|L2.536|
00008a  f44f7016          MOV      r0,#0x258
00008e  5101              STR      r1,[r0,r4]
;;;163    	pid[YAW_SPEED].f_pid_init(&pid[YAW_SPEED], 320.0f, 4.0f, 80.0f, 30000.0f, 1000.0f, 10000.0f, 30000.0f);
000090  5901              LDR      r1,[r0,r4]
000092  ed9f3a6b          VLDR     s6,|L2.576|
000096  eddf2a6b          VLDR     s5,|L2.580|
00009a  ed9f2a65          VLDR     s4,|L2.560|
00009e  eddf1a68          VLDR     s3,|L2.576|
0000a2  ed9f1a65          VLDR     s2,|L2.568|
0000a6  eef10a00          VMOV.F32 s1,#4.00000000
0000aa  ed9f0a67          VLDR     s0,|L2.584|
0000ae  f5047005          ADD      r0,r4,#0x214
0000b2  4788              BLX      r1
;;;164    	
;;;165    	pid[CHASSIS_FOLLOW].f_pid_init = pid_init;
0000b4  4958              LDR      r1,|L2.536|
0000b6  f44f7029          MOV      r0,#0x2a4
0000ba  5101              STR      r1,[r0,r4]
;;;166    	pid[CHASSIS_FOLLOW].f_pid_init(&pid[CHASSIS_FOLLOW], 10.0f, 0.0f, 30.0f, 500.0f, 0.0f, 500.0f, 500.0f);
0000bc  5901              LDR      r1,[r0,r4]
0000be  ed9f3a5d          VLDR     s6,|L2.564|
0000c2  eddf2a5c          VLDR     s5,|L2.564|
0000c6  ed9f2a58          VLDR     s4,|L2.552|
0000ca  eddf1a5a          VLDR     s3,|L2.564|
0000ce  eeb31a0e          VMOV.F32 s2,#30.00000000
0000d2  eddf0a55          VLDR     s1,|L2.552|
0000d6  eeb20a04          VMOV.F32 s0,#10.00000000
0000da  f5047018          ADD      r0,r4,#0x260
0000de  4788              BLX      r1
;;;167    	
;;;168    	pid[FEED_MOTOR_SINGLE].f_pid_init = pid_init;
0000e0  494d              LDR      r1,|L2.536|
0000e2  f44f703c          MOV      r0,#0x2f0
0000e6  5101              STR      r1,[r0,r4]
;;;169    	pid[FEED_MOTOR_SINGLE].f_pid_init(&pid[FEED_MOTOR_SINGLE], 80.0f, 0.0f, 0.0f, 5000.0f, 0.0f, 0.0f, 5000.0f);
0000e8  5901              LDR      r1,[r0,r4]
0000ea  ed9f3a50          VLDR     s6,|L2.556|
0000ee  eddf2a4e          VLDR     s5,|L2.552|
0000f2  ed9f2a4d          VLDR     s4,|L2.552|
0000f6  eddf1a4d          VLDR     s3,|L2.556|
0000fa  ed9f1a4b          VLDR     s2,|L2.552|
0000fe  eddf0a4a          VLDR     s1,|L2.552|
000102  ed9f0a4d          VLDR     s0,|L2.568|
000106  f504702b          ADD      r0,r4,#0x2ac
00010a  4788              BLX      r1
;;;170    	
;;;171    	pid[FEED_MOTOR_DOUBLE_ANGLE].f_pid_init = pid_init;
00010c  4942              LDR      r1,|L2.536|
00010e  f44f704f          MOV      r0,#0x33c
000112  5101              STR      r1,[r0,r4]
;;;172    	pid[FEED_MOTOR_DOUBLE_ANGLE].f_pid_init(&pid[FEED_MOTOR_DOUBLE_ANGLE], 12.5f, 0.0f, 100.0f, 5000.0f, 0.0f, 5000.0f, 5000.0f);
000114  5901              LDR      r1,[r0,r4]
000116  ed9f3a45          VLDR     s6,|L2.556|
00011a  eddf2a44          VLDR     s5,|L2.556|
00011e  ed9f2a42          VLDR     s4,|L2.552|
000122  eddf1a42          VLDR     s3,|L2.556|
000126  ed9f1a3e          VLDR     s2,|L2.544|
00012a  eddf0a3f          VLDR     s1,|L2.552|
00012e  eeb20a09          VMOV.F32 s0,#12.50000000
000132  f504703e          ADD      r0,r4,#0x2f8
000136  4788              BLX      r1
;;;173    	
;;;174    	pid[VISUAL_YAW_OFFSET].f_pid_init = pid_init;
000138  4937              LDR      r1,|L2.536|
00013a  f44f7075          MOV      r0,#0x3d4
00013e  5101              STR      r1,[r0,r4]
;;;175    	pid[VISUAL_YAW_OFFSET].f_pid_init(&pid[VISUAL_YAW_OFFSET], 0.005f, 0.0f, 0.0001f, 1.5f, 0.0f, 0.2f, 1.7f);
000140  5901              LDR      r1,[r0,r4]
000142  ed9f3a42          VLDR     s6,|L2.588|
000146  eddf2a42          VLDR     s5,|L2.592|
00014a  ed9f2a37          VLDR     s4,|L2.552|
00014e  eef71a08          VMOV.F32 s3,#1.50000000
000152  ed9f1a40          VLDR     s2,|L2.596|
000156  eddf0a34          VLDR     s1,|L2.552|
00015a  ed9f0a3f          VLDR     s0,|L2.600|
00015e  f5047064          ADD      r0,r4,#0x390
000162  4788              BLX      r1
;;;176    	
;;;177    	pid[VISUAL_PITCH_OFFSET].f_pid_init = pid_init;
000164  492c              LDR      r1,|L2.536|
000166  f44f6084          MOV      r0,#0x420
00016a  5101              STR      r1,[r0,r4]
;;;178    	pid[VISUAL_PITCH_OFFSET].f_pid_init(&pid[VISUAL_PITCH_OFFSET], 0.005f, 0.0f, 0.0001f, 1.5f, 0.0f, 0.2f, 1.7f);
00016c  5901              LDR      r1,[r0,r4]
00016e  ed9f3a37          VLDR     s6,|L2.588|
000172  eddf2a37          VLDR     s5,|L2.592|
000176  ed9f2a2c          VLDR     s4,|L2.552|
00017a  eef71a08          VMOV.F32 s3,#1.50000000
00017e  ed9f1a35          VLDR     s2,|L2.596|
000182  eddf0a29          VLDR     s1,|L2.552|
000186  ed9f0a34          VLDR     s0,|L2.600|
00018a  f5047077          ADD      r0,r4,#0x3dc
00018e  4788              BLX      r1
;;;179    	
;;;180    	pid[FIRE_MOTOR_SPEED_L].f_pid_init = pid_init;
000190  4921              LDR      r1,|L2.536|
000192  f240406c          MOV      r0,#0x46c
000196  5101              STR      r1,[r0,r4]
;;;181    	pid[FIRE_MOTOR_SPEED_L].f_pid_init(&pid[FIRE_MOTOR_SPEED_L], 5.0f, 0.0f, 0.0f, 50.0f, 0.0f, 0.0f, 50.0f);
000198  5901              LDR      r1,[r0,r4]
00019a  ed9f3a22          VLDR     s6,|L2.548|
00019e  eddf2a22          VLDR     s5,|L2.552|
0001a2  ed9f2a21          VLDR     s4,|L2.552|
0001a6  eddf1a1f          VLDR     s3,|L2.548|
0001aa  ed9f1a1f          VLDR     s2,|L2.552|
0001ae  eddf0a1e          VLDR     s1,|L2.552|
0001b2  eeb10a04          VMOV.F32 s0,#5.00000000
0001b6  f5046085          ADD      r0,r4,#0x428
0001ba  4788              BLX      r1
;;;182    	 
;;;183    	pid[FIRE_MOTOR_SPEED_R].f_pid_init = pid_init;
0001bc  4916              LDR      r1,|L2.536|
0001be  f44f6097          MOV      r0,#0x4b8
0001c2  5101              STR      r1,[r0,r4]
;;;184    	pid[FIRE_MOTOR_SPEED_R].f_pid_init(&pid[FIRE_MOTOR_SPEED_R], 5.0f, 0.0f, 0.0f, 50.0f, 0.0f, 0.0f, 50.0f);
0001c4  5901              LDR      r1,[r0,r4]
0001c6  ed9f3a17          VLDR     s6,|L2.548|
0001ca  eddf2a17          VLDR     s5,|L2.552|
0001ce  ed9f2a16          VLDR     s4,|L2.552|
0001d2  eddf1a14          VLDR     s3,|L2.548|
0001d6  ed9f1a14          VLDR     s2,|L2.552|
0001da  eddf0a13          VLDR     s1,|L2.552|
0001de  eeb10a04          VMOV.F32 s0,#5.00000000
0001e2  f2044074          ADD      r0,r4,#0x474
0001e6  4788              BLX      r1
;;;185    	
;;;186    	pid[CHASSIS_CURRENT_MAX].f_pid_init = pid_init;
0001e8  490b              LDR      r1,|L2.536|
0001ea  f2405004          MOV      r0,#0x504
0001ee  5101              STR      r1,[r0,r4]
;;;187    	pid[CHASSIS_CURRENT_MAX].f_pid_init(&pid[CHASSIS_CURRENT_MAX], 50.0f, 0.0f, 0.0f, 15000.0f, 500.0f, 15000.0f, 15000.0f);
0001f0  5901              LDR      r1,[r0,r4]
0001f2  ed9f3a1a          VLDR     s6,|L2.604|
0001f6  eddf2a19          VLDR     s5,|L2.604|
0001fa  ed9f2a0e          VLDR     s4,|L2.564|
0001fe  eddf1a17          VLDR     s3,|L2.604|
000202  ed9f1a09          VLDR     s2,|L2.552|
000206  eddf0a08          VLDR     s1,|L2.552|
00020a  ed9f0a06          VLDR     s0,|L2.548|
00020e  f5046098          ADD      r0,r4,#0x4c0
000212  4788              BLX      r1
;;;188    }
000214  bd10              POP      {r4,pc}
;;;189    
                          ENDP

000216  0000              DCW      0x0000
                  |L2.536|
                          DCD      pid_init
                  |L2.540|
00021c  437a0000          DCFS     0x437a0000 ; 250
                  |L2.544|
000220  42c80000          DCFS     0x42c80000 ; 100
                  |L2.548|
000224  42480000          DCFS     0x42480000 ; 50
                  |L2.552|
000228  00000000          DCFS     0x00000000 ; 0
                  |L2.556|
00022c  459c4000          DCFS     0x459c4000 ; 5000
                  |L2.560|
000230  447a0000          DCFS     0x447a0000 ; 1000
                  |L2.564|
000234  43fa0000          DCFS     0x43fa0000 ; 500
                  |L2.568|
000238  42a00000          DCFS     0x42a00000 ; 80
                  |L2.572|
00023c  42340000          DCFS     0x42340000 ; 45
                  |L2.576|
000240  46ea6000          DCFS     0x46ea6000 ; 30000
                  |L2.580|
000244  461c4000          DCFS     0x461c4000 ; 10000
                  |L2.584|
000248  43a00000          DCFS     0x43a00000 ; 320
                  |L2.588|
00024c  3fd9999a          DCFS     0x3fd9999a ; 1.7000000476837158
                  |L2.592|
000250  3e4ccccd          DCFS     0x3e4ccccd ; 0.20000000298023224
                  |L2.596|
000254  38d1b717          DCFS     0x38d1b717 ; 9.9999997473787516e-05
                  |L2.600|
000258  3ba3d70a          DCFS     0x3ba3d70a ; 0.004999999888241291
                  |L2.604|
00025c  466a6000          DCFS     0x466a6000 ; 15000

                          AREA ||i.Calculate_Current_Value||, CODE, READONLY, ALIGN=2

                  Calculate_Current_Value PROC
;;;193    //pid计算出输出值 
;;;194    float Calculate_Current_Value(PID *pid, float set, float real)
000000  b510              PUSH     {r4,lr}
;;;195    {
000002  ed2d8b02          VPUSH    {d8}
000006  4604              MOV      r4,r0
000008  eeb08a40          VMOV.F32 s16,s0
00000c  eef08a60          VMOV.F32 s17,s1
;;;196    	//首先置零上一次的输出值
;;;197    	pid->f_pid_reset = pid_reset;
000010  486c              LDR      r0,|L3.452|
000012  64a0              STR      r0,[r4,#0x48]
;;;198    	pid->f_pid_reset(pid);
000014  4620              MOV      r0,r4
000016  6ca1              LDR      r1,[r4,#0x48]
000018  4788              BLX      r1
;;;199    	
;;;200    	pid->set = set ;
00001a  ed848a0a          VSTR     s16,[r4,#0x28]
;;;201    	pid->real = real;
00001e  edc48a0b          VSTR     s17,[r4,#0x2c]
;;;202    	
;;;203    	pid->err_last = pid->err;
000022  ed940a0d          VLDR     s0,[r4,#0x34]
000026  ed840a0e          VSTR     s0,[r4,#0x38]
;;;204    	pid->err = pid->set - pid->real;
00002a  ed940a0a          VLDR     s0,[r4,#0x28]
00002e  edd40a0b          VLDR     s1,[r4,#0x2c]
000032  ee300a60          VSUB.F32 s0,s0,s1
000036  ed840a0d          VSTR     s0,[r4,#0x34]
;;;205    	pid->integral += pid->err;
00003a  ed940a10          VLDR     s0,[r4,#0x40]
00003e  edd40a0d          VLDR     s1,[r4,#0x34]
000042  ee300a20          VADD.F32 s0,s0,s1
000046  ed840a10          VSTR     s0,[r4,#0x40]
;;;206    	
;;;207    	pid->pout = pid->kp * pid->err;
00004a  ed940a00          VLDR     s0,[r4,#0]
00004e  edd40a0d          VLDR     s1,[r4,#0x34]
000052  ee200a20          VMUL.F32 s0,s0,s1
000056  ed840a03          VSTR     s0,[r4,#0xc]
;;;208    	pid->pout = pid->pout < pid->poutmax ? pid->pout : pid->poutmax;
00005a  ed940a03          VLDR     s0,[r4,#0xc]
00005e  edd40a06          VLDR     s1,[r4,#0x18]
000062  eeb40ae0          VCMPE.F32 s0,s1
000066  eef1fa10          VMRS     APSR_nzcv,FPSCR
00006a  d202              BCS      |L3.114|
00006c  ed940a03          VLDR     s0,[r4,#0xc]
000070  e001              B        |L3.118|
                  |L3.114|
000072  ed940a06          VLDR     s0,[r4,#0x18]
                  |L3.118|
000076  ed840a03          VSTR     s0,[r4,#0xc]
;;;209    	pid->pout = pid->pout > -pid->poutmax ? pid->pout : -pid->poutmax;
00007a  ed940a03          VLDR     s0,[r4,#0xc]
00007e  edd40a06          VLDR     s1,[r4,#0x18]
000082  eef10a60          VNEG.F32 s1,s1
000086  eeb40ae0          VCMPE.F32 s0,s1
00008a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00008e  dd02              BLE      |L3.150|
000090  ed940a03          VLDR     s0,[r4,#0xc]
000094  e003              B        |L3.158|
                  |L3.150|
000096  ed940a06          VLDR     s0,[r4,#0x18]
00009a  eeb10a40          VNEG.F32 s0,s0
                  |L3.158|
00009e  ed840a03          VSTR     s0,[r4,#0xc]
;;;210    	
;;;211    	pid->iout = pid->ki * pid->integral;
0000a2  ed940a01          VLDR     s0,[r4,#4]
0000a6  edd40a10          VLDR     s1,[r4,#0x40]
0000aa  ee200a20          VMUL.F32 s0,s0,s1
0000ae  ed840a04          VSTR     s0,[r4,#0x10]
;;;212    	pid->iout = pid->iout < pid->ioutmax  ? pid->iout : pid->ioutmax;
0000b2  ed940a04          VLDR     s0,[r4,#0x10]
0000b6  edd40a07          VLDR     s1,[r4,#0x1c]
0000ba  eeb40ae0          VCMPE.F32 s0,s1
0000be  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000c2  d202              BCS      |L3.202|
0000c4  ed940a04          VLDR     s0,[r4,#0x10]
0000c8  e001              B        |L3.206|
                  |L3.202|
0000ca  ed940a07          VLDR     s0,[r4,#0x1c]
                  |L3.206|
0000ce  ed840a04          VSTR     s0,[r4,#0x10]
;;;213    	pid->iout = pid->iout > -pid->ioutmax ? pid->iout : -pid->ioutmax;
0000d2  ed940a04          VLDR     s0,[r4,#0x10]
0000d6  edd40a07          VLDR     s1,[r4,#0x1c]
0000da  eef10a60          VNEG.F32 s1,s1
0000de  eeb40ae0          VCMPE.F32 s0,s1
0000e2  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000e6  dd02              BLE      |L3.238|
0000e8  ed940a04          VLDR     s0,[r4,#0x10]
0000ec  e003              B        |L3.246|
                  |L3.238|
0000ee  ed940a07          VLDR     s0,[r4,#0x1c]
0000f2  eeb10a40          VNEG.F32 s0,s0
                  |L3.246|
0000f6  ed840a04          VSTR     s0,[r4,#0x10]
;;;214    	
;;;215    	pid->dout = pid->kd * (pid->err - pid->err_last);
0000fa  ed940a0d          VLDR     s0,[r4,#0x34]
0000fe  edd40a0e          VLDR     s1,[r4,#0x38]
000102  ee300a60          VSUB.F32 s0,s0,s1
000106  edd40a02          VLDR     s1,[r4,#8]
00010a  ee200a20          VMUL.F32 s0,s0,s1
00010e  ed840a05          VSTR     s0,[r4,#0x14]
;;;216    	pid->dout = pid->dout < pid->doutmax ? pid->dout : pid->doutmax;
000112  ed940a05          VLDR     s0,[r4,#0x14]
000116  edd40a08          VLDR     s1,[r4,#0x20]
00011a  eeb40ae0          VCMPE.F32 s0,s1
00011e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000122  d202              BCS      |L3.298|
000124  ed940a05          VLDR     s0,[r4,#0x14]
000128  e001              B        |L3.302|
                  |L3.298|
00012a  ed940a08          VLDR     s0,[r4,#0x20]
                  |L3.302|
00012e  ed840a05          VSTR     s0,[r4,#0x14]
;;;217    	pid->dout = pid->dout > -pid->doutmax ? pid->dout : -pid->doutmax;
000132  ed940a05          VLDR     s0,[r4,#0x14]
000136  edd40a08          VLDR     s1,[r4,#0x20]
00013a  eef10a60          VNEG.F32 s1,s1
00013e  eeb40ae0          VCMPE.F32 s0,s1
000142  eef1fa10          VMRS     APSR_nzcv,FPSCR
000146  dd02              BLE      |L3.334|
000148  ed940a05          VLDR     s0,[r4,#0x14]
00014c  e003              B        |L3.342|
                  |L3.334|
00014e  ed940a08          VLDR     s0,[r4,#0x20]
000152  eeb10a40          VNEG.F32 s0,s0
                  |L3.342|
000156  ed840a05          VSTR     s0,[r4,#0x14]
;;;218    	
;;;219    	pid->out = pid->pout + pid->iout + pid->dout;
00015a  ed940a03          VLDR     s0,[r4,#0xc]
00015e  edd40a04          VLDR     s1,[r4,#0x10]
000162  ee300a20          VADD.F32 s0,s0,s1
000166  edd40a05          VLDR     s1,[r4,#0x14]
00016a  ee300a20          VADD.F32 s0,s0,s1
00016e  ed840a0c          VSTR     s0,[r4,#0x30]
;;;220    	pid->out = pid->out < pid->outmax ? pid->out : pid->outmax;
000172  ed940a0c          VLDR     s0,[r4,#0x30]
000176  edd40a09          VLDR     s1,[r4,#0x24]
00017a  eeb40ae0          VCMPE.F32 s0,s1
00017e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000182  d202              BCS      |L3.394|
000184  ed940a0c          VLDR     s0,[r4,#0x30]
000188  e001              B        |L3.398|
                  |L3.394|
00018a  ed940a09          VLDR     s0,[r4,#0x24]
                  |L3.398|
00018e  ed840a0c          VSTR     s0,[r4,#0x30]
;;;221    	pid->out = pid->out > -pid->outmax ? pid->out : -pid->outmax;
000192  ed940a0c          VLDR     s0,[r4,#0x30]
000196  edd40a09          VLDR     s1,[r4,#0x24]
00019a  eef10a60          VNEG.F32 s1,s1
00019e  eeb40ae0          VCMPE.F32 s0,s1
0001a2  eef1fa10          VMRS     APSR_nzcv,FPSCR
0001a6  dd02              BLE      |L3.430|
0001a8  ed940a0c          VLDR     s0,[r4,#0x30]
0001ac  e003              B        |L3.438|
                  |L3.430|
0001ae  ed940a09          VLDR     s0,[r4,#0x24]
0001b2  eeb10a40          VNEG.F32 s0,s0
                  |L3.438|
0001b6  ed840a0c          VSTR     s0,[r4,#0x30]
;;;222    	
;;;223    	return pid->out;
0001ba  ed940a0c          VLDR     s0,[r4,#0x30]
;;;224    }
0001be  ecbd8b02          VPOP     {d8}
0001c2  bd10              POP      {r4,pc}
;;;225    float Calculate_Current_Value_For_Err(PID *pid, float err)
                          ENDP

                  |L3.452|
                          DCD      pid_reset

                          AREA ||i.Calculate_Current_Value_For_Err||, CODE, READONLY, ALIGN=2

                  Calculate_Current_Value_For_Err PROC
;;;224    }
;;;225    float Calculate_Current_Value_For_Err(PID *pid, float err)
000000  b510              PUSH     {r4,lr}
;;;226    {
000002  ed2d8b02          VPUSH    {d8}
000006  4604              MOV      r4,r0
000008  eeb08a40          VMOV.F32 s16,s0
;;;227    	pid->f_pid_reset = pid_reset;
00000c  4867              LDR      r0,|L4.428|
00000e  64a0              STR      r0,[r4,#0x48]
;;;228    	pid->f_pid_reset(pid);
000010  4620              MOV      r0,r4
000012  6ca1              LDR      r1,[r4,#0x48]
000014  4788              BLX      r1
;;;229    	
;;;230    	
;;;231    	pid->err_last = pid->err;
000016  ed940a0d          VLDR     s0,[r4,#0x34]
00001a  ed840a0e          VSTR     s0,[r4,#0x38]
;;;232    	pid->err = err;
00001e  ed848a0d          VSTR     s16,[r4,#0x34]
;;;233    	pid->integral += pid->err;
000022  ed940a10          VLDR     s0,[r4,#0x40]
000026  edd40a0d          VLDR     s1,[r4,#0x34]
00002a  ee300a20          VADD.F32 s0,s0,s1
00002e  ed840a10          VSTR     s0,[r4,#0x40]
;;;234    	
;;;235    	pid->pout = pid->kp * pid->err;
000032  ed940a00          VLDR     s0,[r4,#0]
000036  edd40a0d          VLDR     s1,[r4,#0x34]
00003a  ee200a20          VMUL.F32 s0,s0,s1
00003e  ed840a03          VSTR     s0,[r4,#0xc]
;;;236    	pid->pout = pid->pout < pid->poutmax ? pid->pout : pid->poutmax;
000042  ed940a03          VLDR     s0,[r4,#0xc]
000046  edd40a06          VLDR     s1,[r4,#0x18]
00004a  eeb40ae0          VCMPE.F32 s0,s1
00004e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000052  d202              BCS      |L4.90|
000054  ed940a03          VLDR     s0,[r4,#0xc]
000058  e001              B        |L4.94|
                  |L4.90|
00005a  ed940a06          VLDR     s0,[r4,#0x18]
                  |L4.94|
00005e  ed840a03          VSTR     s0,[r4,#0xc]
;;;237    	pid->pout = pid->pout > -pid->poutmax ? pid->pout : -pid->poutmax;
000062  ed940a03          VLDR     s0,[r4,#0xc]
000066  edd40a06          VLDR     s1,[r4,#0x18]
00006a  eef10a60          VNEG.F32 s1,s1
00006e  eeb40ae0          VCMPE.F32 s0,s1
000072  eef1fa10          VMRS     APSR_nzcv,FPSCR
000076  dd02              BLE      |L4.126|
000078  ed940a03          VLDR     s0,[r4,#0xc]
00007c  e003              B        |L4.134|
                  |L4.126|
00007e  ed940a06          VLDR     s0,[r4,#0x18]
000082  eeb10a40          VNEG.F32 s0,s0
                  |L4.134|
000086  ed840a03          VSTR     s0,[r4,#0xc]
;;;238    	
;;;239    	pid->iout = pid->ki * pid->integral;
00008a  ed940a01          VLDR     s0,[r4,#4]
00008e  edd40a10          VLDR     s1,[r4,#0x40]
000092  ee200a20          VMUL.F32 s0,s0,s1
000096  ed840a04          VSTR     s0,[r4,#0x10]
;;;240    	pid->iout = pid->iout < pid->ioutmax  ? pid->iout : pid->ioutmax;
00009a  ed940a04          VLDR     s0,[r4,#0x10]
00009e  edd40a07          VLDR     s1,[r4,#0x1c]
0000a2  eeb40ae0          VCMPE.F32 s0,s1
0000a6  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000aa  d202              BCS      |L4.178|
0000ac  ed940a04          VLDR     s0,[r4,#0x10]
0000b0  e001              B        |L4.182|
                  |L4.178|
0000b2  ed940a07          VLDR     s0,[r4,#0x1c]
                  |L4.182|
0000b6  ed840a04          VSTR     s0,[r4,#0x10]
;;;241    	pid->iout = pid->iout > -pid->ioutmax ? pid->iout : -pid->ioutmax;
0000ba  ed940a04          VLDR     s0,[r4,#0x10]
0000be  edd40a07          VLDR     s1,[r4,#0x1c]
0000c2  eef10a60          VNEG.F32 s1,s1
0000c6  eeb40ae0          VCMPE.F32 s0,s1
0000ca  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000ce  dd02              BLE      |L4.214|
0000d0  ed940a04          VLDR     s0,[r4,#0x10]
0000d4  e003              B        |L4.222|
                  |L4.214|
0000d6  ed940a07          VLDR     s0,[r4,#0x1c]
0000da  eeb10a40          VNEG.F32 s0,s0
                  |L4.222|
0000de  ed840a04          VSTR     s0,[r4,#0x10]
;;;242    	
;;;243    	pid->dout = pid->kd * (pid->err - pid->err_last);
0000e2  ed940a0d          VLDR     s0,[r4,#0x34]
0000e6  edd40a0e          VLDR     s1,[r4,#0x38]
0000ea  ee300a60          VSUB.F32 s0,s0,s1
0000ee  edd40a02          VLDR     s1,[r4,#8]
0000f2  ee200a20          VMUL.F32 s0,s0,s1
0000f6  ed840a05          VSTR     s0,[r4,#0x14]
;;;244    	pid->dout = pid->dout < pid->doutmax ? pid->dout : pid->doutmax;
0000fa  ed940a05          VLDR     s0,[r4,#0x14]
0000fe  edd40a08          VLDR     s1,[r4,#0x20]
000102  eeb40ae0          VCMPE.F32 s0,s1
000106  eef1fa10          VMRS     APSR_nzcv,FPSCR
00010a  d202              BCS      |L4.274|
00010c  ed940a05          VLDR     s0,[r4,#0x14]
000110  e001              B        |L4.278|
                  |L4.274|
000112  ed940a08          VLDR     s0,[r4,#0x20]
                  |L4.278|
000116  ed840a05          VSTR     s0,[r4,#0x14]
;;;245    	pid->dout = pid->dout > -pid->doutmax ? pid->dout : -pid->doutmax;
00011a  ed940a05          VLDR     s0,[r4,#0x14]
00011e  edd40a08          VLDR     s1,[r4,#0x20]
000122  eef10a60          VNEG.F32 s1,s1
000126  eeb40ae0          VCMPE.F32 s0,s1
00012a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00012e  dd02              BLE      |L4.310|
000130  ed940a05          VLDR     s0,[r4,#0x14]
000134  e003              B        |L4.318|
                  |L4.310|
000136  ed940a08          VLDR     s0,[r4,#0x20]
00013a  eeb10a40          VNEG.F32 s0,s0
                  |L4.318|
00013e  ed840a05          VSTR     s0,[r4,#0x14]
;;;246    	
;;;247    	pid->out = pid->pout + pid->iout + pid->dout;
000142  ed940a03          VLDR     s0,[r4,#0xc]
000146  edd40a04          VLDR     s1,[r4,#0x10]
00014a  ee300a20          VADD.F32 s0,s0,s1
00014e  edd40a05          VLDR     s1,[r4,#0x14]
000152  ee300a20          VADD.F32 s0,s0,s1
000156  ed840a0c          VSTR     s0,[r4,#0x30]
;;;248    	pid->out = pid->out < pid->outmax ? pid->out : pid->outmax;
00015a  ed940a0c          VLDR     s0,[r4,#0x30]
00015e  edd40a09          VLDR     s1,[r4,#0x24]
000162  eeb40ae0          VCMPE.F32 s0,s1
000166  eef1fa10          VMRS     APSR_nzcv,FPSCR
00016a  d202              BCS      |L4.370|
00016c  ed940a0c          VLDR     s0,[r4,#0x30]
000170  e001              B        |L4.374|
                  |L4.370|
000172  ed940a09          VLDR     s0,[r4,#0x24]
                  |L4.374|
000176  ed840a0c          VSTR     s0,[r4,#0x30]
;;;249    	pid->out = pid->out > -pid->outmax ? pid->out : -pid->outmax;
00017a  ed940a0c          VLDR     s0,[r4,#0x30]
00017e  edd40a09          VLDR     s1,[r4,#0x24]
000182  eef10a60          VNEG.F32 s1,s1
000186  eeb40ae0          VCMPE.F32 s0,s1
00018a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00018e  dd02              BLE      |L4.406|
000190  ed940a0c          VLDR     s0,[r4,#0x30]
000194  e003              B        |L4.414|
                  |L4.406|
000196  ed940a09          VLDR     s0,[r4,#0x24]
00019a  eeb10a40          VNEG.F32 s0,s0
                  |L4.414|
00019e  ed840a0c          VSTR     s0,[r4,#0x30]
;;;250    	
;;;251    	return pid->out;
0001a2  ed940a0c          VLDR     s0,[r4,#0x30]
;;;252    }
0001a6  ecbd8b02          VPOP     {d8}
0001aa  bd10              POP      {r4,pc}
;;;253    
                          ENDP

                  |L4.428|
                          DCD      pid_reset

                          AREA ||i.pid_incr_calc||, CODE, READONLY, ALIGN=1

                  pid_incr_calc PROC
;;;34     
;;;35     float pid_incr_calc(PID_INCR *pid, float ref, float set)
000000  eeb01a40          VMOV.F32 s2,s0
;;;36     {
;;;37     	pid->error[2] = pid->error[1];
000004  ed900a0f          VLDR     s0,[r0,#0x3c]
000008  ed800a10          VSTR     s0,[r0,#0x40]
;;;38     	pid->error[1] = pid->error[0];
00000c  ed900a0e          VLDR     s0,[r0,#0x38]
000010  ed800a0f          VSTR     s0,[r0,#0x3c]
;;;39     	pid->set = set;
000014  edc00a05          VSTR     s1,[r0,#0x14]
;;;40     	pid->fdb = ref;
000018  ed801a06          VSTR     s2,[r0,#0x18]
;;;41     	pid->error[0] = set - ref;
00001c  ee300ac1          VSUB.F32 s0,s1,s2
000020  ed800a0e          VSTR     s0,[r0,#0x38]
;;;42     
;;;43     	pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
000024  ed900a0e          VLDR     s0,[r0,#0x38]
000028  edd01a0f          VLDR     s3,[r0,#0x3c]
00002c  ee300a61          VSUB.F32 s0,s0,s3
000030  edd01a00          VLDR     s3,[r0,#0]
000034  ee200a21          VMUL.F32 s0,s0,s3
000038  ed800a08          VSTR     s0,[r0,#0x20]
;;;44     	pid->Iout = pid->Ki * pid->error[0];
00003c  ed900a01          VLDR     s0,[r0,#4]
000040  edd01a0e          VLDR     s3,[r0,#0x38]
000044  ee200a21          VMUL.F32 s0,s0,s3
000048  ed800a09          VSTR     s0,[r0,#0x24]
;;;45     	pid->Dbuf[2] = pid->Dbuf[1];
00004c  ed900a0c          VLDR     s0,[r0,#0x30]
000050  ed800a0d          VSTR     s0,[r0,#0x34]
;;;46     	pid->Dbuf[1] = pid->Dbuf[0];
000054  ed900a0b          VLDR     s0,[r0,#0x2c]
000058  ed800a0c          VSTR     s0,[r0,#0x30]
;;;47     	pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
00005c  ed900a0e          VLDR     s0,[r0,#0x38]
000060  edd01a0f          VLDR     s3,[r0,#0x3c]
000064  eeb02a00          VMOV.F32 s4,#2.00000000
000068  ee020a61          VMLS.F32 s0,s4,s3
00006c  edd01a10          VLDR     s3,[r0,#0x40]
000070  ee300a21          VADD.F32 s0,s0,s3
000074  ed800a0b          VSTR     s0,[r0,#0x2c]
;;;48     	pid->Dout = pid->Kd * pid->Dbuf[0];
000078  ed900a02          VLDR     s0,[r0,#8]
00007c  edd01a0b          VLDR     s3,[r0,#0x2c]
000080  ee200a21          VMUL.F32 s0,s0,s3
000084  ed800a0a          VSTR     s0,[r0,#0x28]
;;;49     	pid->out += pid->Pout + pid->Iout + pid->Dout;
000088  ed900a08          VLDR     s0,[r0,#0x20]
00008c  edd01a09          VLDR     s3,[r0,#0x24]
000090  ee300a21          VADD.F32 s0,s0,s3
000094  edd01a0a          VLDR     s3,[r0,#0x28]
000098  ee300a21          VADD.F32 s0,s0,s3
00009c  edd01a07          VLDR     s3,[r0,#0x1c]
0000a0  ee300a21          VADD.F32 s0,s0,s3
0000a4  ed800a07          VSTR     s0,[r0,#0x1c]
;;;50     	pid->out = pid->out > pid->max_out ? pid->max_out : pid->out;
0000a8  ed900a07          VLDR     s0,[r0,#0x1c]
0000ac  edd01a03          VLDR     s3,[r0,#0xc]
0000b0  eeb40ae1          VCMPE.F32 s0,s3
0000b4  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000b8  dd02              BLE      |L5.192|
0000ba  ed900a03          VLDR     s0,[r0,#0xc]
0000be  e001              B        |L5.196|
                  |L5.192|
0000c0  ed900a07          VLDR     s0,[r0,#0x1c]
                  |L5.196|
0000c4  ed800a07          VSTR     s0,[r0,#0x1c]
;;;51     	pid->out = pid->out < -pid->max_out ? -pid->max_out : pid->out;
0000c8  ed900a07          VLDR     s0,[r0,#0x1c]
0000cc  edd01a03          VLDR     s3,[r0,#0xc]
0000d0  eef11a61          VNEG.F32 s3,s3
0000d4  eeb40ae1          VCMPE.F32 s0,s3
0000d8  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000dc  d204              BCS      |L5.232|
0000de  ed900a03          VLDR     s0,[r0,#0xc]
0000e2  eeb10a40          VNEG.F32 s0,s0
0000e6  e001              B        |L5.236|
                  |L5.232|
0000e8  ed900a07          VLDR     s0,[r0,#0x1c]
                  |L5.236|
0000ec  ed800a07          VSTR     s0,[r0,#0x1c]
;;;52     	return pid->out;
0000f0  ed900a07          VLDR     s0,[r0,#0x1c]
;;;53     }
0000f4  4770              BX       lr
;;;54     
                          ENDP


                          AREA ||i.pid_incr_init||, CODE, READONLY, ALIGN=2

                  pid_incr_init PROC
;;;23     
;;;24     void pid_incr_init(PID_INCR *pid, const float PID[3], float max_out, float max_iout)
000000  ed911a00          VLDR     s2,[r1,#0]
;;;25     {
;;;26     	pid->Kp = PID[0];
000004  ed801a00          VSTR     s2,[r0,#0]
;;;27         pid->Ki = PID[1];
000008  ed911a01          VLDR     s2,[r1,#4]
00000c  ed801a01          VSTR     s2,[r0,#4]
;;;28         pid->Kd = PID[2];
000010  ed911a02          VLDR     s2,[r1,#8]
000014  ed801a02          VSTR     s2,[r0,#8]
;;;29         pid->max_out = max_out;
000018  ed800a03          VSTR     s0,[r0,#0xc]
;;;30         pid->max_iout = max_iout;
00001c  edc00a04          VSTR     s1,[r0,#0x10]
;;;31         pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
000020  ed9f1a0c          VLDR     s2,|L6.84|
000024  ed801a0d          VSTR     s2,[r0,#0x34]
000028  ed801a0c          VSTR     s2,[r0,#0x30]
00002c  ed801a0b          VSTR     s2,[r0,#0x2c]
;;;32         pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
000030  ed9f1a08          VLDR     s2,|L6.84|
000034  ed801a07          VSTR     s2,[r0,#0x1c]
000038  ed801a0a          VSTR     s2,[r0,#0x28]
00003c  ed801a09          VSTR     s2,[r0,#0x24]
000040  ed801a08          VSTR     s2,[r0,#0x20]
000044  ed801a10          VSTR     s2,[r0,#0x40]
000048  ed801a0f          VSTR     s2,[r0,#0x3c]
00004c  ed801a0e          VSTR     s2,[r0,#0x38]
;;;33     }
000050  4770              BX       lr
;;;34     
                          ENDP

000052  0000              DCW      0x0000
                  |L6.84|
000054  00000000          DCFS     0x00000000 ; 0

                          AREA ||i.pid_init||, CODE, READONLY, ALIGN=2

                  pid_init PROC
;;;68     //pid值初始化
;;;69     static void pid_init(PID *pid, float kp, float ki, float kd, float poutmax, float ioutmax, float doutmax, float outmax)
000000  b510              PUSH     {r4,lr}
;;;70     {	
000002  ed2d8b08          VPUSH    {d8-d11}
000006  4604              MOV      r4,r0
000008  eeb08a40          VMOV.F32 s16,s0
00000c  eef08a60          VMOV.F32 s17,s1
000010  eeb09a41          VMOV.F32 s18,s2
000014  eef09a61          VMOV.F32 s19,s3
000018  eeb0aa42          VMOV.F32 s20,s4
00001c  eef0aa62          VMOV.F32 s21,s5
000020  eeb0ba43          VMOV.F32 s22,s6
;;;71     	pid->kp = kp;
000024  ed848a00          VSTR     s16,[r4,#0]
;;;72     	pid->ki = ki;
000028  edc48a01          VSTR     s17,[r4,#4]
;;;73     	pid->kd = kd;
00002c  ed849a02          VSTR     s18,[r4,#8]
;;;74     	
;;;75     	pid->poutmax = poutmax;
000030  edc49a06          VSTR     s19,[r4,#0x18]
;;;76     	pid->ioutmax = ioutmax;
000034  ed84aa07          VSTR     s20,[r4,#0x1c]
;;;77     	pid->doutmax = doutmax;
000038  edc4aa08          VSTR     s21,[r4,#0x20]
;;;78     	pid->outmax = outmax;
00003c  ed84ba09          VSTR     s22,[r4,#0x24]
;;;79     	
;;;80     	pid->f_pid_reset = pid_reset;
000040  480b              LDR      r0,|L7.112|
000042  64a0              STR      r0,[r4,#0x48]
;;;81     	pid->f_pid_reset(pid);
000044  4620              MOV      r0,r4
000046  6ca1              LDR      r1,[r4,#0x48]
000048  4788              BLX      r1
;;;82     	
;;;83     	pid->err = 0;
00004a  ed9f0a0a          VLDR     s0,|L7.116|
00004e  ed840a0d          VSTR     s0,[r4,#0x34]
;;;84     	pid->err_last = 0;
000052  ed9f0a08          VLDR     s0,|L7.116|
000056  ed840a0e          VSTR     s0,[r4,#0x38]
;;;85     	pid->err_llast = 0;
00005a  ed9f0a06          VLDR     s0,|L7.116|
00005e  ed840a0f          VSTR     s0,[r4,#0x3c]
;;;86     	pid->integral = 0;
000062  ed9f0a04          VLDR     s0,|L7.116|
000066  ed840a10          VSTR     s0,[r4,#0x40]
;;;87     	
;;;88     }
00006a  ecbd8b08          VPOP     {d8-d11}
00006e  bd10              POP      {r4,pc}
;;;89     //pid输出值重置
                          ENDP

                  |L7.112|
                          DCD      pid_reset
                  |L7.116|
000074  00000000          DCFS     0x00000000 ; 0

                          AREA ||i.pid_reset||, CODE, READONLY, ALIGN=2

                  pid_reset PROC
;;;89     //pid输出值重置
;;;90     static void pid_reset(PID *pid)
000000  ed9f0a08          VLDR     s0,|L8.36|
;;;91     {
;;;92     	
;;;93     	pid->pout = 0;
000004  ed800a03          VSTR     s0,[r0,#0xc]
;;;94     	pid->iout = 0;
000008  ed9f0a06          VLDR     s0,|L8.36|
00000c  ed800a04          VSTR     s0,[r0,#0x10]
;;;95     	pid->dout = 0;
000010  ed9f0a04          VLDR     s0,|L8.36|
000014  ed800a05          VSTR     s0,[r0,#0x14]
;;;96     	pid->out  = 0;
000018  ed9f0a02          VLDR     s0,|L8.36|
00001c  ed800a0c          VSTR     s0,[r0,#0x30]
;;;97     	
;;;98     }
000020  4770              BX       lr
;;;99     
                          ENDP

000022  0000              DCW      0x0000
                  |L8.36|
000024  00000000          DCFS     0x00000000 ; 0

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  pid
                          %        1292
                  pid_incr
                          %        408
                  out
                          %        68
                  out_incr
                          %        24

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

000000  41200000          DCFS     0x41200000 ; 10
000004  3f800000          DCFS     0x3f800000 ; 1
000008  00000000          DCFS     0x00000000 ; 0

;*** Start embedded assembler ***

#line 1 "..\\BSP\\rm_pid.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_rm_pid_c_out____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___8_rm_pid_c_out____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_rm_pid_c_out____REVSH|
#line 153
|__asm___8_rm_pid_c_out____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_rm_pid_c_out____RRX|
#line 328
|__asm___8_rm_pid_c_out____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
