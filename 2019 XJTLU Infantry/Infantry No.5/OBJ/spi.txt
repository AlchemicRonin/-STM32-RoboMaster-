; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\spi.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\spi.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\spi.crf ..\BSP\spi.c]
                          THUMB

                          AREA ||i.SPI5Init||, CODE, READONLY, ALIGN=2

                  SPI5Init PROC
;;;3      
;;;4      void SPI5Init(void)
000000  b500              PUSH     {lr}
;;;5      {
000002  b087              SUB      sp,sp,#0x1c
;;;6          GPIO_InitTypeDef GPIO_InitStructure;
;;;7          SPI_InitTypeDef SPI_InitStructure;
;;;8      
;;;9          RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOF, ENABLE);
000004  2101              MOVS     r1,#1
000006  2020              MOVS     r0,#0x20
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;10         RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI5, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  0508              LSLS     r0,r1,#20
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;11     
;;;12         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
000014  f44f7060          MOV      r0,#0x380
000018  9005              STR      r0,[sp,#0x14]
;;;13         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00001a  2002              MOVS     r0,#2
00001c  f88d0018          STRB     r0,[sp,#0x18]
;;;14         GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
000020  2000              MOVS     r0,#0
000022  f88d001a          STRB     r0,[sp,#0x1a]
;;;15         GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
000026  2001              MOVS     r0,#1
000028  f88d001b          STRB     r0,[sp,#0x1b]
;;;16         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
00002c  2003              MOVS     r0,#3
00002e  f88d0019          STRB     r0,[sp,#0x19]
;;;17         GPIO_Init(GPIOF, &GPIO_InitStructure);
000032  a905              ADD      r1,sp,#0x14
000034  4820              LDR      r0,|L1.184|
000036  f7fffffe          BL       GPIO_Init
;;;18     
;;;19         GPIO_PinAFConfig(GPIOF, GPIO_PinSource7, GPIO_AF_SPI5);
00003a  2205              MOVS     r2,#5
00003c  2107              MOVS     r1,#7
00003e  481e              LDR      r0,|L1.184|
000040  f7fffffe          BL       GPIO_PinAFConfig
;;;20         GPIO_PinAFConfig(GPIOF, GPIO_PinSource8, GPIO_AF_SPI5);
000044  2205              MOVS     r2,#5
000046  2108              MOVS     r1,#8
000048  481b              LDR      r0,|L1.184|
00004a  f7fffffe          BL       GPIO_PinAFConfig
;;;21         GPIO_PinAFConfig(GPIOF, GPIO_PinSource9, GPIO_AF_SPI5);
00004e  2205              MOVS     r2,#5
000050  2109              MOVS     r1,#9
000052  4819              LDR      r0,|L1.184|
000054  f7fffffe          BL       GPIO_PinAFConfig
;;;22     
;;;23         RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, ENABLE);
000058  2101              MOVS     r1,#1
00005a  0508              LSLS     r0,r1,#20
00005c  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;24         RCC_APB2PeriphResetCmd(RCC_APB2Periph_SPI5, DISABLE);
000060  2100              MOVS     r1,#0
000062  f44f1080          MOV      r0,#0x100000
000066  f7fffffe          BL       RCC_APB2PeriphResetCmd
;;;25     
;;;26         SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
00006a  2000              MOVS     r0,#0
00006c  f8ad0000          STRH     r0,[sp,#0]
;;;27         SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
000070  f44f7082          MOV      r0,#0x104
000074  f8ad0002          STRH     r0,[sp,#2]
;;;28         SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
000078  2000              MOVS     r0,#0
00007a  f8ad0004          STRH     r0,[sp,#4]
;;;29         SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;
00007e  2002              MOVS     r0,#2
000080  f8ad0006          STRH     r0,[sp,#6]
;;;30         SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
000084  2001              MOVS     r0,#1
000086  f8ad0008          STRH     r0,[sp,#8]
;;;31         SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
00008a  0240              LSLS     r0,r0,#9
00008c  f8ad000a          STRH     r0,[sp,#0xa]
;;;32         SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;
000090  2038              MOVS     r0,#0x38
000092  f8ad000c          STRH     r0,[sp,#0xc]
;;;33         SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
000096  2000              MOVS     r0,#0
000098  f8ad000e          STRH     r0,[sp,#0xe]
;;;34         SPI_InitStructure.SPI_CRCPolynomial = 7;
00009c  2007              MOVS     r0,#7
00009e  f8ad0010          STRH     r0,[sp,#0x10]
;;;35         SPI_Init(SPI5, &SPI_InitStructure);
0000a2  4669              MOV      r1,sp
0000a4  4805              LDR      r0,|L1.188|
0000a6  f7fffffe          BL       SPI_Init
;;;36     
;;;37         SPI_Cmd(SPI5, ENABLE);
0000aa  2101              MOVS     r1,#1
0000ac  4803              LDR      r0,|L1.188|
0000ae  f7fffffe          BL       SPI_Cmd
;;;38     }
0000b2  b007              ADD      sp,sp,#0x1c
0000b4  bd00              POP      {pc}
;;;39     
                          ENDP

0000b6  0000              DCW      0x0000
                  |L1.184|
                          DCD      0x40021400
                  |L1.188|
                          DCD      0x40015000

                          AREA ||i.SPI5SetSpeedAndDataSize||, CODE, READONLY, ALIGN=2

                  SPI5SetSpeedAndDataSize PROC
;;;39     
;;;40     void SPI5SetSpeedAndDataSize(uint16_t Speed, uint16_t DataSize)
000000  4a0a              LDR      r2,|L2.44|
;;;41     {
;;;42         SPI5->CR1 &= 0xF7C7;
000002  8812              LDRH     r2,[r2,#0]
000004  f24f73c7          MOV      r3,#0xf7c7
000008  401a              ANDS     r2,r2,r3
00000a  4b08              LDR      r3,|L2.44|
00000c  801a              STRH     r2,[r3,#0]
;;;43         SPI5->CR1 |= Speed;
00000e  461a              MOV      r2,r3
000010  8812              LDRH     r2,[r2,#0]
000012  4302              ORRS     r2,r2,r0
000014  801a              STRH     r2,[r3,#0]
;;;44         SPI5->CR1 |= DataSize;
000016  461a              MOV      r2,r3
000018  8812              LDRH     r2,[r2,#0]
00001a  430a              ORRS     r2,r2,r1
00001c  801a              STRH     r2,[r3,#0]
;;;45         SPI5->CR1 |= 1 << 6;
00001e  461a              MOV      r2,r3
000020  8812              LDRH     r2,[r2,#0]
000022  f0420240          ORR      r2,r2,#0x40
000026  801a              STRH     r2,[r3,#0]
;;;46     }
000028  4770              BX       lr
;;;47     
                          ENDP

00002a  0000              DCW      0x0000
                  |L2.44|
                          DCD      0x40015000

                          AREA ||i.SPI5_DMA_DISABLE||, CODE, READONLY, ALIGN=2

                  SPI5_DMA_DISABLE PROC
;;;136    
;;;137    void SPI5_DMA_DISABLE()
000000  b510              PUSH     {r4,lr}
;;;138    {
;;;139        DMA_Cmd(DMA2_Stream4, DISABLE);
000002  2100              MOVS     r1,#0
000004  480a              LDR      r0,|L3.48|
000006  f7fffffe          BL       DMA_Cmd
;;;140        DMA_Cmd(DMA2_Stream5, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  4808              LDR      r0,|L3.48|
00000e  3018              ADDS     r0,r0,#0x18
000010  f7fffffe          BL       DMA_Cmd
;;;141        while (DMA_GetCmdStatus(DMA2_Stream4) != DISABLE)
000014  bf00              NOP      
                  |L3.22|
000016  4806              LDR      r0,|L3.48|
000018  f7fffffe          BL       DMA_GetCmdStatus
00001c  2800              CMP      r0,#0
00001e  d1fa              BNE      |L3.22|
;;;142        {
;;;143            ;
;;;144        }
;;;145        while (DMA_GetCmdStatus(DMA2_Stream5) != DISABLE)
000020  bf00              NOP      
                  |L3.34|
000022  4803              LDR      r0,|L3.48|
000024  3018              ADDS     r0,r0,#0x18
000026  f7fffffe          BL       DMA_GetCmdStatus
00002a  2800              CMP      r0,#0
00002c  d1f9              BNE      |L3.34|
;;;146        {
;;;147            ;
;;;148        }
;;;149    }
00002e  bd10              POP      {r4,pc}
                          ENDP

                  |L3.48|
                          DCD      0x40026470

                          AREA ||i.SPI5_DMA_Enable||, CODE, READONLY, ALIGN=2

                  SPI5_DMA_Enable PROC
;;;114    
;;;115    void SPI5_DMA_Enable(uint16_t ndtr)
000000  b510              PUSH     {r4,lr}
;;;116    {
000002  4604              MOV      r4,r0
;;;117        DMA_Cmd(DMA2_Stream4, DISABLE);
000004  2100              MOVS     r1,#0
000006  4818              LDR      r0,|L4.104|
000008  f7fffffe          BL       DMA_Cmd
;;;118        DMA_Cmd(DMA2_Stream5, DISABLE);
00000c  2100              MOVS     r1,#0
00000e  4816              LDR      r0,|L4.104|
000010  3018              ADDS     r0,r0,#0x18
000012  f7fffffe          BL       DMA_Cmd
;;;119        while (DMA_GetCmdStatus(DMA2_Stream4) != DISABLE)
000016  bf00              NOP      
                  |L4.24|
000018  4813              LDR      r0,|L4.104|
00001a  f7fffffe          BL       DMA_GetCmdStatus
00001e  2800              CMP      r0,#0
000020  d1fa              BNE      |L4.24|
;;;120        {
;;;121            ;
;;;122        }
;;;123        while (DMA_GetCmdStatus(DMA2_Stream5) != DISABLE)
000022  bf00              NOP      
                  |L4.36|
000024  4810              LDR      r0,|L4.104|
000026  3018              ADDS     r0,r0,#0x18
000028  f7fffffe          BL       DMA_GetCmdStatus
00002c  2800              CMP      r0,#0
00002e  d1f9              BNE      |L4.36|
;;;124        {
;;;125            ;
;;;126        }
;;;127    
;;;128        DMA_ClearFlag(DMA2_Stream5, DMA_FLAG_TCIF5 | DMA_FLAG_HTIF5);
000030  490e              LDR      r1,|L4.108|
000032  480d              LDR      r0,|L4.104|
000034  3018              ADDS     r0,r0,#0x18
000036  f7fffffe          BL       DMA_ClearFlag
;;;129        DMA_ClearFlag(DMA2_Stream4, DMA_FLAG_TCIF4 | DMA_FLAG_HTIF4);
00003a  490d              LDR      r1,|L4.112|
00003c  480a              LDR      r0,|L4.104|
00003e  f7fffffe          BL       DMA_ClearFlag
;;;130    
;;;131        DMA_SetCurrDataCounter(DMA2_Stream4, ndtr);
000042  4621              MOV      r1,r4
000044  4808              LDR      r0,|L4.104|
000046  f7fffffe          BL       DMA_SetCurrDataCounter
;;;132        DMA_SetCurrDataCounter(DMA2_Stream5, ndtr);
00004a  4621              MOV      r1,r4
00004c  4806              LDR      r0,|L4.104|
00004e  3018              ADDS     r0,r0,#0x18
000050  f7fffffe          BL       DMA_SetCurrDataCounter
;;;133        DMA_Cmd(DMA2_Stream5, ENABLE);
000054  2101              MOVS     r1,#1
000056  4804              LDR      r0,|L4.104|
000058  3018              ADDS     r0,r0,#0x18
00005a  f7fffffe          BL       DMA_Cmd
;;;134        DMA_Cmd(DMA2_Stream4, ENABLE);
00005e  2101              MOVS     r1,#1
000060  4801              LDR      r0,|L4.104|
000062  f7fffffe          BL       DMA_Cmd
;;;135    }
000066  bd10              POP      {r4,pc}
;;;136    
                          ENDP

                  |L4.104|
                          DCD      0x40026470
                  |L4.108|
                          DCD      0x20000c00
                  |L4.112|
                          DCD      0x20000030

                          AREA ||i.SPI5_DMA_Init||, CODE, READONLY, ALIGN=2

                  SPI5_DMA_Init PROC
;;;47     
;;;48     void SPI5_DMA_Init(uint32_t tx_buf, uint32_t rx_buf, uint16_t num)
000000  b570              PUSH     {r4-r6,lr}
;;;49     {
000002  b090              SUB      sp,sp,#0x40
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;50     
;;;51         NVIC_InitTypeDef NVIC_InitStructure;
;;;52         DMA_InitTypeDef DMA_InitStructure;
;;;53         /* -------------- Enable Module Clock Source ----------------------------*/
;;;54         RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
00000a  2101              MOVS     r1,#1
00000c  0588              LSLS     r0,r1,#22
00000e  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;55     
;;;56         NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream5_IRQn;
000012  2044              MOVS     r0,#0x44
000014  f88d003c          STRB     r0,[sp,#0x3c]
;;;57     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;//抢占优先级3
000018  2000              MOVS     r0,#0
00001a  f88d003d          STRB     r0,[sp,#0x3d]
;;;58     	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;		//子优先级3
00001e  2002              MOVS     r0,#2
000020  f88d003e          STRB     r0,[sp,#0x3e]
;;;59         NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000024  2001              MOVS     r0,#1
000026  f88d003f          STRB     r0,[sp,#0x3f]
;;;60         NVIC_Init(&NVIC_InitStructure);
00002a  a80f              ADD      r0,sp,#0x3c
00002c  f7fffffe          BL       NVIC_Init
;;;61     
;;;62         DMA_DeInit(DMA2_Stream5);
000030  482f              LDR      r0,|L5.240|
000032  f7fffffe          BL       DMA_DeInit
;;;63     
;;;64         while (DMA_GetCmdStatus(DMA2_Stream5) != DISABLE)
000036  bf00              NOP      
                  |L5.56|
000038  482d              LDR      r0,|L5.240|
00003a  f7fffffe          BL       DMA_GetCmdStatus
00003e  2800              CMP      r0,#0
000040  d1fa              BNE      |L5.56|
;;;65         {
;;;66             ;
;;;67         }
;;;68         DMA_InitStructure.DMA_Channel = DMA_Channel_7;
000042  f04f6060          MOV      r0,#0xe000000
000046  9000              STR      r0,[sp,#0]
;;;69         DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) & (SPI5->DR);
000048  482a              LDR      r0,|L5.244|
00004a  9001              STR      r0,[sp,#4]
;;;70         DMA_InitStructure.DMA_Memory0BaseAddr = rx_buf;
00004c  9602              STR      r6,[sp,#8]
;;;71         DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
00004e  2000              MOVS     r0,#0
000050  9003              STR      r0,[sp,#0xc]
;;;72         DMA_InitStructure.DMA_BufferSize = num;
000052  9404              STR      r4,[sp,#0x10]
;;;73         DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000054  9005              STR      r0,[sp,#0x14]
;;;74         DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
000056  f44f6080          MOV      r0,#0x400
00005a  9006              STR      r0,[sp,#0x18]
;;;75         DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00005c  2000              MOVS     r0,#0
00005e  9007              STR      r0,[sp,#0x1c]
;;;76         DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
000060  9008              STR      r0,[sp,#0x20]
;;;77         DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
000062  9009              STR      r0,[sp,#0x24]
;;;78         DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
000064  f44f3040          MOV      r0,#0x30000
000068  900a              STR      r0,[sp,#0x28]
;;;79         DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
00006a  2000              MOVS     r0,#0
00006c  900b              STR      r0,[sp,#0x2c]
;;;80         DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
00006e  900c              STR      r0,[sp,#0x30]
;;;81         DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
000070  900d              STR      r0,[sp,#0x34]
;;;82         DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
000072  900e              STR      r0,[sp,#0x38]
;;;83         DMA_Init(DMA2_Stream5, &DMA_InitStructure);
000074  4669              MOV      r1,sp
000076  481e              LDR      r0,|L5.240|
000078  f7fffffe          BL       DMA_Init
;;;84     
;;;85         DMA_ITConfig(DMA2_Stream5, DMA_IT_TC, ENABLE);
00007c  2201              MOVS     r2,#1
00007e  2110              MOVS     r1,#0x10
000080  481b              LDR      r0,|L5.240|
000082  f7fffffe          BL       DMA_ITConfig
;;;86     
;;;87         DMA_Cmd(DMA2_Stream5, DISABLE); //Add a disable
000086  2100              MOVS     r1,#0
000088  4819              LDR      r0,|L5.240|
00008a  f7fffffe          BL       DMA_Cmd
;;;88     
;;;89         DMA_DeInit(DMA2_Stream4);
00008e  4818              LDR      r0,|L5.240|
000090  3818              SUBS     r0,r0,#0x18
000092  f7fffffe          BL       DMA_DeInit
;;;90     
;;;91         while (DMA_GetCmdStatus(DMA2_Stream4) != DISABLE)
000096  bf00              NOP      
                  |L5.152|
000098  4815              LDR      r0,|L5.240|
00009a  3818              SUBS     r0,r0,#0x18
00009c  f7fffffe          BL       DMA_GetCmdStatus
0000a0  2800              CMP      r0,#0
0000a2  d1f9              BNE      |L5.152|
;;;92         {
;;;93             ;
;;;94         }
;;;95         DMA_InitStructure.DMA_Channel = DMA_Channel_2;
0000a4  f04f6080          MOV      r0,#0x4000000
0000a8  9000              STR      r0,[sp,#0]
;;;96         DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t) & (SPI5->DR);
0000aa  4812              LDR      r0,|L5.244|
0000ac  9001              STR      r0,[sp,#4]
;;;97         DMA_InitStructure.DMA_Memory0BaseAddr = tx_buf;
0000ae  9502              STR      r5,[sp,#8]
;;;98         DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
0000b0  2040              MOVS     r0,#0x40
0000b2  9003              STR      r0,[sp,#0xc]
;;;99         DMA_InitStructure.DMA_BufferSize = num;
0000b4  9404              STR      r4,[sp,#0x10]
;;;100        DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
0000b6  2000              MOVS     r0,#0
0000b8  9005              STR      r0,[sp,#0x14]
;;;101        DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
0000ba  f44f6080          MOV      r0,#0x400
0000be  9006              STR      r0,[sp,#0x18]
;;;102        DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
0000c0  2000              MOVS     r0,#0
0000c2  9007              STR      r0,[sp,#0x1c]
;;;103        DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
0000c4  9008              STR      r0,[sp,#0x20]
;;;104        DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
0000c6  9009              STR      r0,[sp,#0x24]
;;;105        DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
0000c8  f44f3080          MOV      r0,#0x10000
0000cc  900a              STR      r0,[sp,#0x28]
;;;106        DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
0000ce  2000              MOVS     r0,#0
0000d0  900b              STR      r0,[sp,#0x2c]
;;;107        DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
0000d2  900c              STR      r0,[sp,#0x30]
;;;108        DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
0000d4  900d              STR      r0,[sp,#0x34]
;;;109        DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
0000d6  900e              STR      r0,[sp,#0x38]
;;;110        DMA_Init(DMA2_Stream4, &DMA_InitStructure);
0000d8  4669              MOV      r1,sp
0000da  4805              LDR      r0,|L5.240|
0000dc  3818              SUBS     r0,r0,#0x18
0000de  f7fffffe          BL       DMA_Init
;;;111    
;;;112        DMA_Cmd(DMA2_Stream4, DISABLE); //Add a disable
0000e2  2100              MOVS     r1,#0
0000e4  4802              LDR      r0,|L5.240|
0000e6  3818              SUBS     r0,r0,#0x18
0000e8  f7fffffe          BL       DMA_Cmd
;;;113    }
0000ec  b010              ADD      sp,sp,#0x40
0000ee  bd70              POP      {r4-r6,pc}
;;;114    
                          ENDP

                  |L5.240|
                          DCD      0x40026488
                  |L5.244|
                          DCD      0x4001500c

;*** Start embedded assembler ***

#line 1 "..\\BSP\\spi.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_SPI5Init____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___5_spi_c_SPI5Init____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_SPI5Init____REVSH|
#line 153
|__asm___5_spi_c_SPI5Init____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_spi_c_SPI5Init____RRX|
#line 328
|__asm___5_spi_c_SPI5Init____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
