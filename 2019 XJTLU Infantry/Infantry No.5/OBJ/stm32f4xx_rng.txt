; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\stm32f4xx_rng.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32f4xx_rng.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\stm32f4xx_rng.crf ..\FWLIB\src\stm32f4xx_rng.c]
                          THUMB

                          AREA ||i.RNG_ClearFlag||, CODE, READONLY, ALIGN=2

                  RNG_ClearFlag PROC
;;;334      */
;;;335    void RNG_ClearFlag(uint8_t RNG_FLAG)
000000  ea6f1100          MVN      r1,r0,LSL #4
;;;336    {
;;;337      /* Check the parameters */
;;;338      assert_param(IS_RNG_CLEAR_FLAG(RNG_FLAG));
;;;339      /* Clear the selected RNG flags */
;;;340      RNG->SR = ~(uint32_t)(((uint32_t)RNG_FLAG) << 4);
000004  4a01              LDR      r2,|L1.12|
000006  6011              STR      r1,[r2,#0]
;;;341    }
000008  4770              BX       lr
;;;342    
                          ENDP

00000a  0000              DCW      0x0000
                  |L1.12|
                          DCD      0x50060804

                          AREA ||i.RNG_ClearITPendingBit||, CODE, READONLY, ALIGN=2

                  RNG_ClearITPendingBit PROC
;;;380      */
;;;381    void RNG_ClearITPendingBit(uint8_t RNG_IT)
000000  43c1              MVNS     r1,r0
;;;382    {
;;;383      /* Check the parameters */
;;;384      assert_param(IS_RNG_IT(RNG_IT));
;;;385    
;;;386      /* Clear the selected RNG interrupt pending bit */
;;;387      RNG->SR = (uint8_t)~RNG_IT;
000002  b2c9              UXTB     r1,r1
000004  4a01              LDR      r2,|L2.12|
000006  6011              STR      r1,[r2,#0]
;;;388    }
000008  4770              BX       lr
;;;389    /**
                          ENDP

00000a  0000              DCW      0x0000
                  |L2.12|
                          DCD      0x50060804

                          AREA ||i.RNG_Cmd||, CODE, READONLY, ALIGN=2

                  RNG_Cmd PROC
;;;122      */
;;;123    void RNG_Cmd(FunctionalState NewState)
000000  b130              CBZ      r0,|L3.16|
;;;124    {
;;;125      /* Check the parameters */
;;;126      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;127    
;;;128      if (NewState != DISABLE)
;;;129      {
;;;130        /* Enable the RNG */
;;;131        RNG->CR |= RNG_CR_RNGEN;
000002  4907              LDR      r1,|L3.32|
000004  6809              LDR      r1,[r1,#0]
000006  f0410104          ORR      r1,r1,#4
00000a  4a05              LDR      r2,|L3.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L3.28|
                  |L3.16|
;;;132      }
;;;133      else
;;;134      {
;;;135        /* Disable the RNG */
;;;136        RNG->CR &= ~RNG_CR_RNGEN;
000010  4903              LDR      r1,|L3.32|
000012  6809              LDR      r1,[r1,#0]
000014  f0210104          BIC      r1,r1,#4
000018  4a01              LDR      r2,|L3.32|
00001a  6011              STR      r1,[r2,#0]
                  |L3.28|
;;;137      }
;;;138    }
00001c  4770              BX       lr
;;;139    /**
                          ENDP

00001e  0000              DCW      0x0000
                  |L3.32|
                          DCD      0x50060800

                          AREA ||i.RNG_DeInit||, CODE, READONLY, ALIGN=1

                  RNG_DeInit PROC
;;;98       */
;;;99     void RNG_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;100    {
;;;101    #if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F469_479xx)  
;;;102      /* Enable RNG reset state */
;;;103      RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, ENABLE);
000002  2101              MOVS     r1,#1
000004  2040              MOVS     r0,#0x40
000006  f7fffffe          BL       RCC_AHB2PeriphResetCmd
;;;104    
;;;105      /* Release RNG from reset state */
;;;106      RCC_AHB2PeriphResetCmd(RCC_AHB2Periph_RNG, DISABLE);
00000a  2100              MOVS     r1,#0
00000c  2040              MOVS     r0,#0x40
00000e  f7fffffe          BL       RCC_AHB2PeriphResetCmd
;;;107    #endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F469_479xx */
;;;108    #if defined(STM32F410xx)
;;;109       /* Enable RNG reset state */
;;;110      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_RNG, ENABLE);
;;;111    
;;;112      /* Release RNG from reset state */
;;;113      RCC_AHB1PeriphResetCmd(RCC_AHB1Periph_RNG, DISABLE); 
;;;114    #endif /* STM32F410xx*/  
;;;115    }
000012  bd10              POP      {r4,pc}
;;;116    
                          ENDP


                          AREA ||i.RNG_GetFlagStatus||, CODE, READONLY, ALIGN=2

                  RNG_GetFlagStatus PROC
;;;301      */
;;;302    FlagStatus RNG_GetFlagStatus(uint8_t RNG_FLAG)
000000  4601              MOV      r1,r0
;;;303    {
;;;304      FlagStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;305      /* Check the parameters */
;;;306      assert_param(IS_RNG_GET_FLAG(RNG_FLAG));
;;;307    
;;;308      /* Check the status of the specified RNG flag */
;;;309      if ((RNG->SR & RNG_FLAG) != (uint8_t)RESET)
000004  4a03              LDR      r2,|L5.20|
000006  6812              LDR      r2,[r2,#0]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L5.16|
;;;310      {
;;;311        /* RNG_FLAG is set */
;;;312        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L5.18|
                  |L5.16|
;;;313      }
;;;314      else
;;;315      {
;;;316        /* RNG_FLAG is reset */
;;;317        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L5.18|
;;;318      }
;;;319      /* Return the RNG_FLAG status */
;;;320      return  bitstatus;
;;;321    }
000012  4770              BX       lr
;;;322    
                          ENDP

                  |L5.20|
                          DCD      0x50060804

                          AREA ||i.RNG_GetITStatus||, CODE, READONLY, ALIGN=2

                  RNG_GetITStatus PROC
;;;350      */
;;;351    ITStatus RNG_GetITStatus(uint8_t RNG_IT)
000000  4601              MOV      r1,r0
;;;352    {
;;;353      ITStatus bitstatus = RESET;
000002  2000              MOVS     r0,#0
;;;354      /* Check the parameters */
;;;355      assert_param(IS_RNG_GET_IT(RNG_IT));
;;;356    
;;;357      /* Check the status of the specified RNG interrupt */
;;;358      if ((RNG->SR & RNG_IT) != (uint8_t)RESET)
000004  4a03              LDR      r2,|L6.20|
000006  6812              LDR      r2,[r2,#0]
000008  400a              ANDS     r2,r2,r1
00000a  b10a              CBZ      r2,|L6.16|
;;;359      {
;;;360        /* RNG_IT is set */
;;;361        bitstatus = SET;
00000c  2001              MOVS     r0,#1
00000e  e000              B        |L6.18|
                  |L6.16|
;;;362      }
;;;363      else
;;;364      {
;;;365        /* RNG_IT is reset */
;;;366        bitstatus = RESET;
000010  2000              MOVS     r0,#0
                  |L6.18|
;;;367      }
;;;368      /* Return the RNG_IT status */
;;;369      return bitstatus;
;;;370    }
000012  4770              BX       lr
;;;371    
                          ENDP

                  |L6.20|
                          DCD      0x50060804

                          AREA ||i.RNG_GetRandomNumber||, CODE, READONLY, ALIGN=2

                  RNG_GetRandomNumber PROC
;;;184      */
;;;185    uint32_t RNG_GetRandomNumber(void)
000000  4801              LDR      r0,|L7.8|
;;;186    {
;;;187      /* Return the 32 bit random number from the DR register */
;;;188      return RNG->DR;
000002  6800              LDR      r0,[r0,#0]
;;;189    }
000004  4770              BX       lr
;;;190    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      0x50060808

                          AREA ||i.RNG_ITConfig||, CODE, READONLY, ALIGN=2

                  RNG_ITConfig PROC
;;;275      */
;;;276    void RNG_ITConfig(FunctionalState NewState)
000000  b130              CBZ      r0,|L8.16|
;;;277    {
;;;278      /* Check the parameters */
;;;279      assert_param(IS_FUNCTIONAL_STATE(NewState));
;;;280    
;;;281      if (NewState != DISABLE)
;;;282      {
;;;283        /* Enable the RNG interrupt */
;;;284        RNG->CR |= RNG_CR_IE;
000002  4907              LDR      r1,|L8.32|
000004  6809              LDR      r1,[r1,#0]
000006  f0410108          ORR      r1,r1,#8
00000a  4a05              LDR      r2,|L8.32|
00000c  6011              STR      r1,[r2,#0]
00000e  e005              B        |L8.28|
                  |L8.16|
;;;285      }
;;;286      else
;;;287      {
;;;288        /* Disable the RNG interrupt */
;;;289        RNG->CR &= ~RNG_CR_IE;
000010  4903              LDR      r1,|L8.32|
000012  6809              LDR      r1,[r1,#0]
000014  f0210108          BIC      r1,r1,#8
000018  4a01              LDR      r2,|L8.32|
00001a  6011              STR      r1,[r2,#0]
                  |L8.28|
;;;290      }
;;;291    }
00001c  4770              BX       lr
;;;292    
                          ENDP

00001e  0000              DCW      0x0000
                  |L8.32|
                          DCD      0x50060800

;*** Start embedded assembler ***

#line 1 "..\\FWLIB\\src\\stm32f4xx_rng.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_rng_c_3ce7902d____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___15_stm32f4xx_rng_c_3ce7902d____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_rng_c_3ce7902d____REVSH|
#line 153
|__asm___15_stm32f4xx_rng_c_3ce7902d____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___15_stm32f4xx_rng_c_3ce7902d____RRX|
#line 328
|__asm___15_stm32f4xx_rng_c_3ce7902d____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
