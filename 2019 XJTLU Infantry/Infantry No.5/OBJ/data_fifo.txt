; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\data_fifo.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\data_fifo.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\data_fifo.crf ..\BSP\data_fifo.c]
                          THUMB

                          AREA ||i.fifo_flush||, CODE, READONLY, ALIGN=1

                  fifo_flush PROC
;;;292    ******************************************************************************************/
;;;293    uint8_t fifo_flush(fifo_s_t* pfifo)
000000  4601              MOV      r1,r0
;;;294    {
;;;295      //! Check input parameters.
;;;296      ASSERT(NULL != pfifo);
000002  bf00              NOP      
000004  bf00              NOP      
                  |L1.6|
000006  2900              CMP      r1,#0
000008  d0fd              BEQ      |L1.6|
00000a  bf00              NOP      
;;;297    
;;;298      //! Initialize FIFO Control Block.
;;;299    //  MUTEX_WAIT();
;;;300      pfifo->free        = pfifo->buf_size;
00000c  68c8              LDR      r0,[r1,#0xc]
00000e  6088              STR      r0,[r1,#8]
;;;301      pfifo->used        = 0;
000010  2000              MOVS     r0,#0
000012  6108              STR      r0,[r1,#0x10]
;;;302      pfifo->read_index  = 0;
000014  7508              STRB     r0,[r1,#0x14]
;;;303      pfifo->write_index = 0;
000016  7548              STRB     r0,[r1,#0x15]
;;;304    //  MUTEX_RELEASE();
;;;305    
;;;306      return 0;
;;;307    }
000018  4770              BX       lr
;;;308    
                          ENDP


                          AREA ||i.fifo_free_count||, CODE, READONLY, ALIGN=1

                  fifo_free_count PROC
;;;274    ******************************************************************************************/
;;;275    uint32_t fifo_free_count(fifo_s_t* pfifo)
000000  4601              MOV      r1,r0
;;;276    {
;;;277      //! Check input parameter.
;;;278      ASSERT(NULL != pfifo);
000002  bf00              NOP      
000004  bf00              NOP      
                  |L2.6|
000006  2900              CMP      r1,#0
000008  d0fd              BEQ      |L2.6|
00000a  bf00              NOP      
;;;279    
;;;280      return (pfifo->free);
00000c  6888              LDR      r0,[r1,#8]
;;;281    }
00000e  4770              BX       lr
;;;282    
                          ENDP


                          AREA ||i.fifo_is_empty||, CODE, READONLY, ALIGN=1

                  fifo_is_empty PROC
;;;234    ******************************************************************************************/
;;;235    uint8_t fifo_is_empty(fifo_s_t* pfifo)
000000  4601              MOV      r1,r0
;;;236    {
;;;237      //! Check input parameter.
;;;238      ASSERT(NULL != pfifo);
000002  bf00              NOP      
000004  bf00              NOP      
                  |L3.6|
000006  2900              CMP      r1,#0
000008  d0fd              BEQ      |L3.6|
00000a  bf00              NOP      
;;;239    
;;;240      return (0 == pfifo->used);
00000c  6908              LDR      r0,[r1,#0x10]
00000e  b908              CBNZ     r0,|L3.20|
000010  2001              MOVS     r0,#1
                  |L3.18|
;;;241    }
000012  4770              BX       lr
                  |L3.20|
000014  2000              MOVS     r0,#0                 ;240
000016  e7fc              B        |L3.18|
;;;242    
                          ENDP


                          AREA ||i.fifo_is_full||, CODE, READONLY, ALIGN=1

                  fifo_is_full PROC
;;;248    *****************************************************************************************/
;;;249    uint8_t fifo_is_full(fifo_s_t* pfifo)
000000  4601              MOV      r1,r0
;;;250    {
;;;251      //! Check input parameter.
;;;252      ASSERT(NULL != pfifo);
000002  bf00              NOP      
000004  bf00              NOP      
                  |L4.6|
000006  2900              CMP      r1,#0
000008  d0fd              BEQ      |L4.6|
00000a  bf00              NOP      
;;;253    
;;;254      return (0 == pfifo->free);
00000c  6888              LDR      r0,[r1,#8]
00000e  b908              CBNZ     r0,|L4.20|
000010  2001              MOVS     r0,#1
                  |L4.18|
;;;255    }
000012  4770              BX       lr
                  |L4.20|
000014  2000              MOVS     r0,#0                 ;254
000016  e7fc              B        |L4.18|
;;;256    
                          ENDP


                          AREA ||i.fifo_s_create||, CODE, READONLY, ALIGN=1

                  fifo_s_create PROC
;;;30     
;;;31     fifo_s_t* fifo_s_create(uint32_t unit_cnt)
000000  b570              PUSH     {r4-r6,lr}
;;;32     {
000002  4604              MOV      r4,r0
;;;33       fifo_s_t *pfifo     = NULL;
000004  2500              MOVS     r5,#0
;;;34       uint8_t  *base_addr = NULL;
000006  2600              MOVS     r6,#0
;;;35       
;;;36       //! Allocate Memory for pointer of new FIFO Control Block.
;;;37       pfifo = (fifo_s_t*) malloc(sizeof(fifo_s_t));
000008  2018              MOVS     r0,#0x18
00000a  f7fffffe          BL       malloc
00000e  4605              MOV      r5,r0
;;;38       if(NULL == pfifo)
000010  b90d              CBNZ     r5,|L5.22|
;;;39       {
;;;40         //! Allocate Failure, exit now.
;;;41         return (NULL);
000012  2000              MOVS     r0,#0
                  |L5.20|
;;;42       }
;;;43     
;;;44       //! Allocate memory for FIFO.
;;;45       base_addr = malloc(unit_cnt);
;;;46       if(NULL == base_addr)
;;;47       {
;;;48         //! Allocate Failure, exit now.
;;;49         return (NULL);
;;;50       }
;;;51     
;;;52       fifo_s_init(pfifo, base_addr, unit_cnt);
;;;53     
;;;54       return (pfifo);
;;;55     }
000014  bd70              POP      {r4-r6,pc}
                  |L5.22|
000016  4620              MOV      r0,r4                 ;45
000018  f7fffffe          BL       malloc
00001c  4606              MOV      r6,r0                 ;45
00001e  b90e              CBNZ     r6,|L5.36|
000020  2000              MOVS     r0,#0                 ;49
000022  e7f7              B        |L5.20|
                  |L5.36|
000024  4622              MOV      r2,r4                 ;52
000026  4631              MOV      r1,r6                 ;52
000028  4628              MOV      r0,r5                 ;52
00002a  f7fffffe          BL       fifo_s_init
00002e  4628              MOV      r0,r5                 ;54
000030  e7f0              B        |L5.20|
;;;56     
                          ENDP


                          AREA ||i.fifo_s_destory||, CODE, READONLY, ALIGN=1

                  fifo_s_destory PROC
;;;56     
;;;57     void fifo_s_destory(fifo_s_t* pfifo)
000000  b510              PUSH     {r4,lr}
;;;58     {
000002  4604              MOV      r4,r0
;;;59       //! Check input parameters.
;;;60       ASSERT(NULL != pfifo);
000004  bf00              NOP      
000006  bf00              NOP      
                  |L6.8|
000008  2c00              CMP      r4,#0
00000a  d0fd              BEQ      |L6.8|
00000c  bf00              NOP      
;;;61       ASSERT(NULL != pfifo->start_addr);
00000e  bf00              NOP      
000010  bf00              NOP      
                  |L6.18|
000012  6820              LDR      r0,[r4,#0]
000014  2800              CMP      r0,#0
000016  d0fc              BEQ      |L6.18|
000018  bf00              NOP      
;;;62     
;;;63       //! free FIFO memory
;;;64       free(pfifo->start_addr);
00001a  6820              LDR      r0,[r4,#0]
00001c  f7fffffe          BL       free
;;;65       
;;;66       //! free FIFO Control Block memory.
;;;67       free(pfifo);
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       free
;;;68     
;;;69       return;
;;;70     }
000026  bd10              POP      {r4,pc}
;;;71     
                          ENDP


                          AREA ||i.fifo_s_get||, CODE, READONLY, ALIGN=1

                  fifo_s_get PROC
;;;161    ******************************************************************************************/
;;;162    uint8_t fifo_s_get(fifo_s_t* pfifo)
000000  b510              PUSH     {r4,lr}
;;;163    {
000002  4601              MOV      r1,r0
;;;164      uint8_t   retval = 0;
000004  2000              MOVS     r0,#0
;;;165      
;;;166      //! Check input parameters.
;;;167      ASSERT(NULL != pfifo);
000006  bf00              NOP      
000008  bf00              NOP      
                  |L7.10|
00000a  2900              CMP      r1,#0
00000c  d0fd              BEQ      |L7.10|
00000e  bf00              NOP      
;;;168      
;;;169    //  MUTEX_WAIT();
;;;170      retval = pfifo->start_addr[pfifo->read_index++];
000010  7d0b              LDRB     r3,[r1,#0x14]
000012  1c5a              ADDS     r2,r3,#1
000014  750a              STRB     r2,[r1,#0x14]
000016  680a              LDR      r2,[r1,#0]
000018  5cd0              LDRB     r0,[r2,r3]
;;;171      pfifo->read_index %= pfifo->buf_size;
00001a  7d0a              LDRB     r2,[r1,#0x14]
00001c  68cb              LDR      r3,[r1,#0xc]
00001e  fbb2f4f3          UDIV     r4,r2,r3
000022  fb032214          MLS      r2,r3,r4,r2
000026  750a              STRB     r2,[r1,#0x14]
;;;172      pfifo->free++;
000028  688a              LDR      r2,[r1,#8]
00002a  1c52              ADDS     r2,r2,#1
00002c  608a              STR      r2,[r1,#8]
;;;173      pfifo->used--;
00002e  690a              LDR      r2,[r1,#0x10]
000030  1e52              SUBS     r2,r2,#1
000032  610a              STR      r2,[r1,#0x10]
;;;174     // MUTEX_RELEASE();
;;;175    
;;;176      return retval;
;;;177    }
000034  bd10              POP      {r4,pc}
;;;178    
                          ENDP


                          AREA ||i.fifo_s_gets||, CODE, READONLY, ALIGN=1

                  fifo_s_gets PROC
;;;178    
;;;179    uint16_t fifo_s_gets(fifo_s_t* pfifo, uint8_t* source, uint8_t len)
000000  b5f0              PUSH     {r4-r7,lr}
;;;180    {
000002  4603              MOV      r3,r0
;;;181      uint8_t   retval = 0;
000004  2400              MOVS     r4,#0
;;;182      //! Check input parameters.
;;;183      ASSERT(NULL != pfifo);
000006  bf00              NOP      
000008  bf00              NOP      
                  |L8.10|
00000a  2b00              CMP      r3,#0
00000c  d0fd              BEQ      |L8.10|
00000e  bf00              NOP      
;;;184      
;;;185    //  MUTEX_WAIT();
;;;186      for (int i = 0; (i < len) && (pfifo->used > 0); i++)
000010  2000              MOVS     r0,#0
000012  e015              B        |L8.64|
                  |L8.20|
;;;187      {
;;;188        source[i] = pfifo->start_addr[pfifo->read_index++];
000014  7d1e              LDRB     r6,[r3,#0x14]
000016  1c75              ADDS     r5,r6,#1
000018  751d              STRB     r5,[r3,#0x14]
00001a  681d              LDR      r5,[r3,#0]
00001c  5dad              LDRB     r5,[r5,r6]
00001e  540d              STRB     r5,[r1,r0]
;;;189        pfifo->read_index %= pfifo->buf_size;
000020  7d1d              LDRB     r5,[r3,#0x14]
000022  68de              LDR      r6,[r3,#0xc]
000024  fbb5f7f6          UDIV     r7,r5,r6
000028  fb065517          MLS      r5,r6,r7,r5
00002c  751d              STRB     r5,[r3,#0x14]
;;;190        pfifo->free++;
00002e  689d              LDR      r5,[r3,#8]
000030  1c6d              ADDS     r5,r5,#1
000032  609d              STR      r5,[r3,#8]
;;;191        pfifo->used--;
000034  691d              LDR      r5,[r3,#0x10]
000036  1e6d              SUBS     r5,r5,#1
000038  611d              STR      r5,[r3,#0x10]
;;;192        retval++;
00003a  1c65              ADDS     r5,r4,#1
00003c  b2ec              UXTB     r4,r5
00003e  1c40              ADDS     r0,r0,#1              ;186
                  |L8.64|
000040  4290              CMP      r0,r2                 ;186
000042  da02              BGE      |L8.74|
000044  691d              LDR      r5,[r3,#0x10]         ;186
000046  2d00              CMP      r5,#0                 ;186
000048  d1e4              BNE      |L8.20|
                  |L8.74|
;;;193      }
;;;194    //  MUTEX_RELEASE();
;;;195    
;;;196      return retval;
00004a  4620              MOV      r0,r4
;;;197    }
00004c  bdf0              POP      {r4-r7,pc}
;;;198    
                          ENDP


                          AREA ||i.fifo_s_init||, CODE, READONLY, ALIGN=1

                  fifo_s_init PROC
;;;73     
;;;74     int32_t fifo_s_init(fifo_s_t* pfifo, void* base_addr, uint32_t unit_cnt)
000000  4603              MOV      r3,r0
;;;75     {
;;;76       
;;;77         //! Initialize FIFO Control Block.
;;;78         pfifo->start_addr  = (uint8_t*) base_addr;
000002  6019              STR      r1,[r3,#0]
;;;79         pfifo->end_addr    = (uint8_t*) base_addr + unit_cnt - 1;
000004  1888              ADDS     r0,r1,r2
000006  1e40              SUBS     r0,r0,#1
000008  6058              STR      r0,[r3,#4]
;;;80         pfifo->buf_size    = unit_cnt;
00000a  60da              STR      r2,[r3,#0xc]
;;;81         pfifo->free        = unit_cnt;
00000c  609a              STR      r2,[r3,#8]
;;;82         pfifo->used        = 0;
00000e  2000              MOVS     r0,#0
000010  6118              STR      r0,[r3,#0x10]
;;;83         pfifo->read_index  = 0;
000012  7518              STRB     r0,[r3,#0x14]
;;;84         pfifo->write_index = 0;
000014  7558              STRB     r0,[r3,#0x15]
;;;85         
;;;86         return 0;
;;;87     }
000016  4770              BX       lr
;;;88     
                          ENDP


                          AREA ||i.fifo_s_pre_read||, CODE, READONLY, ALIGN=1

                  fifo_s_pre_read PROC
;;;208    ******************************************************************************************/
;;;209    uint8_t fifo_s_pre_read(fifo_s_t* pfifo, uint8_t offset)
000000  b530              PUSH     {r4,r5,lr}
;;;210    {
000002  4602              MOV      r2,r0
;;;211      uint32_t index;
;;;212    
;;;213      //! Check input parameters.
;;;214      ASSERT(NULL != pfifo);
000004  bf00              NOP      
000006  bf00              NOP      
                  |L10.8|
000008  2a00              CMP      r2,#0
00000a  d0fd              BEQ      |L10.8|
00000c  bf00              NOP      
;;;215    
;;;216      if(offset > pfifo->used)
00000e  6910              LDR      r0,[r2,#0x10]
000010  4288              CMP      r0,r1
000012  d201              BCS      |L10.24|
;;;217      {        
;;;218        return 0x00;
000014  2000              MOVS     r0,#0
                  |L10.22|
;;;219      }
;;;220      else
;;;221      {
;;;222        index = ((pfifo->read_index + offset) % pfifo->buf_size);
;;;223        // Move Read Pointer to right position   
;;;224        return pfifo->start_addr[index];
;;;225      }
;;;226    }
000016  bd30              POP      {r4,r5,pc}
                  |L10.24|
000018  7d10              LDRB     r0,[r2,#0x14]         ;222
00001a  4408              ADD      r0,r0,r1              ;222
00001c  68d4              LDR      r4,[r2,#0xc]          ;222
00001e  fbb0f5f4          UDIV     r5,r0,r4              ;222
000022  fb040315          MLS      r3,r4,r5,r0           ;222
000026  6810              LDR      r0,[r2,#0]            ;224
000028  5cc0              LDRB     r0,[r0,r3]            ;224
00002a  e7f4              B        |L10.22|
;;;227    
                          ENDP


                          AREA ||i.fifo_s_put||, CODE, READONLY, ALIGN=1

                  fifo_s_put PROC
;;;100    *******************************************************************************************/
;;;101    int32_t fifo_s_put(fifo_s_t* pfifo, uint8_t element)
000000  b510              PUSH     {r4,lr}
;;;102    {
000002  4602              MOV      r2,r0
;;;103      //! Check input parameters.
;;;104      ASSERT(NULL != pfifo);
000004  bf00              NOP      
000006  bf00              NOP      
                  |L11.8|
000008  2a00              CMP      r2,#0
00000a  d0fd              BEQ      |L11.8|
00000c  bf00              NOP      
;;;105    
;;;106      if(0 >= pfifo->free)
00000e  6890              LDR      r0,[r2,#8]
000010  2800              CMP      r0,#0
000012  d802              BHI      |L11.26|
;;;107      {
;;;108        //! Error, FIFO is full!
;;;109        return -1;
000014  f04f30ff          MOV      r0,#0xffffffff
                  |L11.24|
;;;110      }
;;;111      
;;;112      pfifo->start_addr[pfifo->write_index++] = element;
;;;113      pfifo->write_index %= pfifo->buf_size;
;;;114      pfifo->free--;
;;;115      pfifo->used++;
;;;116      
;;;117      return 0;
;;;118    }
000018  bd10              POP      {r4,pc}
                  |L11.26|
00001a  7d53              LDRB     r3,[r2,#0x15]         ;112
00001c  1c58              ADDS     r0,r3,#1              ;112
00001e  7550              STRB     r0,[r2,#0x15]         ;112
000020  6810              LDR      r0,[r2,#0]            ;112
000022  54c1              STRB     r1,[r0,r3]            ;112
000024  7d50              LDRB     r0,[r2,#0x15]         ;113
000026  68d3              LDR      r3,[r2,#0xc]          ;113
000028  fbb0f4f3          UDIV     r4,r0,r3              ;113
00002c  fb030014          MLS      r0,r3,r4,r0           ;113
000030  7550              STRB     r0,[r2,#0x15]         ;113
000032  6890              LDR      r0,[r2,#8]            ;114
000034  1e40              SUBS     r0,r0,#1              ;114
000036  6090              STR      r0,[r2,#8]            ;114
000038  6910              LDR      r0,[r2,#0x10]         ;115
00003a  1c40              ADDS     r0,r0,#1              ;115
00003c  6110              STR      r0,[r2,#0x10]         ;115
00003e  2000              MOVS     r0,#0                 ;117
000040  e7ea              B        |L11.24|
;;;119    
                          ENDP


                          AREA ||i.fifo_s_puts||, CODE, READONLY, ALIGN=1

                  fifo_s_puts PROC
;;;129    ******************************************************************************************/
;;;130    int32_t fifo_s_puts(fifo_s_t *pfifo, uint8_t *psource, uint32_t number)
000000  b5f0              PUSH     {r4-r7,lr}
;;;131    {
000002  4603              MOV      r3,r0
;;;132      int puts_num = 0;
000004  2400              MOVS     r4,#0
;;;133      
;;;134      //! Check input parameters.
;;;135      ASSERT(NULL != pfifo);
000006  bf00              NOP      
000008  bf00              NOP      
                  |L12.10|
00000a  2b00              CMP      r3,#0
00000c  d0fd              BEQ      |L12.10|
00000e  bf00              NOP      
;;;136      
;;;137      if(psource == NULL)
000010  b911              CBNZ     r1,|L12.24|
;;;138          return -1;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L12.22|
;;;139      
;;;140    //  MUTEX_WAIT();
;;;141      for(uint32_t i = 0; (i < number) && (pfifo->free > 0); i++)
;;;142      {
;;;143        pfifo->start_addr[pfifo->write_index++] = psource[i];
;;;144        pfifo->write_index %= pfifo->buf_size;
;;;145        pfifo->free--;
;;;146        pfifo->used++;
;;;147        puts_num++;
;;;148      }
;;;149    //  MUTEX_RELEASE();
;;;150      return puts_num;
;;;151    }
000016  bdf0              POP      {r4-r7,pc}
                  |L12.24|
000018  2000              MOVS     r0,#0                 ;141
00001a  e014              B        |L12.70|
                  |L12.28|
00001c  5c0e              LDRB     r6,[r1,r0]            ;143
00001e  7d5f              LDRB     r7,[r3,#0x15]         ;143
000020  1c7d              ADDS     r5,r7,#1              ;143
000022  755d              STRB     r5,[r3,#0x15]         ;143
000024  681d              LDR      r5,[r3,#0]            ;143
000026  55ee              STRB     r6,[r5,r7]            ;143
000028  7d5d              LDRB     r5,[r3,#0x15]         ;144
00002a  68de              LDR      r6,[r3,#0xc]          ;144
00002c  fbb5f7f6          UDIV     r7,r5,r6              ;144
000030  fb065517          MLS      r5,r6,r7,r5           ;144
000034  755d              STRB     r5,[r3,#0x15]         ;144
000036  689d              LDR      r5,[r3,#8]            ;145
000038  1e6d              SUBS     r5,r5,#1              ;145
00003a  609d              STR      r5,[r3,#8]            ;145
00003c  691d              LDR      r5,[r3,#0x10]         ;146
00003e  1c6d              ADDS     r5,r5,#1              ;146
000040  611d              STR      r5,[r3,#0x10]         ;146
000042  1c64              ADDS     r4,r4,#1              ;147
000044  1c40              ADDS     r0,r0,#1              ;141
                  |L12.70|
000046  4290              CMP      r0,r2                 ;141
000048  d202              BCS      |L12.80|
00004a  689d              LDR      r5,[r3,#8]            ;141
00004c  2d00              CMP      r5,#0                 ;141
00004e  d1e5              BNE      |L12.28|
                  |L12.80|
000050  4620              MOV      r0,r4                 ;150
000052  e7e0              B        |L12.22|
;;;152    
                          ENDP


                          AREA ||i.fifo_used_count||, CODE, READONLY, ALIGN=1

                  fifo_used_count PROC
;;;261    ******************************************************************************************/
;;;262    uint32_t fifo_used_count(fifo_s_t* pfifo)
000000  4601              MOV      r1,r0
;;;263    {
;;;264      //! Check input parameter.
;;;265      ASSERT(NULL != pfifo);
000002  bf00              NOP      
000004  bf00              NOP      
                  |L13.6|
000006  2900              CMP      r1,#0
000008  d0fd              BEQ      |L13.6|
00000a  bf00              NOP      
;;;266    
;;;267      return (pfifo->used);
00000c  6908              LDR      r0,[r1,#0x10]
;;;268    }
00000e  4770              BX       lr
;;;269    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\BSP\\data_fifo.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_data_fifo_c_e8a9d6cc____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___11_data_fifo_c_e8a9d6cc____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_data_fifo_c_e8a9d6cc____REVSH|
#line 153
|__asm___11_data_fifo_c_e8a9d6cc____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_data_fifo_c_e8a9d6cc____RRX|
#line 328
|__asm___11_data_fifo_c_e8a9d6cc____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
