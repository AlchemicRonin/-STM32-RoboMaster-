; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\power_24v.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\power_24v.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\power_24v.crf ..\BSP\power_24V.c]
                          THUMB

                          AREA ||i.power_ctrl_configuration||, CODE, READONLY, ALIGN=2

                  power_ctrl_configuration PROC
;;;2      
;;;3      void power_ctrl_configuration(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;4      {
;;;5          GPIO_InitTypeDef GPIO_InitStructure;
;;;6      
;;;7          RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOH, ENABLE);
000002  2101              MOVS     r1,#1
000004  2080              MOVS     r0,#0x80
000006  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;8      
;;;9          GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3 | GPIO_Pin_4 | GPIO_Pin_5;
00000a  203c              MOVS     r0,#0x3c
00000c  9000              STR      r0,[sp,#0]
;;;10         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;      //????????
00000e  2001              MOVS     r0,#1
000010  f88d0004          STRB     r0,[sp,#4]
;;;11         GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;     //???????
000014  2000              MOVS     r0,#0
000016  f88d0006          STRB     r0,[sp,#6]
;;;12         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz; //100MHz
00001a  2003              MOVS     r0,#3
00001c  f88d0005          STRB     r0,[sp,#5]
;;;13         GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;       //????
000020  2001              MOVS     r0,#1
000022  f88d0007          STRB     r0,[sp,#7]
;;;14         GPIO_Init(GPIOH, &GPIO_InitStructure);             //?????
000026  4669              MOV      r1,sp
000028  4806              LDR      r0,|L1.68|
00002a  f7fffffe          BL       GPIO_Init
;;;15     
;;;16         for (uint8_t i = POWER1_CTRL_SWITCH; i < POWER4_CTRL_SWITCH + 1; i++)
00002e  2400              MOVS     r4,#0
000030  e004              B        |L1.60|
                  |L1.50|
;;;17         {
;;;18             power_ctrl_off(i);
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       power_ctrl_off
000038  1c60              ADDS     r0,r4,#1              ;16
00003a  b2c4              UXTB     r4,r0                 ;16
                  |L1.60|
00003c  2c04              CMP      r4,#4                 ;16
00003e  dbf8              BLT      |L1.50|
;;;19         }
;;;20     }
000040  bd1c              POP      {r2-r4,pc}
;;;21     
                          ENDP

000042  0000              DCW      0x0000
                  |L1.68|
                          DCD      0x40021c00

                          AREA ||i.power_ctrl_off||, CODE, READONLY, ALIGN=2

                  power_ctrl_off PROC
;;;30     
;;;31     void power_ctrl_off(uint8_t num)
000000  b510              PUSH     {r4,lr}
;;;32     {
000002  4604              MOV      r4,r0
;;;33         if (num > POWER4_CTRL_SWITCH)
000004  2c03              CMP      r4,#3
000006  dd00              BLE      |L2.10|
                  |L2.8|
;;;34         {
;;;35             return;
;;;36         }
;;;37         GPIO_ResetBits(GPIOH, GPIO_Pin_2 << num);
;;;38     }
000008  bd10              POP      {r4,pc}
                  |L2.10|
00000a  2004              MOVS     r0,#4                 ;37
00000c  40a0              LSLS     r0,r0,r4              ;37
00000e  b281              UXTH     r1,r0                 ;37
000010  4802              LDR      r0,|L2.28|
000012  f7fffffe          BL       GPIO_ResetBits
000016  bf00              NOP      
000018  e7f6              B        |L2.8|
;;;39     
                          ENDP

00001a  0000              DCW      0x0000
                  |L2.28|
                          DCD      0x40021c00

                          AREA ||i.power_ctrl_on||, CODE, READONLY, ALIGN=2

                  power_ctrl_on PROC
;;;21     
;;;22     void power_ctrl_on(uint8_t num)
000000  b510              PUSH     {r4,lr}
;;;23     {
000002  4604              MOV      r4,r0
;;;24         if (num > POWER4_CTRL_SWITCH)
000004  2c03              CMP      r4,#3
000006  dd00              BLE      |L3.10|
                  |L3.8|
;;;25         {
;;;26             return;
;;;27         }
;;;28         GPIO_SetBits(GPIOH, GPIO_Pin_2 << num);
;;;29     }
000008  bd10              POP      {r4,pc}
                  |L3.10|
00000a  2004              MOVS     r0,#4                 ;28
00000c  40a0              LSLS     r0,r0,r4              ;28
00000e  b281              UXTH     r1,r0                 ;28
000010  4802              LDR      r0,|L3.28|
000012  f7fffffe          BL       GPIO_SetBits
000016  bf00              NOP      
000018  e7f6              B        |L3.8|
;;;30     
                          ENDP

00001a  0000              DCW      0x0000
                  |L3.28|
                          DCD      0x40021c00

                          AREA ||i.power_ctrl_toggle||, CODE, READONLY, ALIGN=2

                  power_ctrl_toggle PROC
;;;39     
;;;40     void power_ctrl_toggle(uint8_t num)
000000  b510              PUSH     {r4,lr}
;;;41     {
000002  4604              MOV      r4,r0
;;;42         if (num > POWER4_CTRL_SWITCH)
000004  2c03              CMP      r4,#3
000006  dd00              BLE      |L4.10|
                  |L4.8|
;;;43         {
;;;44             return;
;;;45         }
;;;46         GPIO_ToggleBits(GPIOH, GPIO_Pin_2 << num);
;;;47     }
000008  bd10              POP      {r4,pc}
                  |L4.10|
00000a  2004              MOVS     r0,#4                 ;46
00000c  40a0              LSLS     r0,r0,r4              ;46
00000e  b281              UXTH     r1,r0                 ;46
000010  4802              LDR      r0,|L4.28|
000012  f7fffffe          BL       GPIO_ToggleBits
000016  bf00              NOP      
000018  e7f6              B        |L4.8|
;;;48     
                          ENDP

00001a  0000              DCW      0x0000
                  |L4.28|
                          DCD      0x40021c00

;*** Start embedded assembler ***

#line 1 "..\\BSP\\power_24V.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_power_24V_c_9356236e____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___11_power_24V_c_9356236e____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_power_24V_c_9356236e____REVSH|
#line 153
|__asm___11_power_24V_c_9356236e____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_power_24V_c_9356236e____RRX|
#line 328
|__asm___11_power_24V_c_9356236e____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
