; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\communicate.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\communicate.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-≤Ω±¯3.8£®∂˛∂Œº”ÀŸ)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\communicate.crf ..\HAL\communicate.c]
                          THUMB

                          AREA ||i.client_show_data_send||, CODE, READONLY, ALIGN=2

                  client_show_data_send PROC
;;;149      */
;;;150    void client_show_data_send(float data1, float data2, float data3, uint8_t mask)
000000  b530              PUSH     {r4,r5,lr}
;;;151    {
000002  ed2d8b04          VPUSH    {d8-d9}
000006  b08d              SUB      sp,sp,#0x34
000008  eeb08a40          VMOV.F32 s16,s0
00000c  eef08a60          VMOV.F32 s17,s1
000010  eeb09a41          VMOV.F32 s18,s2
000014  4605              MOV      r5,r0
;;;152    	
;;;153    	client_custom_data_t 	updata ;
;;;154    	uint8_t 						tx_buf[tx_buf_length] = {0};//tx_buf_length
000016  211c              MOVS     r1,#0x1c
000018  a801              ADD      r0,sp,#4
00001a  f7fffffe          BL       __aeabi_memclr4
;;;155    	uint16_t 						i 										= 0;
00001e  2400              MOVS     r4,#0
;;;156    	
;;;157    	updata.data_cmd_id = 0xD180;
000020  f24d1080          MOV      r0,#0xd180
000024  f8ad0020          STRH     r0,[sp,#0x20]
;;;158    	updata.send_ID = 0x01;
000028  2001              MOVS     r0,#1
00002a  f8ad0022          STRH     r0,[sp,#0x22]
;;;159    	updata.receiver_ID = 0x0101;
00002e  f2401001          MOV      r0,#0x101
000032  f8ad0024          STRH     r0,[sp,#0x24]
;;;160    	updata.data1 = data1;
000036  ee180a10          VMOV     r0,s16
00003a  f8cd0026          STR      r0,[sp,#0x26]
;;;161    	updata.data2 = data2;
00003e  ee180a90          VMOV     r0,s17
000042  f8cd002a          STR      r0,[sp,#0x2a]
;;;162    	updata.data3 = data3;
000046  ee190a10          VMOV     r0,s18
00004a  f8cd002e          STR      r0,[sp,#0x2e]
;;;163    	updata.masks = mask;
00004e  f88d5032          STRB     r5,[sp,#0x32]
;;;164    	
;;;165    	protocol_packet_pack(ROBO_CONNECTION_DATA, (uint8_t *)&updata, sizeof(client_custom_data_t), DN_REG_ID, tx_buf);	//Êï∞ÊçÆÊâìÂåÖ
000052  a801              ADD      r0,sp,#4
000054  23a5              MOVS     r3,#0xa5
000056  2213              MOVS     r2,#0x13
000058  a908              ADD      r1,sp,#0x20
00005a  9000              STR      r0,[sp,#0]
00005c  f2403001          MOV      r0,#0x301
000060  f7fffffe          BL       protocol_packet_pack
;;;166    //   memcpy();
;;;167    
;;;168    	for(i = 0; i < tx_buf_length; i++)
000064  bf00              NOP      
000066  e00d              B        |L1.132|
                  |L1.104|
;;;169    	{
;;;170    		//sendata
;;;171    		USART_SendData(USART3, tx_buf[i]);
000068  a801              ADD      r0,sp,#4
00006a  5d01              LDRB     r1,[r0,r4]
00006c  4808              LDR      r0,|L1.144|
00006e  f7fffffe          BL       USART_SendData
;;;172    		while((USART3->SR&0X40)==0);//Âæ™ÁéØÂèëÈÄÅ,Áõ¥Âà∞ÂèëÈÄÅÂÆåÊØï   
000072  bf00              NOP      
                  |L1.116|
000074  4806              LDR      r0,|L1.144|
000076  8800              LDRH     r0,[r0,#0]
000078  f0000040          AND      r0,r0,#0x40
00007c  2800              CMP      r0,#0
00007e  d0f9              BEQ      |L1.116|
000080  1c60              ADDS     r0,r4,#1              ;168
000082  b284              UXTH     r4,r0                 ;168
                  |L1.132|
000084  2c1c              CMP      r4,#0x1c              ;168
000086  d3ef              BCC      |L1.104|
;;;173    	}
;;;174    }
000088  b00d              ADD      sp,sp,#0x34
00008a  ecbd8b04          VPOP     {d8-d9}
00008e  bd30              POP      {r4,r5,pc}
                          ENDP

                  |L1.144|
                          DCD      0x40004800

                          AREA ||i.protocol_packet_pack||, CODE, READONLY, ALIGN=2

                  protocol_packet_pack PROC
;;;118      */
;;;119    static uint8_t* protocol_packet_pack(uint16_t cmd_id, uint8_t *p_data, uint16_t len, uint8_t sof, uint8_t *tx_buf)	//
000000  e92d47ff          PUSH     {r0-r10,lr}
;;;120    {
000004  4688              MOV      r8,r1
000006  4616              MOV      r6,r2
000008  461f              MOV      r7,r3
00000a  9c0c              LDR      r4,[sp,#0x30]
;;;121      memset(tx_buf, 0, tx_buf_length);
00000c  211c              MOVS     r1,#0x1c
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       __aeabi_memclr
;;;122      static uint8_t seq;
;;;123      
;;;124      uint16_t frame_length = HEADER_LEN + CMD_LEN + len + CRC_LEN;	  //FRAMEHEADERÂ∏ßÈïøÂ∫¶
000014  f1060009          ADD      r0,r6,#9
000018  fa1ff980          UXTH     r9,r0
;;;125      frame_header_t *p_header = (frame_header_t*)tx_buf;							//Êï∞ÊçÆËΩ¨ÂåñÔºå‰πüÊòØËµãÂÄº
00001c  4625              MOV      r5,r4
;;;126      
;;;127      p_header->sof          = sof;
00001e  702f              STRB     r7,[r5,#0]
;;;128      p_header->data_length  = len;
000020  f8a56001          STRH     r6,[r5,#1]
;;;129      p_header->seq          = 0;
000024  2000              MOVS     r0,#0
000026  70e8              STRB     r0,[r5,#3]
;;;130      p_header->seq          = seq++;		//ÂèëÈÄÅÊï∞ÊçÆÂ∫èÂàóÂè∑
000028  480e              LDR      r0,|L2.100|
00002a  7800              LDRB     r0,[r0,#0]  ; seq
00002c  70e8              STRB     r0,[r5,#3]
00002e  480d              LDR      r0,|L2.100|
000030  7800              LDRB     r0,[r0,#0]  ; seq
000032  1c40              ADDS     r0,r0,#1
000034  490b              LDR      r1,|L2.100|
000036  7008              STRB     r0,[r1,#0]
;;;131      
;;;132      memcpy(&tx_buf[HEADER_LEN], (uint8_t*)&cmd_id, CMD_LEN);		//ËµãÂÄºÂëΩ‰ª§Á†Å  ÂëΩ‰ª§Á†ÅÊï∞ÊçÆÁªìÊûÑÁ±ªÂûã‰∏çÂêåÔºåÂº∫Âà∂ËΩ¨Âåñ
000038  f8bd0000          LDRH     r0,[sp,#0]
00003c  f8a40005          STRH     r0,[r4,#5]
;;;133      Append_CRC8_Check_Sum(tx_buf, HEADER_LEN);		//FRAMEHEADERÂ∏ßÊï∞ÊçÆCRC8Ê†°È™å
000040  2105              MOVS     r1,#5
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       Append_CRC8_Check_Sum
;;;134    	//
;;;135      memcpy(&tx_buf[HEADER_LEN + CMD_LEN], p_data, len);			//ËµãÂÄºÊï∞ÊçÆÂ∏ßÁöÑÊï∞ÊçÆÈÉ®ÂàÜ
000048  4632              MOV      r2,r6
00004a  4641              MOV      r1,r8
00004c  1de0              ADDS     r0,r4,#7
00004e  f7fffffe          BL       __aeabi_memcpy
;;;136      Append_CRC16_Check_Sum(tx_buf, frame_length);		//Êï∞ÊçÆÂ∏ßÁöÑÊï∞ÊçÆÈÉ®ÂàÜCRC16Ê†°È™å
000052  4649              MOV      r1,r9
000054  4620              MOV      r0,r4
000056  f7fffffe          BL       Append_CRC16_Check_Sum
;;;137      
;;;138      return tx_buf;
00005a  4620              MOV      r0,r4
;;;139    }
00005c  b004              ADD      sp,sp,#0x10
00005e  e8bd87f0          POP      {r4-r10,pc}
;;;140    
                          ENDP

000062  0000              DCW      0x0000
                  |L2.100|
                          DCD      ||seq||

                          AREA ||i.unpack_fifo_data||, CODE, READONLY, ALIGN=2

                  unpack_fifo_data PROC
;;;3      
;;;4      void unpack_fifo_data(unpack_data_t *p_obj, uint8_t sof)		//Ëß£ÊûêÂçèËÆÆÂ∏ßÈòüÂàóÊï∞ÊçÆÂåÖ
000000  b570              PUSH     {r4-r6,lr}
;;;5      {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
;;;6        uint8_t byte = 0;
000006  2500              MOVS     r5,#0
;;;7        
;;;8        while ( fifo_used_count(p_obj->data_fifo) )		//ÂçèËÆÆÂ∏ßfifoÂÖÉÁ¥†Êï∞ÁõÆ
000008  e09f              B        |L3.330|
                  |L3.10|
;;;9        {
;;;10        byte = fifo_s_get(p_obj->data_fifo);	//Âá∫Èòü
00000a  6820              LDR      r0,[r4,#0]
00000c  f7fffffe          BL       fifo_s_get
000010  4605              MOV      r5,r0
;;;11     		look_usat_byte= byte;
000012  4851              LDR      r0,|L3.344|
000014  7005              STRB     r5,[r0,#0]
;;;12         switch(p_obj->unpack_step)			//unpack Ê≠•È™§
000016  f89400d2          LDRB     r0,[r4,#0xd2]
00001a  2806              CMP      r0,#6
00001c  d27e              BCS      |L3.284|
00001e  e8dff000          TBB      [pc,r0]
000022  0314              DCB      0x03,0x14
000024  213a4764          DCB      0x21,0x3a,0x47,0x64
;;;13         {
;;;14           case STEP_HEADER_SOF:		//SOPÂüü  Â∏ßÂ§¥
;;;15     					 {
;;;16     						if(byte == sof)
000028  42b5              CMP      r5,r6
00002a  d10a              BNE      |L3.66|
;;;17     						{
;;;18     							 p_obj->unpack_step = STEP_LENGTH_LOW;			//‰∏ã‰∏ÄÊ≠•
00002c  2001              MOVS     r0,#1
00002e  f8040fd2          STRB     r0,[r4,#0xd2]!
;;;19     								p_obj->protocol_packet[p_obj->index++] = byte;		//ÂçèËÆÆÂ∏ßÈòüÂàóÊï∞ÊçÆÂ≠òÂÖ•Êï∞ÁªÑ
000032  8861              LDRH     r1,[r4,#2]
000034  1c48              ADDS     r0,r1,#1
000036  8060              STRH     r0,[r4,#2]
000038  3cd2              SUBS     r4,r4,#0xd2
00003a  f104000a          ADD      r0,r4,#0xa
00003e  5445              STRB     r5,[r0,r1]
000040  e002              B        |L3.72|
                  |L3.66|
;;;20     						 }
;;;21     							else
;;;22     							{
;;;23     							 p_obj->index = 0;
000042  2000              MOVS     r0,#0
000044  f8a400d4          STRH     r0,[r4,#0xd4]
                  |L3.72|
;;;24     						 }
;;;25     					 }break;
000048  e07e              B        |L3.328|
;;;26           
;;;27           case STEP_LENGTH_LOW:		//ÂçèËÆÆÂ∏ßÊï∞ÊçÆÂüüÈïøÂ∫¶‰Ωé8‰Ωç
;;;28     						{
;;;29     							p_obj->data_len = byte;
00004a  8125              STRH     r5,[r4,#8]
;;;30     							p_obj->protocol_packet[p_obj->index++] = byte;
00004c  f8b410d4          LDRH     r1,[r4,#0xd4]
000050  1c48              ADDS     r0,r1,#1
000052  f8a400d4          STRH     r0,[r4,#0xd4]
000056  f104000a          ADD      r0,r4,#0xa
00005a  5445              STRB     r5,[r0,r1]
;;;31     							p_obj->unpack_step = STEP_LENGTH_HIGH;			//‰∏ã‰∏ÄÊ≠•
00005c  2002              MOVS     r0,#2
00005e  f88400d2          STRB     r0,[r4,#0xd2]
;;;32     					 }break;
000062  e071              B        |L3.328|
;;;33     
;;;34           case STEP_LENGTH_HIGH:	//ÂçèËÆÆÂ∏ßÊï∞ÊçÆÂüüÈïøÂ∫¶È´ò8‰Ωç
;;;35     						{
;;;36     							p_obj->data_len |= (byte << 8);
000064  8920              LDRH     r0,[r4,#8]
000066  ea402005          ORR      r0,r0,r5,LSL #8
00006a  8120              STRH     r0,[r4,#8]
;;;37     							p_obj->protocol_packet[p_obj->index++] = byte;
00006c  f8b410d4          LDRH     r1,[r4,#0xd4]
000070  1c48              ADDS     r0,r1,#1
000072  f8a400d4          STRH     r0,[r4,#0xd4]
000076  f104000a          ADD      r0,r4,#0xa
00007a  5445              STRB     r5,[r0,r1]
;;;38     
;;;39     							if(p_obj->data_len < (PROTOCAL_FRAME_MAX_SIZE - HEADER_LEN - CRC_LEN))		//Â¶ÇÊûúFramerHeaderÂ∏ßÂ§¥‰∏≠ÁöÑÊï∞ÊçÆÈïøÂ∫¶Â∞è‰∫éÂÆûÈôÖÊé•Êî∂ÁöÑÂçèËÆÆÂ∏ßÁöÑÊï∞ÊçÆÂüüÁöÑÂ≠óËäÇÊï∞
00007c  8920              LDRH     r0,[r4,#8]
00007e  28c1              CMP      r0,#0xc1
000080  d203              BCS      |L3.138|
;;;40     							{
;;;41     							 p_obj->unpack_step = STEP_FRAME_SEQ;	//ËøîÂõûÁ¨¨‰∏ÄÊ≠• Â∏ßÂ§¥SOPÂüü  
000082  2003              MOVS     r0,#3
000084  f88400d2          STRB     r0,[r4,#0xd2]
000088  e004              B        |L3.148|
                  |L3.138|
;;;42     						 }
;;;43     							else
;;;44     							{
;;;45     								p_obj->unpack_step = STEP_HEADER_SOF;				//‰∏ã‰∏ÄÊ≠•
00008a  2000              MOVS     r0,#0
00008c  f88400d2          STRB     r0,[r4,#0xd2]
;;;46     								p_obj->index = 0;
000090  f8a400d4          STRH     r0,[r4,#0xd4]
                  |L3.148|
;;;47     						 }
;;;48     					 }break;
000094  e058              B        |L3.328|
;;;49         
;;;50           case STEP_FRAME_SEQ:	//ÂåÖÂ∫èÂè∑
;;;51     						{
;;;52     						 p_obj->protocol_packet[p_obj->index++] = byte;		//ÂçèËÆÆÂ∏ßÈòüÂàóÊï∞ÊçÆÂ≠òÂÖ•Êï∞ÁªÑ
000096  f8341fd4          LDRH     r1,[r4,#0xd4]!
00009a  8820              LDRH     r0,[r4,#0]
00009c  1c40              ADDS     r0,r0,#1
00009e  f82409d4          STRH     r0,[r4],#-0xd4
0000a2  f104000a          ADD      r0,r4,#0xa
0000a6  5445              STRB     r5,[r0,r1]
;;;53     						 p_obj->unpack_step = STEP_HEADER_CRC8;
0000a8  2004              MOVS     r0,#4
0000aa  f88400d2          STRB     r0,[r4,#0xd2]
;;;54     						}break;
0000ae  e04b              B        |L3.328|
;;;55     
;;;56           case STEP_HEADER_CRC8:	//FramerHeader  CRC8Ê†°È™å
;;;57     						{
;;;58     							p_obj->protocol_packet[p_obj->index++] = byte;		//ÂçèËÆÆÂ∏ßÈòüÂàóÊï∞ÊçÆÂ≠òÂÖ•Êï∞ÁªÑ
0000b0  f8341fd4          LDRH     r1,[r4,#0xd4]!
0000b4  8820              LDRH     r0,[r4,#0]
0000b6  1c40              ADDS     r0,r0,#1
0000b8  f82409d4          STRH     r0,[r4],#-0xd4
0000bc  f104000a          ADD      r0,r4,#0xa
0000c0  5445              STRB     r5,[r0,r1]
;;;59     
;;;60     							if (p_obj->index == HEADER_LEN)
0000c2  f8b400d4          LDRH     r0,[r4,#0xd4]
0000c6  2805              CMP      r0,#5
0000c8  d10e              BNE      |L3.232|
;;;61     							{
;;;62     								if ( Verify_CRC8_Check_Sum(p_obj->protocol_packet, HEADER_LEN) )	//FramerHeader crc8Ê†°È™åÈÄöËøá
0000ca  2105              MOVS     r1,#5
0000cc  f104000a          ADD      r0,r4,#0xa
0000d0  f7fffffe          BL       Verify_CRC8_Check_Sum
0000d4  b118              CBZ      r0,|L3.222|
;;;63     								{
;;;64     								 p_obj->unpack_step = STEP_DATA_CRC16;					//‰∏ã‰∏ÄÊ≠•
0000d6  2005              MOVS     r0,#5
0000d8  f88400d2          STRB     r0,[r4,#0xd2]
0000dc  e004              B        |L3.232|
                  |L3.222|
;;;65     								}
;;;66     								else
;;;67     								{
;;;68     								 p_obj->unpack_step = STEP_HEADER_SOF;		//ËøîÂõûÁ¨¨‰∏ÄÊ≠• Â∏ßÂ§¥SOPÂüü  
0000de  2000              MOVS     r0,#0
0000e0  f88400d2          STRB     r0,[r4,#0xd2]
;;;69     								 p_obj->index = 0;
0000e4  f8a400d4          STRH     r0,[r4,#0xd4]
                  |L3.232|
;;;70     							 }
;;;71     							}
;;;72     					 }break;  
0000e8  e02e              B        |L3.328|
;;;73     
;;;74           case STEP_DATA_CRC16:		//ÂçèËÆÆÂ∏ßÁöÑÊï∞ÊçÆÂüüÁöÑCRC16Ê†°È™å
;;;75     						{
;;;76     						 if (p_obj->index < (HEADER_LEN + CMD_LEN + p_obj->data_len + CRC_LEN))		//Âà§Êñ≠ÂçèËÆÆÂ∏ßÈòüÂàóÊï∞ÊçÆÊòØÂê¶ÂÖ®ÈÉ®Â≠òÂÖ•Êï∞ÁªÑ
0000ea  f8b410d4          LDRH     r1,[r4,#0xd4]
0000ee  8920              LDRH     r0,[r4,#8]
0000f0  3009              ADDS     r0,r0,#9
0000f2  4281              CMP      r1,r0
0000f4  d208              BCS      |L3.264|
;;;77     							{
;;;78     								p_obj->protocol_packet[p_obj->index++] = byte;  		//ÂçèËÆÆÂ∏ßÈòüÂàóÊï∞ÊçÆÂ≠òÂÖ•Êï∞ÁªÑ
0000f6  f8341fd4          LDRH     r1,[r4,#0xd4]!
0000fa  8820              LDRH     r0,[r4,#0]
0000fc  1c40              ADDS     r0,r0,#1
0000fe  f82409d4          STRH     r0,[r4],#-0xd4
000102  f104000a          ADD      r0,r4,#0xa
000106  5445              STRB     r5,[r0,r1]
                  |L3.264|
;;;79     						 }
;;;80     							if (p_obj->index >= (HEADER_LEN + CMD_LEN + p_obj->data_len + CRC_LEN))	//ÂçèËÆÆÂ∏ßÁöÑÊï∞ÊçÆÂüüËß£ÊûêÂÆåÔºàÂÖ®ÈÉ®ÂçèËÆÆÂ∏ßÊï∞ÊçÆÂ≠òÂÖ•Êï∞ÁªÑÔºâ
000108  f8b410d4          LDRH     r1,[r4,#0xd4]
00010c  8920              LDRH     r0,[r4,#8]
00010e  3009              ADDS     r0,r0,#9
000110  4281              CMP      r1,r0
000112  d312              BCC      |L3.314|
;;;81     							{
;;;82     							 p_obj->unpack_step = STEP_HEADER_SOF;
000114  2000              MOVS     r0,#0
000116  f88400d2          STRB     r0,[r4,#0xd2]
;;;83     							 p_obj->index = 0;
00011a  e000              B        |L3.286|
                  |L3.284|
00011c  e00e              B        |L3.316|
                  |L3.286|
00011e  f8a400d4          STRH     r0,[r4,#0xd4]
;;;84     
;;;85     							 if ( Verify_CRC16_Check_Sum(p_obj->protocol_packet, HEADER_LEN + CMD_LEN + p_obj->data_len + CRC_LEN) )	//ÈÄöËøácrc16Ê†°È™å
000122  8920              LDRH     r0,[r4,#8]
000124  f1000109          ADD      r1,r0,#9
000128  f104000a          ADD      r0,r4,#0xa
00012c  f7fffffe          BL       Verify_CRC16_Check_Sum
000130  b118              CBZ      r0,|L3.314|
;;;86     								{
;;;87     //            if (sof == UP_REG_ID)	//ÂÜçÊ¨°Âà§Êñ≠ÊòØ‰∏ä‰º†ÁöÑËá™ÂÆö‰πâÊï∞ÊçÆ
;;;88     //            {
;;;89     //              pc_data_handler(p_obj->protocol_packet);
;;;90     //            }
;;;91     //            else  //DN_REG_ID	//Á°ÆËÆ§ÊòØË£ÅÂà§Á≥ªÁªüÂèëÂá∫ÁöÑÊï∞ÊçÆ
;;;92     //            {
;;;93     										judgement_data_handler(p_obj->protocol_packet);		//ÂØπË£ÅÂà§Á≥ªÁªüÁöÑÂçèËÆÆÂ∏ß ÊãÜÂåÖÂà§Êñ≠ //Ê†πÊçÆ‰∏çÂêåÂëΩ‰ª§Á†ÅËøõË°åÁõ∏ÂÖ≥ËØ¶ÁªÜ‰ø°ÊÅØËß£Êûê
000132  f104000a          ADD      r0,r4,#0xa
000136  f7fffffe          BL       judgement_data_handler
                  |L3.314|
;;;94     //            }
;;;95     							 }
;;;96     						 }
;;;97     						}break;
00013a  e005              B        |L3.328|
                  |L3.316|
;;;98     
;;;99           default:
;;;100    							{
;;;101    								p_obj->unpack_step = STEP_HEADER_SOF;
00013c  2000              MOVS     r0,#0
00013e  f88400d2          STRB     r0,[r4,#0xd2]
;;;102    							 p_obj->index = 0;
000142  f8a400d4          STRH     r0,[r4,#0xd4]
;;;103    							}break;
000146  bf00              NOP      
                  |L3.328|
000148  bf00              NOP                            ;25
                  |L3.330|
00014a  6820              LDR      r0,[r4,#0]            ;8
00014c  f7fffffe          BL       fifo_used_count
000150  2800              CMP      r0,#0                 ;8
000152  f47faf5a          BNE      |L3.10|
;;;104    }
;;;105      }
;;;106    }
000156  bd70              POP      {r4-r6,pc}
;;;107    
                          ENDP

                  |L3.344|
                          DCD      look_usat_byte

                          AREA ||.data||, DATA, ALIGN=0

                  look_usat_byte
000000  00                DCB      0x00
                  ||seq||
000001  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\HAL\\communicate.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_communicate_c_7c084998____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___13_communicate_c_7c084998____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_communicate_c_7c084998____REVSH|
#line 153
|__asm___13_communicate_c_7c084998____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_communicate_c_7c084998____RRX|
#line 328
|__asm___13_communicate_c_7c084998____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
