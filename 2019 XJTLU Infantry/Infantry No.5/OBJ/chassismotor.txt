; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\chassismotor.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\chassismotor.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\chassismotor.crf ..\HAL\chassismotor.c]
                          THUMB

                          AREA ||i.Chassis_fllow||, CODE, READONLY, ALIGN=2

                  Chassis_fllow PROC
;;;255    float rc_x, rc_y, X_filted, Y_filted, last_rc_x, last_rc_y, aa;  
;;;256    void Chassis_fllow(float *x, float *y)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;257    { 
000004  ed2d8b0e          VPUSH    {d8-d14}
000008  4604              MOV      r4,r0
00000a  460d              MOV      r5,r1
;;;258    		float raw_x = *x, raw_y = *y;
00000c  ed940a00          VLDR     s0,[r4,#0]
000010  ee106a10          VMOV     r6,s0
000014  ed950a00          VLDR     s0,[r5,#0]
000018  ee107a10          VMOV     r7,s0
;;;259    		float ecd_angle_chazhi;
;;;260    		ecd_angle_chazhi=-(GMYawEncoder.ecd_angle - chassis_set.YAW_DIR);//(云台yaw轴的真实值减去编码器的值)
00001c  4850              LDR      r0,|L1.352|
00001e  ed900a11          VLDR     s0,[r0,#0x44]
000022  4850              LDR      r0,|L1.356|
000024  edd00a0c          VLDR     s1,[r0,#0x30]
000028  ee300a60          VSUB.F32 s0,s0,s1
00002c  eeb10a40          VNEG.F32 s0,s0
000030  eeb08a40          VMOV.F32 s16,s0
;;;261    		*x=raw_x*cos(ecd_angle_chazhi*PI_mu)+raw_y*sin(ecd_angle_chazhi*PI_mu); 
000034  ed9f0a4c          VLDR     s0,|L1.360|
000038  ee280a00          VMUL.F32 s0,s16,s0
00003c  ee101a10          VMOV     r1,s0
000040  4608              MOV      r0,r1
000042  f7fffffe          BL       __aeabi_f2d
000046  ec410b1e          VMOV     d14,r0,r1
00004a  eeb00a4e          VMOV.F32 s0,s28
00004e  eef00a6e          VMOV.F32 s1,s29
000052  f7fffffe          BL       __hardfp_sin
000056  eeb0ca40          VMOV.F32 s24,s0
00005a  eef0ca60          VMOV.F32 s25,s1
00005e  4638              MOV      r0,r7
000060  f7fffffe          BL       __aeabi_f2d
000064  ec410b1d          VMOV     d13,r0,r1
000068  ec532b1c          VMOV     r2,r3,d12
00006c  f7fffffe          BL       __aeabi_dmul
000070  ec410b1a          VMOV     d10,r0,r1
000074  ed9f0a3c          VLDR     s0,|L1.360|
000078  ee280a00          VMUL.F32 s0,s16,s0
00007c  ee101a10          VMOV     r1,s0
000080  4608              MOV      r0,r1
000082  f7fffffe          BL       __aeabi_f2d
000086  ec410b1e          VMOV     d14,r0,r1
00008a  eeb00a4e          VMOV.F32 s0,s28
00008e  eef00a6e          VMOV.F32 s1,s29
000092  f7fffffe          BL       __hardfp_cos
000096  eeb0ca40          VMOV.F32 s24,s0
00009a  eef0ca60          VMOV.F32 s25,s1
00009e  4630              MOV      r0,r6
0000a0  f7fffffe          BL       __aeabi_f2d
0000a4  ec410b1d          VMOV     d13,r0,r1
0000a8  ec532b1c          VMOV     r2,r3,d12
0000ac  f7fffffe          BL       __aeabi_dmul
0000b0  ec410b1b          VMOV     d11,r0,r1
0000b4  ec532b1a          VMOV     r2,r3,d10
0000b8  f7fffffe          BL       __aeabi_dadd
0000bc  ec410b19          VMOV     d9,r0,r1
0000c0  f7fffffe          BL       __aeabi_d2f
0000c4  6020              STR      r0,[r4,#0]
;;;262    		*y=raw_y*cos(ecd_angle_chazhi*PI_mu)-raw_x*sin(ecd_angle_chazhi*PI_mu);
0000c6  ed9f0a28          VLDR     s0,|L1.360|
0000ca  ee280a00          VMUL.F32 s0,s16,s0
0000ce  ee101a10          VMOV     r1,s0
0000d2  4608              MOV      r0,r1
0000d4  f7fffffe          BL       __aeabi_f2d
0000d8  ec410b1e          VMOV     d14,r0,r1
0000dc  eeb00a4e          VMOV.F32 s0,s28
0000e0  eef00a6e          VMOV.F32 s1,s29
0000e4  f7fffffe          BL       __hardfp_sin
0000e8  eeb0ca40          VMOV.F32 s24,s0
0000ec  eef0ca60          VMOV.F32 s25,s1
0000f0  4630              MOV      r0,r6
0000f2  f7fffffe          BL       __aeabi_f2d
0000f6  ec410b1d          VMOV     d13,r0,r1
0000fa  ec532b1c          VMOV     r2,r3,d12
0000fe  f7fffffe          BL       __aeabi_dmul
000102  ec410b1a          VMOV     d10,r0,r1
000106  ed9f0a18          VLDR     s0,|L1.360|
00010a  ee280a00          VMUL.F32 s0,s16,s0
00010e  ee101a10          VMOV     r1,s0
000112  4608              MOV      r0,r1
000114  f7fffffe          BL       __aeabi_f2d
000118  ec410b1e          VMOV     d14,r0,r1
00011c  eeb00a4e          VMOV.F32 s0,s28
000120  eef00a6e          VMOV.F32 s1,s29
000124  f7fffffe          BL       __hardfp_cos
000128  eeb0ca40          VMOV.F32 s24,s0
00012c  eef0ca60          VMOV.F32 s25,s1
000130  4638              MOV      r0,r7
000132  f7fffffe          BL       __aeabi_f2d
000136  ec410b1d          VMOV     d13,r0,r1
00013a  ec532b1c          VMOV     r2,r3,d12
00013e  f7fffffe          BL       __aeabi_dmul
000142  ec410b1b          VMOV     d11,r0,r1
000146  ec532b1a          VMOV     r2,r3,d10
00014a  f7fffffe          BL       __aeabi_dsub
00014e  ec410b19          VMOV     d9,r0,r1
000152  f7fffffe          BL       __aeabi_d2f
000156  6028              STR      r0,[r5,#0]
;;;263    }
000158  ecbd8b0e          VPOP     {d8-d14}
00015c  e8bd81f0          POP      {r4-r8,pc}
;;;264    //float max_speed = 0.0f;
                          ENDP

                  |L1.352|
                          DCD      GMYawEncoder
                  |L1.356|
                          DCD      chassis_set
                  |L1.360|
000168  3c8ef34d          DCFS     0x3c8ef34d ; 0.01744999922811985

                          AREA ||i.Set_ChassisMotor_Current||, CODE, READONLY, ALIGN=2

                  Set_ChassisMotor_Current PROC
;;;430    
;;;431    void Set_ChassisMotor_Current(int16_t cm1_iq, int16_t cm2_iq, int16_t cm3_iq, int16_t cm4_iq)		//地盘电机电流发送函数
000000  b5f0              PUSH     {r4-r7,lr}
;;;432    {
000002  b085              SUB      sp,sp,#0x14
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;433        CanTxMsg tx_message;
;;;434        tx_message.StdId = 0x200;
00000c  f44f7000          MOV      r0,#0x200
000010  9000              STR      r0,[sp,#0]
;;;435        tx_message.IDE = CAN_Id_Standard;
000012  2000              MOVS     r0,#0
000014  f88d0008          STRB     r0,[sp,#8]
;;;436        tx_message.RTR = CAN_RTR_Data;
000018  f88d0009          STRB     r0,[sp,#9]
;;;437        tx_message.DLC = 0x08;
00001c  2008              MOVS     r0,#8
00001e  f88d000a          STRB     r0,[sp,#0xa]
;;;438        
;;;439        tx_message.Data[0] = (uint8_t)(cm1_iq >> 8);
000022  0a20              LSRS     r0,r4,#8
000024  f88d000b          STRB     r0,[sp,#0xb]
;;;440        tx_message.Data[1] = (uint8_t)cm1_iq;
000028  b2e1              UXTB     r1,r4
00002a  f88d100c          STRB     r1,[sp,#0xc]
;;;441        tx_message.Data[2] = (uint8_t)(cm2_iq >> 8);
00002e  0a29              LSRS     r1,r5,#8
000030  f88d100d          STRB     r1,[sp,#0xd]
;;;442        tx_message.Data[3] = (uint8_t)cm2_iq;
000034  b2e9              UXTB     r1,r5
000036  f88d100e          STRB     r1,[sp,#0xe]
;;;443        tx_message.Data[4] = (uint8_t)(cm3_iq >> 8);
00003a  0a31              LSRS     r1,r6,#8
00003c  f88d100f          STRB     r1,[sp,#0xf]
;;;444        tx_message.Data[5] = (uint8_t)cm3_iq;
000040  b2f1              UXTB     r1,r6
000042  f88d1010          STRB     r1,[sp,#0x10]
;;;445        tx_message.Data[6] = (uint8_t)(cm4_iq >> 8);
000046  0a39              LSRS     r1,r7,#8
000048  f88d1011          STRB     r1,[sp,#0x11]
;;;446        tx_message.Data[7] = (uint8_t)cm4_iq;
00004c  b2f9              UXTB     r1,r7
00004e  f88d1012          STRB     r1,[sp,#0x12]
;;;447        CAN_Transmit(CAN1,&tx_message);
000052  4669              MOV      r1,sp
000054  4802              LDR      r0,|L2.96|
000056  f7fffffe          BL       CAN_Transmit
;;;448    }
00005a  b005              ADD      sp,sp,#0x14
00005c  bdf0              POP      {r4-r7,pc}
                          ENDP

00005e  0000              DCW      0x0000
                  |L2.96|
                          DCD      0x40006400

                          AREA ||i.chassis_init||, CODE, READONLY, ALIGN=2

                  chassis_init PROC
;;;13     
;;;14     void chassis_init(void)
000000  b500              PUSH     {lr}
;;;15     {
;;;16     	const static float chassis_x_order_filter[1] = {CHASSIS_ACCEL_X_NUM};
;;;17         const static float chassis_y_order_filter[1] = {CHASSIS_ACCEL_Y_NUM};
;;;18     	const static float chassis_follow_order_filter[1] = {CHASSIS_ACCEL_FOLLOW};
;;;19     	const static float chassis_follow_second_order_filter[1] = {CHASSIS_ACCEL_FOLLOW_SECOND};
;;;20     	const static float chassis_x_second_order_filter[1] = {CHASSIS_ACCEL_X_SECOND_NUM};
;;;21     	const static float chassis_y_second_order_filter[1] = {CHASSIS_ACCEL_Y_SECOND_NUM};
;;;22     	const static float chassis_x_stop_order_filter[1] = {CHASSIS_ACCEL_X_STOP_NUM};
;;;23     	const static float chassis_y_stop_order_filter[1] = {CHASSIS_ACCEL_Y_STOP_NUM};	
;;;24     	
;;;25     		    //用一阶滤波代替斜波函数生成
;;;26       first_order_filter_init(&chassis_set.chassis_cmd_slow_set_vx, CHASSIS_CONTROL_TIME, chassis_x_order_filter);
000002  491c              LDR      r1,|L3.116|
000004  ed9f0a1c          VLDR     s0,|L3.120|
000008  481c              LDR      r0,|L3.124|
00000a  f7fffffe          BL       first_order_filter_init
;;;27       first_order_filter_init(&chassis_set.chassis_cmd_slow_set_vy, CHASSIS_CONTROL_TIME, chassis_y_order_filter);
00000e  491c              LDR      r1,|L3.128|
000010  ed9f0a19          VLDR     s0,|L3.120|
000014  4819              LDR      r0,|L3.124|
000016  3010              ADDS     r0,r0,#0x10
000018  f7fffffe          BL       first_order_filter_init
;;;28     	first_order_filter_init(&chassis_set.chassis_cmd_slow_set_follow, CHASSIS_CONTROL_TIME, chassis_follow_order_filter);
00001c  4919              LDR      r1,|L3.132|
00001e  ed9f0a16          VLDR     s0,|L3.120|
000022  4816              LDR      r0,|L3.124|
000024  3020              ADDS     r0,r0,#0x20
000026  f7fffffe          BL       first_order_filter_init
;;;29     	first_order_filter_init(&chassis_set.chassis_cmd_slow_set_follow_second, CHASSIS_CONTROL_TIME, chassis_follow_second_order_filter);
00002a  4917              LDR      r1,|L3.136|
00002c  ed9f0a12          VLDR     s0,|L3.120|
000030  4812              LDR      r0,|L3.124|
000032  3030              ADDS     r0,r0,#0x30
000034  f7fffffe          BL       first_order_filter_init
;;;30     	first_order_filter_init(&chassis_set.chassis_cmd_slow_set_second_vx, CHASSIS_CONTROL_TIME, chassis_x_second_order_filter);
000038  4914              LDR      r1,|L3.140|
00003a  ed9f0a0f          VLDR     s0,|L3.120|
00003e  480f              LDR      r0,|L3.124|
000040  3040              ADDS     r0,r0,#0x40
000042  f7fffffe          BL       first_order_filter_init
;;;31     	first_order_filter_init(&chassis_set.chassis_cmd_slow_set_second_vy, CHASSIS_CONTROL_TIME, chassis_y_second_order_filter);
000046  4912              LDR      r1,|L3.144|
000048  ed9f0a0b          VLDR     s0,|L3.120|
00004c  480b              LDR      r0,|L3.124|
00004e  3050              ADDS     r0,r0,#0x50
000050  f7fffffe          BL       first_order_filter_init
;;;32     	first_order_filter_init(&chassis_set.chassis_cmd_stop_set_vx, CHASSIS_CONTROL_TIME, chassis_x_stop_order_filter);
000054  490f              LDR      r1,|L3.148|
000056  ed9f0a08          VLDR     s0,|L3.120|
00005a  4808              LDR      r0,|L3.124|
00005c  3060              ADDS     r0,r0,#0x60
00005e  f7fffffe          BL       first_order_filter_init
;;;33     	first_order_filter_init(&chassis_set.chassis_cmd_stop_set_vy, CHASSIS_CONTROL_TIME, chassis_y_stop_order_filter);
000062  490d              LDR      r1,|L3.152|
000064  ed9f0a04          VLDR     s0,|L3.120|
000068  4804              LDR      r0,|L3.124|
00006a  3070              ADDS     r0,r0,#0x70
00006c  f7fffffe          BL       first_order_filter_init
;;;34     		
;;;35     }
000070  bd00              POP      {pc}
;;;36     
                          ENDP

000072  0000              DCW      0x0000
                  |L3.116|
                          DCD      chassis_x_order_filter
                  |L3.120|
000078  3a83126f          DCFS     0x3a83126f ; 0.0010000000474974513
                  |L3.124|
                          DCD      chassis_set+0x50
                  |L3.128|
                          DCD      chassis_y_order_filter
                  |L3.132|
                          DCD      chassis_follow_order_filter
                  |L3.136|
                          DCD      chassis_follow_second_order_filter
                  |L3.140|
                          DCD      chassis_x_second_order_filter
                  |L3.144|
                          DCD      chassis_y_second_order_filter
                  |L3.148|
                          DCD      chassis_x_stop_order_filter
                  |L3.152|
                          DCD      chassis_y_stop_order_filter

                          AREA ||i.chassis_out_update||, CODE, READONLY, ALIGN=2

                  chassis_out_update PROC
;;;210    float out_fr, out_fl, out_bl, out_br;
;;;211    void chassis_out_update()
000000  b510              PUSH     {r4,lr}
;;;212    {
000002  ed2d8b10          VPUSH    {d8-d15}
;;;213    	chassis_set_update();
000006  f7fffffe          BL       chassis_set_update
;;;214    //	
;;;215    	out_incr[FR] = pid_incr_calc(&pid_incr[FR], chassis_set.cm1_real, chassis_set.cm_set[0]);
00000a  48fe              LDR      r0,|L4.1028|
00000c  ed901a00          VLDR     s2,[r0,#0]
000010  eef00a41          VMOV.F32 s1,s2
000014  ed901a04          VLDR     s2,[r0,#0x10]
000018  eeb00a41          VMOV.F32 s0,s2
00001c  48fa              LDR      r0,|L4.1032|
00001e  f7fffffe          BL       pid_incr_calc
000022  48fa              LDR      r0,|L4.1036|
000024  ed800a00          VSTR     s0,[r0,#0]
;;;216    	out_incr[FL] = pid_incr_calc(&pid_incr[FL], chassis_set.cm2_real, chassis_set.cm_set[1]);
000028  48f6              LDR      r0,|L4.1028|
00002a  ed901a01          VLDR     s2,[r0,#4]
00002e  eef00a41          VMOV.F32 s1,s2
000032  ed901a05          VLDR     s2,[r0,#0x14]
000036  eeb00a41          VMOV.F32 s0,s2
00003a  48f3              LDR      r0,|L4.1032|
00003c  3044              ADDS     r0,r0,#0x44
00003e  f7fffffe          BL       pid_incr_calc
000042  48f2              LDR      r0,|L4.1036|
000044  ed800a01          VSTR     s0,[r0,#4]
;;;217    	out_incr[BL] = pid_incr_calc(&pid_incr[BL], chassis_set.cm3_real, chassis_set.cm_set[2]);
000048  48ee              LDR      r0,|L4.1028|
00004a  ed901a02          VLDR     s2,[r0,#8]
00004e  eef00a41          VMOV.F32 s1,s2
000052  ed901a06          VLDR     s2,[r0,#0x18]
000056  eeb00a41          VMOV.F32 s0,s2
00005a  48eb              LDR      r0,|L4.1032|
00005c  3088              ADDS     r0,r0,#0x88
00005e  f7fffffe          BL       pid_incr_calc
000062  48ea              LDR      r0,|L4.1036|
000064  ed800a02          VSTR     s0,[r0,#8]
;;;218    	out_incr[BR] = pid_incr_calc(&pid_incr[BR], chassis_set.cm4_real, chassis_set.cm_set[3]);
000068  48e6              LDR      r0,|L4.1028|
00006a  ed901a03          VLDR     s2,[r0,#0xc]
00006e  eef00a41          VMOV.F32 s1,s2
000072  ed901a07          VLDR     s2,[r0,#0x1c]
000076  eeb00a41          VMOV.F32 s0,s2
00007a  48e3              LDR      r0,|L4.1032|
00007c  30cc              ADDS     r0,r0,#0xcc
00007e  f7fffffe          BL       pid_incr_calc
000082  48e2              LDR      r0,|L4.1036|
000084  ed800a03          VSTR     s0,[r0,#0xc]
;;;219    	if(chassis_heat_control() == 1)
000088  f7fffffe          BL       chassis_heat_control
00008c  2801              CMP      r0,#1
00008e  d114              BNE      |L4.186|
;;;220    	{
;;;221    		chassis_set.chassis_max_current = MAX_CURRENT - Calculate_Current_Value(&pid[CHASSIS_CURRENT_MAX], 60.0f, judge_rece_mesg.power_heat_data.chassis_power_buffer);
000090  48df              LDR      r0,|L4.1040|
000092  8d00              LDRH     r0,[r0,#0x28]
000094  ee000a10          VMOV     s0,r0
000098  eeb80a40          VCVT.F32.U32 s0,s0
00009c  eef00a40          VMOV.F32 s1,s0
0000a0  ed9f0adc          VLDR     s0,|L4.1044|
0000a4  48dc              LDR      r0,|L4.1048|
0000a6  f7fffffe          BL       Calculate_Current_Value
0000aa  eddf0adc          VLDR     s1,|L4.1052|
0000ae  ee300ac0          VSUB.F32 s0,s1,s0
0000b2  48d4              LDR      r0,|L4.1028|
0000b4  ed800a34          VSTR     s0,[r0,#0xd0]
0000b8  e004              B        |L4.196|
                  |L4.186|
;;;222    //		chassis_set.chassis_max_current = chassis_set.chassis_max_current < 0 ? 0 : chassis_set.chassis_max_current;
;;;223    	}
;;;224    	else 
;;;225    	{
;;;226    		chassis_set.chassis_max_current = MAX_CURRENT;
0000ba  ed9f0ad8          VLDR     s0,|L4.1052|
0000be  48d1              LDR      r0,|L4.1028|
0000c0  ed800a34          VSTR     s0,[r0,#0xd0]
                  |L4.196|
;;;227    	}
;;;228    	chassis_set.total_current_real = fabs(CM1Encoder.current) + fabs(CM2Encoder.current) + fabs(CM3Encoder.current) + fabs(CM4Encoder.current);
0000c4  49d6              LDR      r1,|L4.1056|
0000c6  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; CM4Encoder
0000ca  f7fffffe          BL       __aeabi_i2d
0000ce  ec410b1b          VMOV     d11,r0,r1
0000d2  eeb00a4b          VMOV.F32 s0,s22
0000d6  eef00a6b          VMOV.F32 s1,s23
0000da  f7fffffe          BL       __hardfp_fabs
0000de  eeb09a40          VMOV.F32 s18,s0
0000e2  eef09a60          VMOV.F32 s19,s1
0000e6  49cf              LDR      r1,|L4.1060|
0000e8  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; CM3Encoder
0000ec  f7fffffe          BL       __aeabi_i2d
0000f0  ec410b1d          VMOV     d13,r0,r1
0000f4  eeb00a4d          VMOV.F32 s0,s26
0000f8  eef00a6d          VMOV.F32 s1,s27
0000fc  f7fffffe          BL       __hardfp_fabs
000100  eeb0ba40          VMOV.F32 s22,s0
000104  eef0ba60          VMOV.F32 s23,s1
000108  49c7              LDR      r1,|L4.1064|
00010a  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; CM2Encoder
00010e  f7fffffe          BL       __aeabi_i2d
000112  ec410b1f          VMOV     d15,r0,r1
000116  eeb00a4f          VMOV.F32 s0,s30
00011a  eef00a6f          VMOV.F32 s1,s31
00011e  f7fffffe          BL       __hardfp_fabs
000122  eeb0da40          VMOV.F32 s26,s0
000126  eef0da60          VMOV.F32 s27,s1
00012a  49c0              LDR      r1,|L4.1068|
00012c  f9b1004c          LDRSH    r0,[r1,#0x4c]  ; CM1Encoder
000130  f7fffffe          BL       __aeabi_i2d
000134  ec410b1f          VMOV     d15,r0,r1
000138  eeb00a4f          VMOV.F32 s0,s30
00013c  eef00a6f          VMOV.F32 s1,s31
000140  f7fffffe          BL       __hardfp_fabs
000144  eeb0ea40          VMOV.F32 s28,s0
000148  eef0ea60          VMOV.F32 s29,s1
00014c  ec532b1d          VMOV     r2,r3,d13
000150  ec510b1e          VMOV     r0,r1,d14
000154  f7fffffe          BL       __aeabi_dadd
000158  ec410b1c          VMOV     d12,r0,r1
00015c  ec532b1b          VMOV     r2,r3,d11
000160  f7fffffe          BL       __aeabi_dadd
000164  ec410b1a          VMOV     d10,r0,r1
000168  ec532b19          VMOV     r2,r3,d9
00016c  f7fffffe          BL       __aeabi_dadd
000170  ec410b18          VMOV     d8,r0,r1
000174  f7fffffe          BL       __aeabi_d2f
000178  49a2              LDR      r1,|L4.1028|
00017a  6348              STR      r0,[r1,#0x34]  ; chassis_set
;;;229    	chassis_set.total_current_set = fabs(out_incr[FR]) + fabs(out_incr[FL]) + fabs(out_incr[BL]) + fabs(out_incr[BR]);
00017c  48a3              LDR      r0,|L4.1036|
00017e  ed900a03          VLDR     s0,[r0,#0xc]
000182  ee101a10          VMOV     r1,s0
000186  4608              MOV      r0,r1
000188  f7fffffe          BL       __aeabi_f2d
00018c  ec410b1b          VMOV     d11,r0,r1
000190  eeb00a4b          VMOV.F32 s0,s22
000194  eef00a6b          VMOV.F32 s1,s23
000198  f7fffffe          BL       __hardfp_fabs
00019c  eeb09a40          VMOV.F32 s18,s0
0001a0  eef09a60          VMOV.F32 s19,s1
0001a4  4899              LDR      r0,|L4.1036|
0001a6  ed900a02          VLDR     s0,[r0,#8]
0001aa  ee101a10          VMOV     r1,s0
0001ae  4608              MOV      r0,r1
0001b0  f7fffffe          BL       __aeabi_f2d
0001b4  ec410b1d          VMOV     d13,r0,r1
0001b8  eeb00a4d          VMOV.F32 s0,s26
0001bc  eef00a6d          VMOV.F32 s1,s27
0001c0  f7fffffe          BL       __hardfp_fabs
0001c4  eeb0ba40          VMOV.F32 s22,s0
0001c8  eef0ba60          VMOV.F32 s23,s1
0001cc  488f              LDR      r0,|L4.1036|
0001ce  ed900a01          VLDR     s0,[r0,#4]
0001d2  ee101a10          VMOV     r1,s0
0001d6  4608              MOV      r0,r1
0001d8  f7fffffe          BL       __aeabi_f2d
0001dc  ec410b1f          VMOV     d15,r0,r1
0001e0  eeb00a4f          VMOV.F32 s0,s30
0001e4  eef00a6f          VMOV.F32 s1,s31
0001e8  f7fffffe          BL       __hardfp_fabs
0001ec  eeb0da40          VMOV.F32 s26,s0
0001f0  eef0da60          VMOV.F32 s27,s1
0001f4  4885              LDR      r0,|L4.1036|
0001f6  ed900a00          VLDR     s0,[r0,#0]
0001fa  ee101a10          VMOV     r1,s0
0001fe  4608              MOV      r0,r1
000200  f7fffffe          BL       __aeabi_f2d
000204  ec410b1f          VMOV     d15,r0,r1
000208  eeb00a4f          VMOV.F32 s0,s30
00020c  eef00a6f          VMOV.F32 s1,s31
000210  f7fffffe          BL       __hardfp_fabs
000214  eeb0ea40          VMOV.F32 s28,s0
000218  eef0ea60          VMOV.F32 s29,s1
00021c  ec532b1d          VMOV     r2,r3,d13
000220  ec510b1e          VMOV     r0,r1,d14
000224  f7fffffe          BL       __aeabi_dadd
000228  ec410b1c          VMOV     d12,r0,r1
00022c  ec532b1b          VMOV     r2,r3,d11
000230  f7fffffe          BL       __aeabi_dadd
000234  ec410b1a          VMOV     d10,r0,r1
000238  ec532b19          VMOV     r2,r3,d9
00023c  f7fffffe          BL       __aeabi_dadd
000240  ec410b18          VMOV     d8,r0,r1
000244  f7fffffe          BL       __aeabi_d2f
000248  496e              LDR      r1,|L4.1028|
00024a  6388              STR      r0,[r1,#0x38]  ; chassis_set
;;;230    	chassis_set.total_current = chassis_set.total_current_set >= chassis_set.total_current_real ? chassis_set.total_current_set : chassis_set.total_current_real;
00024c  4608              MOV      r0,r1
00024e  ed900a0e          VLDR     s0,[r0,#0x38]
000252  edd00a0d          VLDR     s1,[r0,#0x34]
000256  eeb40ae0          VCMPE.F32 s0,s1
00025a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00025e  db02              BLT      |L4.614|
000260  ed900a0e          VLDR     s0,[r0,#0x38]
000264  e002              B        |L4.620|
                  |L4.614|
000266  4867              LDR      r0,|L4.1028|
000268  ed900a0d          VLDR     s0,[r0,#0x34]
                  |L4.620|
00026c  4865              LDR      r0,|L4.1028|
00026e  ed800a0f          VSTR     s0,[r0,#0x3c]
;;;231    	chassis_set.current_ratio = chassis_set.chassis_max_current / chassis_set.total_current;
000272  ed900a34          VLDR     s0,[r0,#0xd0]
000276  edd00a0f          VLDR     s1,[r0,#0x3c]
00027a  ee801a20          VDIV.F32 s2,s0,s1
00027e  ed801a13          VSTR     s2,[r0,#0x4c]
;;;232    	
;;;233    	if(chassis_set.current_ratio < 1.0f)
000282  ed900a13          VLDR     s0,[r0,#0x4c]
000286  eef70a00          VMOV.F32 s1,#1.00000000
00028a  eeb40ae0          VCMPE.F32 s0,s1
00028e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000292  d22c              BCS      |L4.750|
;;;234    	{
;;;235    		out_fr = out_incr[FR] * chassis_set.current_ratio;
000294  485d              LDR      r0,|L4.1036|
000296  ed900a00          VLDR     s0,[r0,#0]
00029a  485a              LDR      r0,|L4.1028|
00029c  edd00a13          VLDR     s1,[r0,#0x4c]
0002a0  ee200a20          VMUL.F32 s0,s0,s1
0002a4  4862              LDR      r0,|L4.1072|
0002a6  ed800a00          VSTR     s0,[r0,#0]
;;;236    		out_fl = out_incr[FL] * chassis_set.current_ratio;
0002aa  4858              LDR      r0,|L4.1036|
0002ac  ed900a01          VLDR     s0,[r0,#4]
0002b0  4854              LDR      r0,|L4.1028|
0002b2  edd00a13          VLDR     s1,[r0,#0x4c]
0002b6  ee200a20          VMUL.F32 s0,s0,s1
0002ba  485e              LDR      r0,|L4.1076|
0002bc  ed800a00          VSTR     s0,[r0,#0]
;;;237    		out_bl = out_incr[BL] * chassis_set.current_ratio;
0002c0  4852              LDR      r0,|L4.1036|
0002c2  ed900a02          VLDR     s0,[r0,#8]
0002c6  484f              LDR      r0,|L4.1028|
0002c8  edd00a13          VLDR     s1,[r0,#0x4c]
0002cc  ee200a20          VMUL.F32 s0,s0,s1
0002d0  4859              LDR      r0,|L4.1080|
0002d2  ed800a00          VSTR     s0,[r0,#0]
;;;238    		out_br = out_incr[BR] * chassis_set.current_ratio;
0002d6  484d              LDR      r0,|L4.1036|
0002d8  ed900a03          VLDR     s0,[r0,#0xc]
0002dc  4849              LDR      r0,|L4.1028|
0002de  edd00a13          VLDR     s1,[r0,#0x4c]
0002e2  ee200a20          VMUL.F32 s0,s0,s1
0002e6  4855              LDR      r0,|L4.1084|
0002e8  ed800a00          VSTR     s0,[r0,#0]
0002ec  e017              B        |L4.798|
                  |L4.750|
;;;239    		
;;;240    	}
;;;241    	else
;;;242    	{
;;;243    		out_fr = out_incr[FR];
0002ee  4847              LDR      r0,|L4.1036|
0002f0  ed900a00          VLDR     s0,[r0,#0]
0002f4  484e              LDR      r0,|L4.1072|
0002f6  ed800a00          VSTR     s0,[r0,#0]
;;;244    		out_fl = out_incr[FL];
0002fa  4844              LDR      r0,|L4.1036|
0002fc  ed900a01          VLDR     s0,[r0,#4]
000300  484c              LDR      r0,|L4.1076|
000302  ed800a00          VSTR     s0,[r0,#0]
;;;245    		out_bl = out_incr[BL];
000306  4841              LDR      r0,|L4.1036|
000308  ed900a02          VLDR     s0,[r0,#8]
00030c  484a              LDR      r0,|L4.1080|
00030e  ed800a00          VSTR     s0,[r0,#0]
;;;246    		out_br = out_incr[BR];
000312  483e              LDR      r0,|L4.1036|
000314  ed900a03          VLDR     s0,[r0,#0xc]
000318  4848              LDR      r0,|L4.1084|
00031a  ed800a00          VSTR     s0,[r0,#0]
                  |L4.798|
;;;247    	}
;;;248    	total_set = fabs(out_fr) + fabs(out_fl) + fabs(out_bl) + fabs(out_br);
00031e  4847              LDR      r0,|L4.1084|
000320  6800              LDR      r0,[r0,#0]  ; out_br
000322  f7fffffe          BL       __aeabi_f2d
000326  ec410b1b          VMOV     d11,r0,r1
00032a  eeb00a4b          VMOV.F32 s0,s22
00032e  eef00a6b          VMOV.F32 s1,s23
000332  f7fffffe          BL       __hardfp_fabs
000336  eeb09a40          VMOV.F32 s18,s0
00033a  eef09a60          VMOV.F32 s19,s1
00033e  483e              LDR      r0,|L4.1080|
000340  6800              LDR      r0,[r0,#0]  ; out_bl
000342  f7fffffe          BL       __aeabi_f2d
000346  ec410b1d          VMOV     d13,r0,r1
00034a  eeb00a4d          VMOV.F32 s0,s26
00034e  eef00a6d          VMOV.F32 s1,s27
000352  f7fffffe          BL       __hardfp_fabs
000356  eeb0ba40          VMOV.F32 s22,s0
00035a  eef0ba60          VMOV.F32 s23,s1
00035e  4835              LDR      r0,|L4.1076|
000360  6800              LDR      r0,[r0,#0]  ; out_fl
000362  f7fffffe          BL       __aeabi_f2d
000366  ec410b1f          VMOV     d15,r0,r1
00036a  eeb00a4f          VMOV.F32 s0,s30
00036e  eef00a6f          VMOV.F32 s1,s31
000372  f7fffffe          BL       __hardfp_fabs
000376  eeb0da40          VMOV.F32 s26,s0
00037a  eef0da60          VMOV.F32 s27,s1
00037e  482c              LDR      r0,|L4.1072|
000380  6800              LDR      r0,[r0,#0]  ; out_fr
000382  f7fffffe          BL       __aeabi_f2d
000386  ec410b1f          VMOV     d15,r0,r1
00038a  eeb00a4f          VMOV.F32 s0,s30
00038e  eef00a6f          VMOV.F32 s1,s31
000392  f7fffffe          BL       __hardfp_fabs
000396  eeb0ea40          VMOV.F32 s28,s0
00039a  eef0ea60          VMOV.F32 s29,s1
00039e  ec532b1d          VMOV     r2,r3,d13
0003a2  ec510b1e          VMOV     r0,r1,d14
0003a6  f7fffffe          BL       __aeabi_dadd
0003aa  ec532b1b          VMOV     r2,r3,d11
0003ae  f7fffffe          BL       __aeabi_dadd
0003b2  ec532b19          VMOV     r2,r3,d9
0003b6  f7fffffe          BL       __aeabi_dadd
0003ba  f7fffffe          BL       __aeabi_d2f
0003be  4920              LDR      r1,|L4.1088|
0003c0  6008              STR      r0,[r1,#0]  ; total_set
;;;249    	if(rc.off_line_flag == 0)
0003c2  4820              LDR      r0,|L4.1092|
0003c4  e9d01010          LDRD     r1,r0,[r0,#0x40]
0003c8  2300              MOVS     r3,#0
0003ca  4059              EORS     r1,r1,r3
0003cc  4058              EORS     r0,r0,r3
0003ce  4301              ORRS     r1,r1,r0
0003d0  d145              BNE      |L4.1118|
;;;250    		Set_ChassisMotor_Current((int16_t)out_fr, (int16_t)out_fl, (int16_t)out_bl, (int16_t)out_br);
0003d2  481a              LDR      r0,|L4.1084|
0003d4  ed900a00          VLDR     s0,[r0,#0]
0003d8  eebd0ac0          VCVT.S32.F32 s0,s0
0003dc  ee100a10          VMOV     r0,s0
0003e0  b203              SXTH     r3,r0
0003e2  4815              LDR      r0,|L4.1080|
0003e4  ed900a00          VLDR     s0,[r0,#0]
0003e8  eebd0ac0          VCVT.S32.F32 s0,s0
0003ec  ee100a10          VMOV     r0,s0
0003f0  b202              SXTH     r2,r0
0003f2  4810              LDR      r0,|L4.1076|
0003f4  ed900a00          VLDR     s0,[r0,#0]
0003f8  eebd0ac0          VCVT.S32.F32 s0,s0
0003fc  ee100a10          VMOV     r0,s0
000400  b201              SXTH     r1,r0
000402  e021              B        |L4.1096|
                  |L4.1028|
                          DCD      chassis_set
                  |L4.1032|
                          DCD      pid_incr
                  |L4.1036|
                          DCD      out_incr
                  |L4.1040|
                          DCD      judge_rece_mesg
                  |L4.1044|
000414  42700000          DCFS     0x42700000 ; 60
                  |L4.1048|
                          DCD      pid+0x4c0
                  |L4.1052|
00041c  466a6000          DCFS     0x466a6000 ; 15000
                  |L4.1056|
                          DCD      CM4Encoder
                  |L4.1060|
                          DCD      CM3Encoder
                  |L4.1064|
                          DCD      CM2Encoder
                  |L4.1068|
                          DCD      CM1Encoder
                  |L4.1072|
                          DCD      out_fr
                  |L4.1076|
                          DCD      out_fl
                  |L4.1080|
                          DCD      out_bl
                  |L4.1084|
                          DCD      out_br
                  |L4.1088|
                          DCD      total_set
                  |L4.1092|
                          DCD      ||rc||
                  |L4.1096|
000448  4809              LDR      r0,|L4.1136|
00044a  ed900a00          VLDR     s0,[r0,#0]
00044e  eebd0ac0          VCVT.S32.F32 s0,s0
000452  ee100a10          VMOV     r0,s0
000456  b200              SXTH     r0,r0
000458  f7fffffe          BL       Set_ChassisMotor_Current
00045c  e005              B        |L4.1130|
                  |L4.1118|
;;;251    	else 
;;;252    		Set_ChassisMotor_Current(0, 0, 0, 0);
00045e  2300              MOVS     r3,#0
000460  461a              MOV      r2,r3
000462  4619              MOV      r1,r3
000464  4618              MOV      r0,r3
000466  f7fffffe          BL       Set_ChassisMotor_Current
                  |L4.1130|
;;;253    }
00046a  ecbd8b10          VPOP     {d8-d15}
00046e  bd10              POP      {r4,pc}
;;;254    #define PI_mu 0.01745f 
                          ENDP

                  |L4.1136|
                          DCD      out_fr

                          AREA ||i.chassis_set_update||, CODE, READONLY, ALIGN=2

                  chassis_set_update PROC
;;;105    float follow_set = 0.0f;
;;;106    void chassis_set_update()
000000  b510              PUSH     {r4,lr}
;;;107    {
;;;108    //	float delta;
;;;109    //	static uint16_t i;
;;;110    //	static uint64_t j;
;;;111    //	static uint16_t k;
;;;112    	static uint8_t NIUYAO;
;;;113    	chassis_set.cm1_real = CM1Encoder.filter_rate;
000002  4895              LDR      r0,|L5.600|
000004  6bc0              LDR      r0,[r0,#0x3c]  ; CM1Encoder
000006  ee000a10          VMOV     s0,r0
00000a  eeb80ac0          VCVT.F32.S32 s0,s0
00000e  4893              LDR      r0,|L5.604|
000010  ed800a04          VSTR     s0,[r0,#0x10]
;;;114    	chassis_set.cm2_real = CM2Encoder.filter_rate;
000014  4892              LDR      r0,|L5.608|
000016  6bc0              LDR      r0,[r0,#0x3c]  ; CM2Encoder
000018  ee000a10          VMOV     s0,r0
00001c  eeb80ac0          VCVT.F32.S32 s0,s0
000020  488e              LDR      r0,|L5.604|
000022  ed800a05          VSTR     s0,[r0,#0x14]
;;;115    	chassis_set.cm3_real = CM3Encoder.filter_rate;
000026  488f              LDR      r0,|L5.612|
000028  6bc0              LDR      r0,[r0,#0x3c]  ; CM3Encoder
00002a  ee000a10          VMOV     s0,r0
00002e  eeb80ac0          VCVT.F32.S32 s0,s0
000032  488a              LDR      r0,|L5.604|
000034  ed800a06          VSTR     s0,[r0,#0x18]
;;;116    	chassis_set.cm4_real = CM4Encoder.filter_rate;
000038  488b              LDR      r0,|L5.616|
00003a  6bc0              LDR      r0,[r0,#0x3c]  ; CM4Encoder
00003c  ee000a10          VMOV     s0,r0
000040  eeb80ac0          VCVT.F32.S32 s0,s0
000044  4885              LDR      r0,|L5.604|
000046  ed800a07          VSTR     s0,[r0,#0x1c]
;;;117    	
;;;118    //	if(((rc.Ctrl ==1) && (rc.Q == 1)) || (feed_state.if_dance == 1))
;;;119    //	{
;;;120    //		NIUYAO = 1;
;;;121    //		j = 0;
;;;122    //		i = 0;
;;;123    //	}
;;;124    //	else if(((rc.Ctrl ==1) && (rc.E == 1)) || (feed_state.if_dance == 2))
;;;125    //		NIUYAO = 0;
;;;126    	if((rc.Ctrl ==1) && (rc.Q == 1))
00004a  4888              LDR      r0,|L5.620|
00004c  7ec0              LDRB     r0,[r0,#0x1b]  ; rc
00004e  2801              CMP      r0,#1
000050  d106              BNE      |L5.96|
000052  4886              LDR      r0,|L5.620|
000054  7e00              LDRB     r0,[r0,#0x18]  ; rc
000056  2801              CMP      r0,#1
000058  d102              BNE      |L5.96|
;;;127    	{
;;;128    		NIUYAO = 1;
00005a  4985              LDR      r1,|L5.624|
00005c  7008              STRB     r0,[r1,#0]
00005e  e00a              B        |L5.118|
                  |L5.96|
;;;129    	}
;;;130    	else if((rc.Ctrl ==1) && (rc.E == 1))
000060  4882              LDR      r0,|L5.620|
000062  7ec0              LDRB     r0,[r0,#0x1b]  ; rc
000064  2801              CMP      r0,#1
000066  d106              BNE      |L5.118|
000068  4880              LDR      r0,|L5.620|
00006a  7e40              LDRB     r0,[r0,#0x19]  ; rc
00006c  2801              CMP      r0,#1
00006e  d102              BNE      |L5.118|
;;;131    	{
;;;132    		NIUYAO = 0;
000070  2000              MOVS     r0,#0
000072  497f              LDR      r1,|L5.624|
000074  7008              STRB     r0,[r1,#0]
                  |L5.118|
;;;133    	}
;;;134    //		if(rc.sl == 1)
;;;135    //	{
;;;136    //		NIUYAO = 1;
;;;137    //////		j = 0;
;;;138    //////		i = 0;
;;;139    //	}
;;;140    //	else if(rc.sl == 3)
;;;141    //	{
;;;142    //		NIUYAO = 0;
;;;143    //	}
;;;144    //		
;;;145    //	if(feed_state.dance_flag == 1)
;;;146    //	{
;;;147    //		NIUYAO = 1;
;;;148    //	}
;;;149    //	else if(feed_state.dance_flag == 0)
;;;150    //	{
;;;151    //		NIUYAO = 0;
;;;152    //	}
;;;153    //	if(NIUYAO == 1)
;;;154    //	{
;;;155    		//扭腰
;;;156    //		j++;
;;;157    //		if(j >= T[i] / 2.0f)
;;;158    //		{
;;;159    //			i++;
;;;160    //			j = 0;
;;;161    //			k = ~k;
;;;162    //			if(i >= 20)
;;;163    //				i = 0;
;;;164    //		}
;;;165    //		if(k==0)
;;;166    //			chassis_set.follow_set = YAW_MECHANICAL_CENTRE + A[i] * sin(2.0f * M_PI / T[i] * j);
;;;167    //		else
;;;168    //			chassis_set.follow_set = YAW_MECHANICAL_CENTRE + A[i] * sin(2.0f * M_PI / T[i] * (j + T[i] / 2.0f));
;;;169    
;;;170    //	}
;;;171    //	else
;;;172    //		chassis_set.follow_set = YAW_MECHANICAL_CENTRE;
;;;173    	if(NIUYAO == 1)
000076  487e              LDR      r0,|L5.624|
000078  7800              LDRB     r0,[r0,#0]  ; NIUYAO
00007a  2801              CMP      r0,#1
00007c  d122              BNE      |L5.196|
;;;174    	{
;;;175    		//小陀螺
;;;176    		chassis_set.RAD_RC_now = t_angle.yaw_set;
00007e  487d              LDR      r0,|L5.628|
000080  ed900a02          VLDR     s0,[r0,#8]
000084  4875              LDR      r0,|L5.604|
000086  ed800a11          VSTR     s0,[r0,#0x44]
;;;177    		chassis_set.RAD_RC_diff = chassis_set.RAD_RC_now - chassis_set.RAD_RC_last ;
00008a  ed900a11          VLDR     s0,[r0,#0x44]
00008e  edd00a10          VLDR     s1,[r0,#0x40]
000092  ee300a60          VSUB.F32 s0,s0,s1
000096  ed800a12          VSTR     s0,[r0,#0x48]
;;;178    		chassis_set.RAD_RC_last = chassis_set.RAD_RC_now ;
00009a  ed900a11          VLDR     s0,[r0,#0x44]
00009e  ed800a10          VSTR     s0,[r0,#0x40]
;;;179    		
;;;180    		chassis_set.YAW_CENTRE += (0.3f + chassis_set.RAD_RC_diff );
0000a2  ed900a0a          VLDR     s0,[r0,#0x28]
0000a6  edd00a12          VLDR     s1,[r0,#0x48]
0000aa  ed9f1a73          VLDR     s2,|L5.632|
0000ae  ee700a81          VADD.F32 s1,s1,s2
0000b2  ee300a20          VADD.F32 s0,s0,s1
0000b6  ed800a0a          VSTR     s0,[r0,#0x28]
;;;181    		chassis_set.follow_set = chassis_set.YAW_CENTRE;
0000ba  ed900a0a          VLDR     s0,[r0,#0x28]
0000be  ed800a08          VSTR     s0,[r0,#0x20]
0000c2  e08a              B        |L5.474|
                  |L5.196|
;;;182    	}
;;;183    	else
;;;184    	{
;;;185    		chassis_set.RAD_RC_last = t_angle.yaw_set;
0000c4  486b              LDR      r0,|L5.628|
0000c6  ed900a02          VLDR     s0,[r0,#8]
0000ca  4864              LDR      r0,|L5.604|
0000cc  ed800a10          VSTR     s0,[r0,#0x40]
;;;186    		if(GMYawEncoder.ecd_angle < (int16_t)(chassis_set.YAW_CENTRE / 360.0f) * 360.0f + chassis_set.YAW_CENTRE_Init + 180.0f)
0000d0  ed900a0a          VLDR     s0,[r0,#0x28]
0000d4  eddf0a69          VLDR     s1,|L5.636|
0000d8  ee801a20          VDIV.F32 s2,s0,s1
0000dc  eebd0ac1          VCVT.S32.F32 s0,s2
0000e0  ee100a10          VMOV     r0,s0
0000e4  b200              SXTH     r0,r0
0000e6  ee000a10          VMOV     s0,r0
0000ea  eef80ac0          VCVT.F32.S32 s1,s0
0000ee  485b              LDR      r0,|L5.604|
0000f0  ed900a0b          VLDR     s0,[r0,#0x2c]
0000f4  ed9f1a61          VLDR     s2,|L5.636|
0000f8  ee000a81          VMLA.F32 s0,s1,s2
0000fc  eddf0a60          VLDR     s1,|L5.640|
000100  ee300a20          VADD.F32 s0,s0,s1
000104  485f              LDR      r0,|L5.644|
000106  edd00a11          VLDR     s1,[r0,#0x44]
00010a  eeb40ae0          VCMPE.F32 s0,s1
00010e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000112  dd19              BLE      |L5.328|
;;;187    			chassis_set.follow_set = (int16_t)(chassis_set.YAW_CENTRE / 360.0f) * 360.0f + chassis_set.YAW_CENTRE_Init;
000114  4851              LDR      r0,|L5.604|
000116  ed900a0a          VLDR     s0,[r0,#0x28]
00011a  eddf0a58          VLDR     s1,|L5.636|
00011e  ee801a20          VDIV.F32 s2,s0,s1
000122  eebd0ac1          VCVT.S32.F32 s0,s2
000126  ee100a10          VMOV     r0,s0
00012a  b200              SXTH     r0,r0
00012c  ee000a10          VMOV     s0,r0
000130  eef80ac0          VCVT.F32.S32 s1,s0
000134  4849              LDR      r0,|L5.604|
000136  ed900a0b          VLDR     s0,[r0,#0x2c]
00013a  ed9f1a50          VLDR     s2,|L5.636|
00013e  ee000a81          VMLA.F32 s0,s1,s2
000142  ed800a08          VSTR     s0,[r0,#0x20]
000146  e03f              B        |L5.456|
                  |L5.328|
;;;188    		else if(GMYawEncoder.ecd_angle >= (int16_t)(chassis_set.YAW_CENTRE / 360.0f) * 360.0f + chassis_set.YAW_CENTRE_Init + 180.0f)
000148  4844              LDR      r0,|L5.604|
00014a  ed900a0a          VLDR     s0,[r0,#0x28]
00014e  eddf0a4b          VLDR     s1,|L5.636|
000152  ee801a20          VDIV.F32 s2,s0,s1
000156  eebd0ac1          VCVT.S32.F32 s0,s2
00015a  ee100a10          VMOV     r0,s0
00015e  b200              SXTH     r0,r0
000160  ee000a10          VMOV     s0,r0
000164  eef80ac0          VCVT.F32.S32 s1,s0
000168  483c              LDR      r0,|L5.604|
00016a  ed900a0b          VLDR     s0,[r0,#0x2c]
00016e  ed9f1a43          VLDR     s2,|L5.636|
000172  ee000a81          VMLA.F32 s0,s1,s2
000176  eddf0a42          VLDR     s1,|L5.640|
00017a  ee300a20          VADD.F32 s0,s0,s1
00017e  4841              LDR      r0,|L5.644|
000180  edd00a11          VLDR     s1,[r0,#0x44]
000184  eeb40ae0          VCMPE.F32 s0,s1
000188  eef1fa10          VMRS     APSR_nzcv,FPSCR
00018c  d81c              BHI      |L5.456|
;;;189    			chassis_set.follow_set = (int16_t)(chassis_set.YAW_CENTRE / 360.0f + 1) * 360.0f + chassis_set.YAW_CENTRE_Init;
00018e  4833              LDR      r0,|L5.604|
000190  edd00a0a          VLDR     s1,[r0,#0x28]
000194  ed9f1a39          VLDR     s2,|L5.636|
000198  ee800a81          VDIV.F32 s0,s1,s2
00019c  eef70a00          VMOV.F32 s1,#1.00000000
0001a0  ee300a20          VADD.F32 s0,s0,s1
0001a4  eebd0ac0          VCVT.S32.F32 s0,s0
0001a8  ee100a10          VMOV     r0,s0
0001ac  b200              SXTH     r0,r0
0001ae  ee000a10          VMOV     s0,r0
0001b2  eef80ac0          VCVT.F32.S32 s1,s0
0001b6  4829              LDR      r0,|L5.604|
0001b8  ed900a0b          VLDR     s0,[r0,#0x2c]
0001bc  ed9f1a2f          VLDR     s2,|L5.636|
0001c0  ee000a81          VMLA.F32 s0,s1,s2
0001c4  ed800a08          VSTR     s0,[r0,#0x20]
                  |L5.456|
;;;190    		chassis_set.YAW_CENTRE = chassis_set.follow_set;
0001c8  4824              LDR      r0,|L5.604|
0001ca  ed900a08          VLDR     s0,[r0,#0x20]
0001ce  ed800a0a          VSTR     s0,[r0,#0x28]
;;;191    		chassis_set.YAW_DIR = chassis_set.follow_set;
0001d2  ed900a08          VLDR     s0,[r0,#0x20]
0001d6  ed800a0c          VSTR     s0,[r0,#0x30]
                  |L5.474|
;;;192    	}
;;;193    	
;;;194    //	first_order_filter_cali(&chassis_set.chassis_cmd_slow_set_follow,  chassis_set.follow_set);
;;;195    //	follow_set = chassis_set.chassis_cmd_slow_set_follow.out;
;;;196    	out[CHASSIS_FOLLOW] = Calculate_Current_Value(&pid[CHASSIS_FOLLOW], chassis_set.follow_set, GMYawEncoder.ecd_angle);
0001da  482a              LDR      r0,|L5.644|
0001dc  ed901a11          VLDR     s2,[r0,#0x44]
0001e0  eef00a41          VMOV.F32 s1,s2
0001e4  481d              LDR      r0,|L5.604|
0001e6  ed901a08          VLDR     s2,[r0,#0x20]
0001ea  eeb00a41          VMOV.F32 s0,s2
0001ee  4826              LDR      r0,|L5.648|
0001f0  f7fffffe          BL       Calculate_Current_Value
0001f4  4825              LDR      r0,|L5.652|
0001f6  ed800a08          VSTR     s0,[r0,#0x20]
;;;197    	if((int16_t)max_speed <= 755)
0001fa  4825              LDR      r0,|L5.656|
0001fc  ed900a00          VLDR     s0,[r0,#0]
000200  eebd0ac0          VCVT.S32.F32 s0,s0
000204  ee100a10          VMOV     r0,s0
000208  b200              SXTH     r0,r0
00020a  f5b07f3d          CMP      r0,#0x2f4
00020e  da0c              BGE      |L5.554|
;;;198    		first_order_filter_cali(&chassis_set.chassis_cmd_slow_set_follow,  -out[CHASSIS_FOLLOW], FOLLOW_FILTER);
000210  481e              LDR      r0,|L5.652|
000212  edd00a08          VLDR     s1,[r0,#0x20]
000216  eef10a60          VNEG.F32 s1,s1
00021a  eeb00a60          VMOV.F32 s0,s1
00021e  2102              MOVS     r1,#2
000220  480e              LDR      r0,|L5.604|
000222  3070              ADDS     r0,r0,#0x70
000224  f7fffffe          BL       first_order_filter_cali
000228  e00b              B        |L5.578|
                  |L5.554|
;;;199    	else 
;;;200    		first_order_filter_cali(&chassis_set.chassis_cmd_slow_set_follow_second,  -out[CHASSIS_FOLLOW], FOLLOW_FILTER);
00022a  4818              LDR      r0,|L5.652|
00022c  edd00a08          VLDR     s1,[r0,#0x20]
000230  eef10a60          VNEG.F32 s1,s1
000234  eeb00a60          VMOV.F32 s0,s1
000238  2102              MOVS     r1,#2
00023a  4808              LDR      r0,|L5.604|
00023c  3080              ADDS     r0,r0,#0x80
00023e  f7fffffe          BL       first_order_filter_cali
                  |L5.578|
;;;201    //	follow_set = chassis_set.chassis_cmd_slow_set_follow.out;
;;;202    	
;;;203    	
;;;204    	mecanum_Resolving(&chassis_set, (int)chassis_set.follow_filted);
000242  4806              LDR      r0,|L5.604|
000244  ed900a37          VLDR     s0,[r0,#0xdc]
000248  eebd0ac0          VCVT.S32.F32 s0,s0
00024c  ee101a10          VMOV     r1,s0
000250  f7fffffe          BL       mecanum_Resolving
;;;205    
;;;206    	
;;;207    	
;;;208    }
000254  bd10              POP      {r4,pc}
;;;209    float total_set;
                          ENDP

000256  0000              DCW      0x0000
                  |L5.600|
                          DCD      CM1Encoder
                  |L5.604|
                          DCD      chassis_set
                  |L5.608|
                          DCD      CM2Encoder
                  |L5.612|
                          DCD      CM3Encoder
                  |L5.616|
                          DCD      CM4Encoder
                  |L5.620|
                          DCD      ||rc||
                  |L5.624|
                          DCD      NIUYAO
                  |L5.628|
                          DCD      t_angle
                  |L5.632|
000278  3e99999a          DCFS     0x3e99999a ; 0.30000001192092896
                  |L5.636|
00027c  43b40000          DCFS     0x43b40000 ; 360
                  |L5.640|
000280  43340000          DCFS     0x43340000 ; 180
                  |L5.644|
                          DCD      GMYawEncoder
                  |L5.648|
                          DCD      pid+0x260
                  |L5.652|
                          DCD      out
                  |L5.656|
                          DCD      max_speed

                          AREA ||i.first_order_filter_cali||, CODE, READONLY, ALIGN=2

                  first_order_filter_cali PROC
;;;45     
;;;46     void first_order_filter_cali(first_order_filter_type_t *first_order_filter_type, float input, u8 filter)
000000  ee102a10          VMOV     r2,s0
;;;47     {
;;;48         first_order_filter_type->input = input;
000004  6002              STR      r2,[r0,#0]
;;;49     //    first_order_filter_type->out =
;;;50     //        first_order_filter_type->num[0] / (first_order_filter_type->num[0] + first_order_filter_type->frame_period) * first_order_filter_type->out + first_order_filter_type->frame_period / (first_order_filter_type->num[0] + first_order_filter_type->frame_period) * first_order_filter_type->input;
;;;51     	if(filter == X_FILTER)
000006  bb31              CBNZ     r1,|L6.86|
;;;52     	{
;;;53     		chassis_set.x_filted = 
000008  6882              LDR      r2,[r0,#8]
00000a  ee002a90          VMOV     s1,r2
00000e  68c2              LDR      r2,[r0,#0xc]
000010  ee012a10          VMOV     s2,r2
000014  ee701a81          VADD.F32 s3,s1,s2
000018  6882              LDR      r2,[r0,#8]
00001a  ee002a90          VMOV     s1,r2
00001e  ee801aa1          VDIV.F32 s2,s1,s3
000022  4a36              LDR      r2,|L6.252|
000024  edd20a35          VLDR     s1,[r2,#0xd4]
000028  ee610a20          VMUL.F32 s1,s2,s1
00002c  6882              LDR      r2,[r0,#8]
00002e  ee012a10          VMOV     s2,r2
000032  68c2              LDR      r2,[r0,#0xc]
000034  ee012a90          VMOV     s3,r2
000038  ee312a21          VADD.F32 s4,s2,s3
00003c  ee012a10          VMOV     s2,r2
000040  eec11a02          VDIV.F32 s3,s2,s4
000044  6802              LDR      r2,[r0,#0]
000046  ee012a10          VMOV     s2,r2
00004a  ee410a81          VMLA.F32 s1,s3,s2
00004e  4a2b              LDR      r2,|L6.252|
000050  edc20a35          VSTR     s1,[r2,#0xd4]
000054  e050              B        |L6.248|
                  |L6.86|
;;;54     			first_order_filter_type->num[0] / (first_order_filter_type->num[0] + first_order_filter_type->frame_period) * chassis_set.x_filted + first_order_filter_type->frame_period / (first_order_filter_type->num[0] + first_order_filter_type->frame_period) * first_order_filter_type->input;
;;;55     	}
;;;56     	else if(filter == Y_FILTER)
000056  2901              CMP      r1,#1
000058  d126              BNE      |L6.168|
;;;57     	{
;;;58     		chassis_set.y_filted = 
00005a  6882              LDR      r2,[r0,#8]
00005c  ee002a90          VMOV     s1,r2
000060  68c2              LDR      r2,[r0,#0xc]
000062  ee012a10          VMOV     s2,r2
000066  ee701a81          VADD.F32 s3,s1,s2
00006a  6882              LDR      r2,[r0,#8]
00006c  ee002a90          VMOV     s1,r2
000070  ee801aa1          VDIV.F32 s2,s1,s3
000074  4a21              LDR      r2,|L6.252|
000076  edd20a36          VLDR     s1,[r2,#0xd8]
00007a  ee610a20          VMUL.F32 s1,s2,s1
00007e  6882              LDR      r2,[r0,#8]
000080  ee012a10          VMOV     s2,r2
000084  68c2              LDR      r2,[r0,#0xc]
000086  ee012a90          VMOV     s3,r2
00008a  ee312a21          VADD.F32 s4,s2,s3
00008e  ee012a10          VMOV     s2,r2
000092  eec11a02          VDIV.F32 s3,s2,s4
000096  6802              LDR      r2,[r0,#0]
000098  ee012a10          VMOV     s2,r2
00009c  ee410a81          VMLA.F32 s1,s3,s2
0000a0  4a16              LDR      r2,|L6.252|
0000a2  edc20a36          VSTR     s1,[r2,#0xd8]
0000a6  e027              B        |L6.248|
                  |L6.168|
;;;59     			first_order_filter_type->num[0] / (first_order_filter_type->num[0] + first_order_filter_type->frame_period) * chassis_set.y_filted + first_order_filter_type->frame_period / (first_order_filter_type->num[0] + first_order_filter_type->frame_period) * first_order_filter_type->input;
;;;60     	}
;;;61     	else if(filter == FOLLOW_FILTER)
0000a8  2902              CMP      r1,#2
0000aa  d125              BNE      |L6.248|
;;;62     	{
;;;63     		chassis_set.follow_filted = 
0000ac  6882              LDR      r2,[r0,#8]
0000ae  ee002a90          VMOV     s1,r2
0000b2  68c2              LDR      r2,[r0,#0xc]
0000b4  ee012a10          VMOV     s2,r2
0000b8  ee701a81          VADD.F32 s3,s1,s2
0000bc  6882              LDR      r2,[r0,#8]
0000be  ee002a90          VMOV     s1,r2
0000c2  ee801aa1          VDIV.F32 s2,s1,s3
0000c6  4a0d              LDR      r2,|L6.252|
0000c8  edd20a37          VLDR     s1,[r2,#0xdc]
0000cc  ee610a20          VMUL.F32 s1,s2,s1
0000d0  6882              LDR      r2,[r0,#8]
0000d2  ee012a10          VMOV     s2,r2
0000d6  68c2              LDR      r2,[r0,#0xc]
0000d8  ee012a90          VMOV     s3,r2
0000dc  ee312a21          VADD.F32 s4,s2,s3
0000e0  ee012a10          VMOV     s2,r2
0000e4  eec11a02          VDIV.F32 s3,s2,s4
0000e8  6802              LDR      r2,[r0,#0]
0000ea  ee012a10          VMOV     s2,r2
0000ee  ee410a81          VMLA.F32 s1,s3,s2
0000f2  4a02              LDR      r2,|L6.252|
0000f4  edc20a37          VSTR     s1,[r2,#0xdc]
                  |L6.248|
;;;64     			first_order_filter_type->num[0] / (first_order_filter_type->num[0] + first_order_filter_type->frame_period) * chassis_set.follow_filted + first_order_filter_type->frame_period / (first_order_filter_type->num[0] + first_order_filter_type->frame_period) * first_order_filter_type->input;
;;;65     	}
;;;66     }
0000f8  4770              BX       lr
;;;67     float deal_W, deal_A, deal_S, deal_D ;
                          ENDP

0000fa  0000              DCW      0x0000
                  |L6.252|
                          DCD      chassis_set

                          AREA ||i.first_order_filter_init||, CODE, READONLY, ALIGN=2

                  first_order_filter_init PROC
;;;37     
;;;38     void first_order_filter_init(first_order_filter_type_t *first_order_filter_type, float frame_period, const float num[1])
000000  ee102a10          VMOV     r2,s0
;;;39     {
;;;40         first_order_filter_type->frame_period = frame_period;
000004  60c2              STR      r2,[r0,#0xc]
;;;41         first_order_filter_type->num[0] = num[0];
000006  680a              LDR      r2,[r1,#0]
000008  6082              STR      r2,[r0,#8]
;;;42         first_order_filter_type->input = 0.0f;
00000a  eddf0a05          VLDR     s1,|L7.32|
00000e  ee102a90          VMOV     r2,s1
000012  6002              STR      r2,[r0,#0]
;;;43         first_order_filter_type->out = 0.0f;
000014  eddf0a02          VLDR     s1,|L7.32|
000018  ee102a90          VMOV     r2,s1
00001c  6042              STR      r2,[r0,#4]
;;;44     }
00001e  4770              BX       lr
;;;45     
                          ENDP

                  |L7.32|
000020  00000000          DCFS     0x00000000 ; 0

                          AREA ||i.mecanum_Resolving||, CODE, READONLY, ALIGN=2

                  mecanum_Resolving PROC
;;;265    float state_a = 0;
;;;266    void mecanum_Resolving(Chassis_set *set, int z)
000000  b570              PUSH     {r4-r6,lr}
;;;267    {
000002  ed2d8b08          VPUSH    {d8-d11}
000006  b084              SUB      sp,sp,#0x10
000008  4604              MOV      r4,r0
00000a  460d              MOV      r5,r1
;;;268    //	float aa;
;;;269    //	float rc_x, rc_y, X, Y;  //云台的坐标系
;;;270    //	int W = 0,A = 0,S = 0,D = 0;
;;;271    	fp32 max_vector = 0.0f, vector_rate = 0.0f;
00000c  ed9f0afa          VLDR     s0,|L8.1016|
000010  eeb08a40          VMOV.F32 s16,s0
000014  ed9f0af8          VLDR     s0,|L8.1016|
000018  eeb09a40          VMOV.F32 s18,s0
;;;272        fp32 temp = 0.0f;
00001c  ed9f0af6          VLDR     s0,|L8.1016|
000020  eef08a40          VMOV.F32 s17,s0
;;;273    	fp32 wheel_speed[4] = {0.0f, 0.0f, 0.0f, 0.0f};
000024  2000              MOVS     r0,#0
000026  9000              STR      r0,[sp,#0]
000028  9001              STR      r0,[sp,#4]
00002a  9002              STR      r0,[sp,#8]
00002c  9003              STR      r0,[sp,#0xc]
;;;274        uint8_t i = 0;
00002e  2600              MOVS     r6,#0
;;;275    	
;;;276    	last_rc_x = rc_x;
000030  48f2              LDR      r0,|L8.1020|
000032  ed900a00          VLDR     s0,[r0,#0]
000036  48f2              LDR      r0,|L8.1024|
000038  ed800a00          VSTR     s0,[r0,#0]
;;;277    	rc_x = rc.R_x * CHASSIS_VX_RC_SEN;
00003c  48f1              LDR      r0,|L8.1028|
00003e  f9b00000          LDRSH    r0,[r0,#0]  ; rc
000042  ee000a10          VMOV     s0,r0
000046  eeb80ac0          VCVT.F32.S32 s0,s0
00004a  eddf0aef          VLDR     s1,|L8.1032|
00004e  ee200a20          VMUL.F32 s0,s0,s1
000052  48ea              LDR      r0,|L8.1020|
000054  ed800a00          VSTR     s0,[r0,#0]
;;;278    	rc_y = rc.R_y * CHASSIS_VY_RC_SEN;
000058  48ea              LDR      r0,|L8.1028|
00005a  f9b00002          LDRSH    r0,[r0,#2]  ; rc
00005e  ee000a10          VMOV     s0,r0
000062  eeb80ac0          VCVT.F32.S32 s0,s0
000066  eddf0ae9          VLDR     s1,|L8.1036|
00006a  ee200a20          VMUL.F32 s0,s0,s1
00006e  48e8              LDR      r0,|L8.1040|
000070  ed800a00          VSTR     s0,[r0,#0]
;;;279    	
;;;280    	if((chassis_set.y_filted > 700.0f || chassis_set.y_filted < -700.0f) || (chassis_set.x_filted > 700.0f || chassis_set.x_filted < -700.0f))
000074  48e7              LDR      r0,|L8.1044|
000076  ed900a36          VLDR     s0,[r0,#0xd8]
00007a  eddf0ae7          VLDR     s1,|L8.1048|
00007e  eeb40ae0          VCMPE.F32 s0,s1
000082  eef1fa10          VMRS     APSR_nzcv,FPSCR
000086  dc1a              BGT      |L8.190|
000088  ed900a36          VLDR     s0,[r0,#0xd8]
00008c  eddf0ae3          VLDR     s1,|L8.1052|
000090  eeb40ae0          VCMPE.F32 s0,s1
000094  eef1fa10          VMRS     APSR_nzcv,FPSCR
000098  d311              BCC      |L8.190|
00009a  ed900a35          VLDR     s0,[r0,#0xd4]
00009e  eddf0ade          VLDR     s1,|L8.1048|
0000a2  eeb40ae0          VCMPE.F32 s0,s1
0000a6  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000aa  dc08              BGT      |L8.190|
0000ac  ed900a35          VLDR     s0,[r0,#0xd4]
0000b0  eddf0ada          VLDR     s1,|L8.1052|
0000b4  eeb40ae0          VCMPE.F32 s0,s1
0000b8  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000bc  d205              BCS      |L8.202|
                  |L8.190|
;;;281    	{
;;;282    		max_speed = 1050.0f;
0000be  ed9f0ad8          VLDR     s0,|L8.1056|
0000c2  48d8              LDR      r0,|L8.1060|
0000c4  ed800a00          VSTR     s0,[r0,#0]
0000c8  e004              B        |L8.212|
                  |L8.202|
;;;283    	}
;;;284    	else 
;;;285    	{
;;;286    		max_speed =1050.0f;
0000ca  ed9f0ad5          VLDR     s0,|L8.1056|
0000ce  48d5              LDR      r0,|L8.1060|
0000d0  ed800a00          VSTR     s0,[r0,#0]
                  |L8.212|
;;;287    	}
;;;288    	if(chassis_set.y_filted <= 700.0f && chassis_set.y_filted >= -700.0f)
0000d4  48cf              LDR      r0,|L8.1044|
0000d6  ed900a36          VLDR     s0,[r0,#0xd8]
0000da  eddf0acf          VLDR     s1,|L8.1048|
0000de  eeb40ae0          VCMPE.F32 s0,s1
0000e2  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000e6  d82f              BHI      |L8.328|
0000e8  ed900a36          VLDR     s0,[r0,#0xd8]
0000ec  eddf0acb          VLDR     s1,|L8.1052|
0000f0  eeb40ae0          VCMPE.F32 s0,s1
0000f4  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000f8  db26              BLT      |L8.328|
;;;289    	{
;;;290    		state_a = 1;
0000fa  eeb70a00          VMOV.F32 s0,#1.00000000
0000fe  48ca              LDR      r0,|L8.1064|
000100  ed800a00          VSTR     s0,[r0,#0]
;;;291    //		max_speed = 755.0f;
;;;292    		if(rc.W == 1 && rc.S == 0)
000104  48bf              LDR      r0,|L8.1028|
000106  7d00              LDRB     r0,[r0,#0x14]  ; rc
000108  2801              CMP      r0,#1
00010a  d108              BNE      |L8.286|
00010c  48bd              LDR      r0,|L8.1028|
00010e  7d40              LDRB     r0,[r0,#0x15]  ; rc
000110  b928              CBNZ     r0,|L8.286|
;;;293    		{
;;;294    			rc_y = -VY_MAX;
000112  ed9f0ac6          VLDR     s0,|L8.1068|
000116  48be              LDR      r0,|L8.1040|
000118  ed800a00          VSTR     s0,[r0,#0]
00011c  e00b              B        |L8.310|
                  |L8.286|
;;;295    		}
;;;296    		else if(rc.W == 0 && rc.S == 1)
00011e  48b9              LDR      r0,|L8.1028|
000120  7d00              LDRB     r0,[r0,#0x14]  ; rc
000122  b940              CBNZ     r0,|L8.310|
000124  48b7              LDR      r0,|L8.1028|
000126  7d40              LDRB     r0,[r0,#0x15]  ; rc
000128  2801              CMP      r0,#1
00012a  d104              BNE      |L8.310|
;;;297    		{
;;;298    			rc_y = VY_MAX;
00012c  ed9f0abc          VLDR     s0,|L8.1056|
000130  48b7              LDR      r0,|L8.1040|
000132  ed800a00          VSTR     s0,[r0,#0]
                  |L8.310|
;;;299    		}
;;;300    		first_order_filter_cali(&set->chassis_cmd_slow_set_vy, rc_y, Y_FILTER);
000136  2101              MOVS     r1,#1
000138  48b5              LDR      r0,|L8.1040|
00013a  ed900a00          VLDR     s0,[r0,#0]
00013e  f1040060          ADD      r0,r4,#0x60
000142  f7fffffe          BL       first_order_filter_cali
000146  e025              B        |L8.404|
                  |L8.328|
;;;301    	}
;;;302    	else 
;;;303    	{
;;;304    		state_a = 2;
000148  eeb00a00          VMOV.F32 s0,#2.00000000
00014c  48b6              LDR      r0,|L8.1064|
00014e  ed800a00          VSTR     s0,[r0,#0]
;;;305    //		max_speed = 1050.0f;
;;;306    		if(rc.W == 1 && rc.S == 0)
000152  48ac              LDR      r0,|L8.1028|
000154  7d00              LDRB     r0,[r0,#0x14]  ; rc
000156  2801              CMP      r0,#1
000158  d108              BNE      |L8.364|
00015a  48aa              LDR      r0,|L8.1028|
00015c  7d40              LDRB     r0,[r0,#0x15]  ; rc
00015e  b928              CBNZ     r0,|L8.364|
;;;307    		{
;;;308    			rc_y = -VY_MAX_TWO_STAGE;
000160  ed9f0ab2          VLDR     s0,|L8.1068|
000164  48aa              LDR      r0,|L8.1040|
000166  ed800a00          VSTR     s0,[r0,#0]
00016a  e00b              B        |L8.388|
                  |L8.364|
;;;309    		}
;;;310    		else if(rc.W == 0 && rc.S == 1)
00016c  48a5              LDR      r0,|L8.1028|
00016e  7d00              LDRB     r0,[r0,#0x14]  ; rc
000170  b940              CBNZ     r0,|L8.388|
000172  48a4              LDR      r0,|L8.1028|
000174  7d40              LDRB     r0,[r0,#0x15]  ; rc
000176  2801              CMP      r0,#1
000178  d104              BNE      |L8.388|
;;;311    		{
;;;312    			rc_y = VY_MAX_TWO_STAGE;
00017a  ed9f0aa9          VLDR     s0,|L8.1056|
00017e  48a4              LDR      r0,|L8.1040|
000180  ed800a00          VSTR     s0,[r0,#0]
                  |L8.388|
;;;313    		}
;;;314    		first_order_filter_cali(&set->chassis_cmd_slow_set_second_vy, rc_y, Y_FILTER);
000184  2101              MOVS     r1,#1
000186  48a2              LDR      r0,|L8.1040|
000188  ed900a00          VLDR     s0,[r0,#0]
00018c  f10400a0          ADD      r0,r4,#0xa0
000190  f7fffffe          BL       first_order_filter_cali
                  |L8.404|
;;;315    	}
;;;316    	if(chassis_set.x_filted <= 700.0f && chassis_set.x_filted >= -700.0f)
000194  489f              LDR      r0,|L8.1044|
000196  ed900a35          VLDR     s0,[r0,#0xd4]
00019a  eddf0a9f          VLDR     s1,|L8.1048|
00019e  eeb40ae0          VCMPE.F32 s0,s1
0001a2  eef1fa10          VMRS     APSR_nzcv,FPSCR
0001a6  d82a              BHI      |L8.510|
0001a8  ed900a35          VLDR     s0,[r0,#0xd4]
0001ac  eddf0a9b          VLDR     s1,|L8.1052|
0001b0  eeb40ae0          VCMPE.F32 s0,s1
0001b4  eef1fa10          VMRS     APSR_nzcv,FPSCR
0001b8  db21              BLT      |L8.510|
;;;317    	{
;;;318    //		max_speed = 755.0f;
;;;319    		if(rc.A == 1 && rc.D == 0)
0001ba  4892              LDR      r0,|L8.1028|
0001bc  7d80              LDRB     r0,[r0,#0x16]  ; rc
0001be  2801              CMP      r0,#1
0001c0  d108              BNE      |L8.468|
0001c2  4890              LDR      r0,|L8.1028|
0001c4  7dc0              LDRB     r0,[r0,#0x17]  ; rc
0001c6  b928              CBNZ     r0,|L8.468|
;;;320    		{
;;;321    			rc_x = VX_MAX;
0001c8  ed9f0a95          VLDR     s0,|L8.1056|
0001cc  488b              LDR      r0,|L8.1020|
0001ce  ed800a00          VSTR     s0,[r0,#0]
0001d2  e00b              B        |L8.492|
                  |L8.468|
;;;322    		}
;;;323    		else if(rc.A == 0 && rc.D == 1)
0001d4  488b              LDR      r0,|L8.1028|
0001d6  7d80              LDRB     r0,[r0,#0x16]  ; rc
0001d8  b940              CBNZ     r0,|L8.492|
0001da  488a              LDR      r0,|L8.1028|
0001dc  7dc0              LDRB     r0,[r0,#0x17]  ; rc
0001de  2801              CMP      r0,#1
0001e0  d104              BNE      |L8.492|
;;;324    		{
;;;325    			rc_x = -VX_MAX;
0001e2  ed9f0a92          VLDR     s0,|L8.1068|
0001e6  4885              LDR      r0,|L8.1020|
0001e8  ed800a00          VSTR     s0,[r0,#0]
                  |L8.492|
;;;326    		}
;;;327    		first_order_filter_cali(&set->chassis_cmd_slow_set_vx, rc_x, X_FILTER);
0001ec  2100              MOVS     r1,#0
0001ee  4883              LDR      r0,|L8.1020|
0001f0  ed900a00          VLDR     s0,[r0,#0]
0001f4  f1040050          ADD      r0,r4,#0x50
0001f8  f7fffffe          BL       first_order_filter_cali
0001fc  e020              B        |L8.576|
                  |L8.510|
;;;328    	}
;;;329    	else 
;;;330    	{
;;;331    //		max_speed = 1050.0f;
;;;332    		if(rc.A == 1 && rc.D == 0)
0001fe  4881              LDR      r0,|L8.1028|
000200  7d80              LDRB     r0,[r0,#0x16]  ; rc
000202  2801              CMP      r0,#1
000204  d108              BNE      |L8.536|
000206  487f              LDR      r0,|L8.1028|
000208  7dc0              LDRB     r0,[r0,#0x17]  ; rc
00020a  b928              CBNZ     r0,|L8.536|
;;;333    		{
;;;334    			rc_x = VX_MAX_TWO_STAGE;
00020c  ed9f0a84          VLDR     s0,|L8.1056|
000210  487a              LDR      r0,|L8.1020|
000212  ed800a00          VSTR     s0,[r0,#0]
000216  e00b              B        |L8.560|
                  |L8.536|
;;;335    		}
;;;336    		else if(rc.A == 0 && rc.D == 1)
000218  487a              LDR      r0,|L8.1028|
00021a  7d80              LDRB     r0,[r0,#0x16]  ; rc
00021c  b940              CBNZ     r0,|L8.560|
00021e  4879              LDR      r0,|L8.1028|
000220  7dc0              LDRB     r0,[r0,#0x17]  ; rc
000222  2801              CMP      r0,#1
000224  d104              BNE      |L8.560|
;;;337    		{
;;;338    			rc_x = -VX_MAX_TWO_STAGE;
000226  ed9f0a81          VLDR     s0,|L8.1068|
00022a  4874              LDR      r0,|L8.1020|
00022c  ed800a00          VSTR     s0,[r0,#0]
                  |L8.560|
;;;339    		}
;;;340    		first_order_filter_cali(&set->chassis_cmd_slow_set_second_vx, rc_x, X_FILTER);
000230  2100              MOVS     r1,#0
000232  4872              LDR      r0,|L8.1020|
000234  ed900a00          VLDR     s0,[r0,#0]
000238  f1040090          ADD      r0,r4,#0x90
00023c  f7fffffe          BL       first_order_filter_cali
                  |L8.576|
;;;341    	}
;;;342    	
;;;343    	if(fabs(rc_y) <= 10.0f)
000240  4873              LDR      r0,|L8.1040|
000242  6800              LDR      r0,[r0,#0]  ; rc_y
000244  f7fffffe          BL       __aeabi_f2d
000248  ec410b1b          VMOV     d11,r0,r1
00024c  eeb00a4b          VMOV.F32 s0,s22
000250  eef00a6b          VMOV.F32 s1,s23
000254  f7fffffe          BL       __hardfp_fabs
000258  eeb0aa40          VMOV.F32 s20,s0
00025c  eef0aa60          VMOV.F32 s21,s1
000260  ed9f0b73          VLDR     d0,|L8.1072|
000264  ec532b10          VMOV     r2,r3,d0
000268  ec510b1a          VMOV     r0,r1,d10
00026c  f7fffffe          BL       __aeabi_cdcmple
000270  d80c              BHI      |L8.652|
;;;344    	{
;;;345    		state_a = 3;
000272  eeb00a08          VMOV.F32 s0,#3.00000000
000276  486c              LDR      r0,|L8.1064|
000278  ed800a00          VSTR     s0,[r0,#0]
;;;346    //		max_speed = 755.0f;
;;;347    		first_order_filter_cali(&set->chassis_cmd_stop_set_vy, rc_y, Y_FILTER);
00027c  2101              MOVS     r1,#1
00027e  4864              LDR      r0,|L8.1040|
000280  ed900a00          VLDR     s0,[r0,#0]
000284  f10400c0          ADD      r0,r4,#0xc0
000288  f7fffffe          BL       first_order_filter_cali
                  |L8.652|
;;;348    	}
;;;349    		
;;;350    	if(fabs(rc_x) <= 10.0f)
00028c  485b              LDR      r0,|L8.1020|
00028e  6800              LDR      r0,[r0,#0]  ; rc_x
000290  f7fffffe          BL       __aeabi_f2d
000294  ec410b1b          VMOV     d11,r0,r1
000298  eeb00a4b          VMOV.F32 s0,s22
00029c  eef00a6b          VMOV.F32 s1,s23
0002a0  f7fffffe          BL       __hardfp_fabs
0002a4  eeb0aa40          VMOV.F32 s20,s0
0002a8  eef0aa60          VMOV.F32 s21,s1
0002ac  ed9f0b60          VLDR     d0,|L8.1072|
0002b0  ec532b10          VMOV     r2,r3,d0
0002b4  ec510b1a          VMOV     r0,r1,d10
0002b8  f7fffffe          BL       __aeabi_cdcmple
0002bc  d807              BHI      |L8.718|
;;;351    	{
;;;352    //		max_speed = 755.0f;
;;;353    		first_order_filter_cali(&set->chassis_cmd_stop_set_vx, rc_x, X_FILTER);
0002be  2100              MOVS     r1,#0
0002c0  484e              LDR      r0,|L8.1020|
0002c2  ed900a00          VLDR     s0,[r0,#0]
0002c6  f10400b0          ADD      r0,r4,#0xb0
0002ca  f7fffffe          BL       first_order_filter_cali
                  |L8.718|
;;;354    	}
;;;355    	
;;;356    	
;;;357    	
;;;358    	
;;;359    
;;;360    	
;;;361        //一阶低通滤波代替斜波作为底盘速度输入	
;;;362       
;;;363    
;;;364     
;;;365    //	if((rc.W == 0 && rc.S == 0) && ((fabs((float)rc.R_y)) <= 2.0f))
;;;366    //	{
;;;367    //		chassis_set.chassis_cmd_slow_set_vy.out = 0.0f;
;;;368    //	}
;;;369    //	
;;;370    //	if((rc.A == 0 && rc.D == 0) && ((fabs((float)rc.R_x)) <= 2.0f))
;;;371    //	{
;;;372    //		chassis_set.chassis_cmd_slow_set_vx.out = 0.0f;
;;;373    //	}
;;;374    	
;;;375    	
;;;376    		
;;;377    	X_filted = chassis_set.x_filted;
0002ce  4851              LDR      r0,|L8.1044|
0002d0  ed900a35          VLDR     s0,[r0,#0xd4]
0002d4  4858              LDR      r0,|L8.1080|
0002d6  ed800a00          VSTR     s0,[r0,#0]
;;;378    	Y_filted = chassis_set.y_filted;
0002da  484e              LDR      r0,|L8.1044|
0002dc  ed900a36          VLDR     s0,[r0,#0xd8]
0002e0  4856              LDR      r0,|L8.1084|
0002e2  ed800a00          VSTR     s0,[r0,#0]
;;;379    //	aa = sqrt(X_filted * X_filted + Y_filted * Y_filted);
;;;380    //	
;;;381    //	X_filted = aa < max_speed ? X_filted : X_filted * (max_speed / aa);
;;;382    //	X_filted = aa > -max_speed ? X_filted : X_filted * (max_speed / aa);
;;;383    //	Y_filted = aa <max_speed ? Y_filted : Y_filted * (max_speed / aa);
;;;384    //	Y_filted = aa > -max_speed ? Y_filted : Y_filted * (max_speed / aa);
;;;385    //	
;;;386    //	if(fabs(X_filted) >= 500.0f)
;;;387    //	{
;;;388    //		X_filted = X_filted > 0 ? 500.0f : - 500.f;
;;;389    //	}
;;;390    //	if(fabs(Y_filted) >= 500.0f)
;;;391    //	{
;;;392    //		Y_filted = Y_filted > 0 ? 500.0f : - 500.f;
;;;393    //	}
;;;394    	Chassis_fllow(&X_filted, &Y_filted);
0002e6  4601              MOV      r1,r0
0002e8  4853              LDR      r0,|L8.1080|
0002ea  f7fffffe          BL       Chassis_fllow
;;;395    
;;;396    	wheel_speed[0] = Y_filted - X_filted - z;
0002ee  4853              LDR      r0,|L8.1084|
0002f0  ed900a00          VLDR     s0,[r0,#0]
0002f4  4850              LDR      r0,|L8.1080|
0002f6  edd00a00          VLDR     s1,[r0,#0]
0002fa  ee700a60          VSUB.F32 s1,s0,s1
0002fe  ee005a10          VMOV     s0,r5
000302  eeb80ac0          VCVT.F32.S32 s0,s0
000306  ee300ac0          VSUB.F32 s0,s1,s0
00030a  ed8d0a00          VSTR     s0,[sp,#0]
;;;397    	wheel_speed[1] = -Y_filted - X_filted - z;
00030e  484b              LDR      r0,|L8.1084|
000310  ed900a00          VLDR     s0,[r0,#0]
000314  eeb10a40          VNEG.F32 s0,s0
000318  4847              LDR      r0,|L8.1080|
00031a  edd00a00          VLDR     s1,[r0,#0]
00031e  ee700a60          VSUB.F32 s1,s0,s1
000322  ee005a10          VMOV     s0,r5
000326  eeb80ac0          VCVT.F32.S32 s0,s0
00032a  ee300ac0          VSUB.F32 s0,s1,s0
00032e  ed8d0a01          VSTR     s0,[sp,#4]
;;;398    	wheel_speed[2] = -Y_filted + X_filted - z;
000332  4842              LDR      r0,|L8.1084|
000334  ed900a00          VLDR     s0,[r0,#0]
000338  eeb10a40          VNEG.F32 s0,s0
00033c  483e              LDR      r0,|L8.1080|
00033e  edd00a00          VLDR     s1,[r0,#0]
000342  ee700a20          VADD.F32 s1,s0,s1
000346  ee005a10          VMOV     s0,r5
00034a  eeb80ac0          VCVT.F32.S32 s0,s0
00034e  ee300ac0          VSUB.F32 s0,s1,s0
000352  ed8d0a02          VSTR     s0,[sp,#8]
;;;399    	wheel_speed[3] = Y_filted + X_filted - z;    //遥控器无法控制
000356  4839              LDR      r0,|L8.1084|
000358  ed900a00          VLDR     s0,[r0,#0]
00035c  4836              LDR      r0,|L8.1080|
00035e  edd00a00          VLDR     s1,[r0,#0]
000362  ee700a20          VADD.F32 s1,s0,s1
000366  ee005a10          VMOV     s0,r5
00036a  eeb80ac0          VCVT.F32.S32 s0,s0
00036e  ee300ac0          VSUB.F32 s0,s1,s0
000372  ed8d0a03          VSTR     s0,[sp,#0xc]
;;;400    
;;;401    //	wheel_speed[0] = Y_filted - X_filted - 0;
;;;402    //	wheel_speed[1] = -Y_filted - X_filted - 0;
;;;403    //	wheel_speed[2] = -Y_filted + X_filted - 0;
;;;404    //	wheel_speed[3] = Y_filted + X_filted - 0;    //遥控器无法控制
;;;405    	
;;;406    	 //计算轮子控制最大速度，并限制其最大速度
;;;407        for (i = 0; i < 4; i++)
000376  2600              MOVS     r6,#0
000378  e02c              B        |L8.980|
                  |L8.890|
;;;408        {
;;;409            set->cm_set[i] = wheel_speed[i];
00037a  4668              MOV      r0,sp
00037c  eb000086          ADD      r0,r0,r6,LSL #2
000380  ed900a00          VLDR     s0,[r0,#0]
000384  eb040086          ADD      r0,r4,r6,LSL #2
000388  ed800a00          VSTR     s0,[r0,#0]
;;;410            temp = fabs(set->cm_set[i]);
00038c  eb040086          ADD      r0,r4,r6,LSL #2
000390  ed900a00          VLDR     s0,[r0,#0]
000394  ee101a10          VMOV     r1,s0
000398  4608              MOV      r0,r1
00039a  f7fffffe          BL       __aeabi_f2d
00039e  ec410b1b          VMOV     d11,r0,r1
0003a2  eeb00a4b          VMOV.F32 s0,s22
0003a6  eef00a6b          VMOV.F32 s1,s23
0003aa  f7fffffe          BL       __hardfp_fabs
0003ae  eeb0aa40          VMOV.F32 s20,s0
0003b2  eef0aa60          VMOV.F32 s21,s1
0003b6  ec510b1a          VMOV     r0,r1,d10
0003ba  f7fffffe          BL       __aeabi_d2f
0003be  ee080a90          VMOV     s17,r0
;;;411            if (max_vector < temp)
0003c2  eeb48ae8          VCMPE.F32 s16,s17
0003c6  eef1fa10          VMRS     APSR_nzcv,FPSCR
0003ca  d201              BCS      |L8.976|
;;;412            {
;;;413                max_vector = temp;
0003cc  eeb08a68          VMOV.F32 s16,s17
                  |L8.976|
0003d0  1c70              ADDS     r0,r6,#1              ;407
0003d2  b2c6              UXTB     r6,r0                 ;407
                  |L8.980|
0003d4  2e04              CMP      r6,#4                 ;407
0003d6  dbd0              BLT      |L8.890|
;;;414            }
;;;415        }
;;;416    	
;;;417        if (max_vector > max_speed)
0003d8  4812              LDR      r0,|L8.1060|
0003da  ed900a00          VLDR     s0,[r0,#0]
0003de  eeb48ac0          VCMPE.F32 s16,s0
0003e2  eef1fa10          VMRS     APSR_nzcv,FPSCR
0003e6  dd39              BLE      |L8.1116|
;;;418        {
;;;419            vector_rate = max_speed / max_vector;
0003e8  ed900a00          VLDR     s0,[r0,#0]
0003ec  eec00a08          VDIV.F32 s1,s0,s16
0003f0  eeb09a60          VMOV.F32 s18,s1
;;;420            for (i = 0; i < 4; i++)
0003f4  2600              MOVS     r6,#0
0003f6  e02f              B        |L8.1112|
                  |L8.1016|
0003f8  00000000          DCFS     0x00000000 ; 0
                  |L8.1020|
                          DCD      rc_x
                  |L8.1024|
                          DCD      last_rc_x
                  |L8.1028|
                          DCD      ||rc||
                  |L8.1032|
000408  3fcc4862          DCFS     0x3fcc4862 ; 1.595958948135376
                  |L8.1036|
00040c  3fcc4867          DCFS     0x3fcc4867 ; 1.5959595441818237
                  |L8.1040|
                          DCD      rc_y
                  |L8.1044|
                          DCD      chassis_set
                  |L8.1048|
000418  442f0000          DCFS     0x442f0000 ; 700
                  |L8.1052|
00041c  c42f0000          DCFS     0xc42f0000 ; -700
                  |L8.1056|
000420  44834000          DCFS     0x44834000 ; 1050
                  |L8.1060|
                          DCD      max_speed
                  |L8.1064|
                          DCD      state_a
                  |L8.1068|
00042c  c4834000          DCFS     0xc4834000 ; -1050
                  |L8.1072|
000430  00000000          DCFD     0x4024000000000000 ; 10
000434  40240000
                  |L8.1080|
                          DCD      X_filted
                  |L8.1084|
                          DCD      Y_filted
                  |L8.1088|
;;;421            {
;;;422                set->cm_set[i] *= vector_rate;
000440  eb040086          ADD      r0,r4,r6,LSL #2
000444  ed900a00          VLDR     s0,[r0,#0]
000448  ee200a09          VMUL.F32 s0,s0,s18
00044c  eb040086          ADD      r0,r4,r6,LSL #2
000450  ed800a00          VSTR     s0,[r0,#0]
000454  1c70              ADDS     r0,r6,#1              ;420
000456  b2c6              UXTB     r6,r0                 ;420
                  |L8.1112|
000458  2e04              CMP      r6,#4                 ;420
00045a  dbf1              BLT      |L8.1088|
                  |L8.1116|
;;;423            }
;;;424        }
;;;425    	
;;;426    	
;;;427    	
;;;428    	 
;;;429    }
00045c  b004              ADD      sp,sp,#0x10
00045e  ecbd8b08          VPOP     {d8-d11}
000462  bd70              POP      {r4-r6,pc}
;;;430    
                          ENDP


                          AREA ||i.remote_fifo||, CODE, READONLY, ALIGN=2

                  remote_fifo PROC
;;;68     int t_W, t_A, t_S, t_D;
;;;69     void remote_fifo()
000000  4860              LDR      r0,|L9.388|
;;;70     {
;;;71     	if(rc.W!=0)
000002  7d00              LDRB     r0,[r0,#0x14]  ; rc
000004  b128              CBZ      r0,|L9.18|
;;;72     		t_W++;
000006  4860              LDR      r0,|L9.392|
000008  6800              LDR      r0,[r0,#0]  ; t_W
00000a  1c40              ADDS     r0,r0,#1
00000c  495e              LDR      r1,|L9.392|
00000e  6008              STR      r0,[r1,#0]  ; t_W
000010  e004              B        |L9.28|
                  |L9.18|
;;;73     	else
;;;74     		t_W--;
000012  485d              LDR      r0,|L9.392|
000014  6800              LDR      r0,[r0,#0]  ; t_W
000016  1e40              SUBS     r0,r0,#1
000018  495b              LDR      r1,|L9.392|
00001a  6008              STR      r0,[r1,#0]  ; t_W
                  |L9.28|
;;;75     	
;;;76     	if(rc.A!=0)
00001c  4859              LDR      r0,|L9.388|
00001e  7d80              LDRB     r0,[r0,#0x16]  ; rc
000020  b128              CBZ      r0,|L9.46|
;;;77     		t_A++;
000022  485a              LDR      r0,|L9.396|
000024  6800              LDR      r0,[r0,#0]  ; t_A
000026  1c40              ADDS     r0,r0,#1
000028  4958              LDR      r1,|L9.396|
00002a  6008              STR      r0,[r1,#0]  ; t_A
00002c  e004              B        |L9.56|
                  |L9.46|
;;;78     	else
;;;79     		t_A--;
00002e  4857              LDR      r0,|L9.396|
000030  6800              LDR      r0,[r0,#0]  ; t_A
000032  1e40              SUBS     r0,r0,#1
000034  4955              LDR      r1,|L9.396|
000036  6008              STR      r0,[r1,#0]  ; t_A
                  |L9.56|
;;;80     	
;;;81     	if(rc.S!=0)
000038  4852              LDR      r0,|L9.388|
00003a  7d40              LDRB     r0,[r0,#0x15]  ; rc
00003c  b128              CBZ      r0,|L9.74|
;;;82     		t_S++;
00003e  4854              LDR      r0,|L9.400|
000040  6800              LDR      r0,[r0,#0]  ; t_S
000042  1c40              ADDS     r0,r0,#1
000044  4952              LDR      r1,|L9.400|
000046  6008              STR      r0,[r1,#0]  ; t_S
000048  e004              B        |L9.84|
                  |L9.74|
;;;83     	else
;;;84     		t_S--;
00004a  4851              LDR      r0,|L9.400|
00004c  6800              LDR      r0,[r0,#0]  ; t_S
00004e  1e40              SUBS     r0,r0,#1
000050  494f              LDR      r1,|L9.400|
000052  6008              STR      r0,[r1,#0]  ; t_S
                  |L9.84|
;;;85     	
;;;86     	if(rc.D!=0)
000054  484b              LDR      r0,|L9.388|
000056  7dc0              LDRB     r0,[r0,#0x17]  ; rc
000058  b128              CBZ      r0,|L9.102|
;;;87     		t_D++;
00005a  484e              LDR      r0,|L9.404|
00005c  6800              LDR      r0,[r0,#0]  ; t_D
00005e  1c40              ADDS     r0,r0,#1
000060  494c              LDR      r1,|L9.404|
000062  6008              STR      r0,[r1,#0]  ; t_D
000064  e004              B        |L9.112|
                  |L9.102|
;;;88     	else
;;;89     		t_D--;
000066  484b              LDR      r0,|L9.404|
000068  6800              LDR      r0,[r0,#0]  ; t_D
00006a  1e40              SUBS     r0,r0,#1
00006c  4949              LDR      r1,|L9.404|
00006e  6008              STR      r0,[r1,#0]  ; t_D
                  |L9.112|
;;;90     
;;;91     	t_W = t_W > 334 ? 334 : t_W;
000070  4845              LDR      r0,|L9.392|
000072  6800              LDR      r0,[r0,#0]  ; t_W
000074  f5b07fa7          CMP      r0,#0x14e
000078  dd02              BLE      |L9.128|
00007a  f44f70a7          MOV      r0,#0x14e
00007e  e001              B        |L9.132|
                  |L9.128|
000080  4841              LDR      r0,|L9.392|
000082  6800              LDR      r0,[r0,#0]  ; t_W
                  |L9.132|
000084  4940              LDR      r1,|L9.392|
000086  6008              STR      r0,[r1,#0]  ; t_W
;;;92     	t_W = t_W < 0 ? 0 : t_W;
000088  4608              MOV      r0,r1
00008a  6800              LDR      r0,[r0,#0]  ; t_W
00008c  2800              CMP      r0,#0
00008e  da01              BGE      |L9.148|
000090  2000              MOVS     r0,#0
000092  e001              B        |L9.152|
                  |L9.148|
000094  483c              LDR      r0,|L9.392|
000096  6800              LDR      r0,[r0,#0]  ; t_W
                  |L9.152|
000098  493b              LDR      r1,|L9.392|
00009a  6008              STR      r0,[r1,#0]  ; t_W
;;;93     	t_A = t_A > 334 ? 334 : t_A;
00009c  483b              LDR      r0,|L9.396|
00009e  6800              LDR      r0,[r0,#0]  ; t_A
0000a0  f5b07fa7          CMP      r0,#0x14e
0000a4  dd02              BLE      |L9.172|
0000a6  f44f70a7          MOV      r0,#0x14e
0000aa  e001              B        |L9.176|
                  |L9.172|
0000ac  4837              LDR      r0,|L9.396|
0000ae  6800              LDR      r0,[r0,#0]  ; t_A
                  |L9.176|
0000b0  4936              LDR      r1,|L9.396|
0000b2  6008              STR      r0,[r1,#0]  ; t_A
;;;94     	t_A = t_A < 0 ? 0 : t_A;
0000b4  4608              MOV      r0,r1
0000b6  6800              LDR      r0,[r0,#0]  ; t_A
0000b8  2800              CMP      r0,#0
0000ba  da01              BGE      |L9.192|
0000bc  2000              MOVS     r0,#0
0000be  e001              B        |L9.196|
                  |L9.192|
0000c0  4832              LDR      r0,|L9.396|
0000c2  6800              LDR      r0,[r0,#0]  ; t_A
                  |L9.196|
0000c4  4931              LDR      r1,|L9.396|
0000c6  6008              STR      r0,[r1,#0]  ; t_A
;;;95     	t_S = t_S > 334 ? 334 : t_S;
0000c8  4831              LDR      r0,|L9.400|
0000ca  6800              LDR      r0,[r0,#0]  ; t_S
0000cc  f5b07fa7          CMP      r0,#0x14e
0000d0  dd02              BLE      |L9.216|
0000d2  f44f70a7          MOV      r0,#0x14e
0000d6  e001              B        |L9.220|
                  |L9.216|
0000d8  482d              LDR      r0,|L9.400|
0000da  6800              LDR      r0,[r0,#0]  ; t_S
                  |L9.220|
0000dc  492c              LDR      r1,|L9.400|
0000de  6008              STR      r0,[r1,#0]  ; t_S
;;;96     	t_S = t_S < 0 ? 0 : t_S;
0000e0  4608              MOV      r0,r1
0000e2  6800              LDR      r0,[r0,#0]  ; t_S
0000e4  2800              CMP      r0,#0
0000e6  da01              BGE      |L9.236|
0000e8  2000              MOVS     r0,#0
0000ea  e001              B        |L9.240|
                  |L9.236|
0000ec  4828              LDR      r0,|L9.400|
0000ee  6800              LDR      r0,[r0,#0]  ; t_S
                  |L9.240|
0000f0  4927              LDR      r1,|L9.400|
0000f2  6008              STR      r0,[r1,#0]  ; t_S
;;;97     	t_D = t_D > 334 ? 334 : t_D;
0000f4  4827              LDR      r0,|L9.404|
0000f6  6800              LDR      r0,[r0,#0]  ; t_D
0000f8  f5b07fa7          CMP      r0,#0x14e
0000fc  dd02              BLE      |L9.260|
0000fe  f44f70a7          MOV      r0,#0x14e
000102  e001              B        |L9.264|
                  |L9.260|
000104  4823              LDR      r0,|L9.404|
000106  6800              LDR      r0,[r0,#0]  ; t_D
                  |L9.264|
000108  4922              LDR      r1,|L9.404|
00010a  6008              STR      r0,[r1,#0]  ; t_D
;;;98     	t_D = t_D < 0 ? 0 : t_D;
00010c  4608              MOV      r0,r1
00010e  6800              LDR      r0,[r0,#0]  ; t_D
000110  2800              CMP      r0,#0
000112  da01              BGE      |L9.280|
000114  2000              MOVS     r0,#0
000116  e001              B        |L9.284|
                  |L9.280|
000118  481e              LDR      r0,|L9.404|
00011a  6800              LDR      r0,[r0,#0]  ; t_D
                  |L9.284|
00011c  491d              LDR      r1,|L9.404|
00011e  6008              STR      r0,[r1,#0]  ; t_D
;;;99     
;;;100    	deal_W=AccStep[t_W];
000120  481d              LDR      r0,|L9.408|
000122  4919              LDR      r1,|L9.392|
000124  6809              LDR      r1,[r1,#0]  ; t_W
000126  f8300011          LDRH     r0,[r0,r1,LSL #1]
00012a  ee000a10          VMOV     s0,r0
00012e  eeb80a40          VCVT.F32.U32 s0,s0
000132  481a              LDR      r0,|L9.412|
000134  ed800a00          VSTR     s0,[r0,#0]
;;;101    	deal_A=AccStep[t_A];
000138  4817              LDR      r0,|L9.408|
00013a  4914              LDR      r1,|L9.396|
00013c  6809              LDR      r1,[r1,#0]  ; t_A
00013e  f8300011          LDRH     r0,[r0,r1,LSL #1]
000142  ee000a10          VMOV     s0,r0
000146  eeb80a40          VCVT.F32.U32 s0,s0
00014a  4815              LDR      r0,|L9.416|
00014c  ed800a00          VSTR     s0,[r0,#0]
;;;102    	deal_S=AccStep[t_S];
000150  4811              LDR      r0,|L9.408|
000152  490f              LDR      r1,|L9.400|
000154  6809              LDR      r1,[r1,#0]  ; t_S
000156  f8300011          LDRH     r0,[r0,r1,LSL #1]
00015a  ee000a10          VMOV     s0,r0
00015e  eeb80a40          VCVT.F32.U32 s0,s0
000162  4810              LDR      r0,|L9.420|
000164  ed800a00          VSTR     s0,[r0,#0]
;;;103    	deal_D=AccStep[t_D];
000168  480b              LDR      r0,|L9.408|
00016a  490a              LDR      r1,|L9.404|
00016c  6809              LDR      r1,[r1,#0]  ; t_D
00016e  f8300011          LDRH     r0,[r0,r1,LSL #1]
000172  ee000a10          VMOV     s0,r0
000176  eeb80a40          VCVT.F32.U32 s0,s0
00017a  480b              LDR      r0,|L9.424|
00017c  ed800a00          VSTR     s0,[r0,#0]
;;;104    }
000180  4770              BX       lr
;;;105    float follow_set = 0.0f;
                          ENDP

000182  0000              DCW      0x0000
                  |L9.388|
                          DCD      ||rc||
                  |L9.392|
                          DCD      t_W
                  |L9.396|
                          DCD      t_A
                  |L9.400|
                          DCD      t_S
                  |L9.404|
                          DCD      t_D
                  |L9.408|
                          DCD      AccStep
                  |L9.412|
                          DCD      deal_W
                  |L9.416|
                          DCD      deal_A
                  |L9.420|
                          DCD      deal_S
                  |L9.424|
                          DCD      deal_D

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  chassis_set
                          %        224

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  chassis_x_order_filter
000000  3ecccccc          DCFS     0x3ecccccc ; 0.39999997615814209
                  chassis_y_order_filter
000004  3ecccccc          DCFS     0x3ecccccc ; 0.39999997615814209
                  chassis_follow_order_filter
000008  3e2aaaaa          DCFS     0x3e2aaaaa ; 0.1666666567325592
                  chassis_follow_second_order_filter
00000c  3e2aaaa6          DCFS     0x3e2aaaa6 ; 0.16666659712791443
                  chassis_x_second_order_filter
000010  40555555          DCFS     0x40555555 ; 3.3333332538604736
                  chassis_y_second_order_filter
000014  4059999a          DCFS     0x4059999a ; 3.4000000953674316
                  chassis_x_stop_order_filter
000018  3eaaaaab          DCFS     0x3eaaaaab ; 0.3333333432674408
                  chassis_y_stop_order_filter
00001c  3ecccccc          DCFS     0x3ecccccc ; 0.39999997615814209

                          AREA ||.data||, DATA, ALIGN=2

                  max_speed
000000  00000000          DCFS     0x00000000 ; 0
                  AccStep
000004  00000003          DCW      0x0000,0x0003
000008  00030004          DCW      0x0003,0x0004
00000c  00040004          DCW      0x0004,0x0004
000010  00040004          DCW      0x0004,0x0004
000014  00040004          DCW      0x0004,0x0004
000018  00040005          DCW      0x0004,0x0005
00001c  00050005          DCW      0x0005,0x0005
000020  00050005          DCW      0x0005,0x0005
000024  00050005          DCW      0x0005,0x0005
000028  00060006          DCW      0x0006,0x0006
00002c  00060006          DCW      0x0006,0x0006
000030  00060006          DCW      0x0006,0x0006
000034  00070007          DCW      0x0007,0x0007
000038  00070007          DCW      0x0007,0x0007
00003c  00070008          DCW      0x0007,0x0008
000040  00080008          DCW      0x0008,0x0008
000044  00080009          DCW      0x0008,0x0009
000048  00090009          DCW      0x0009,0x0009
00004c  0009000a          DCW      0x0009,0x000a
000050  000a000a          DCW      0x000a,0x000a
000054  000b000b          DCW      0x000b,0x000b
000058  000b000c          DCW      0x000b,0x000c
00005c  000c000c          DCW      0x000c,0x000c
000060  000d000d          DCW      0x000d,0x000d
000064  000d000e          DCW      0x000d,0x000e
000068  000e000f          DCW      0x000e,0x000f
00006c  000f0010          DCW      0x000f,0x0010
000070  00100010          DCW      0x0010,0x0010
000074  00110011          DCW      0x0011,0x0011
000078  00120012          DCW      0x0012,0x0012
00007c  00130014          DCW      0x0013,0x0014
000080  00140015          DCW      0x0014,0x0015
000084  00150016          DCW      0x0015,0x0016
000088  00170017          DCW      0x0017,0x0017
00008c  00180019          DCW      0x0018,0x0019
000090  0019001a          DCW      0x0019,0x001a
000094  001b001c          DCW      0x001b,0x001c
000098  001c001d          DCW      0x001c,0x001d
00009c  001e001f          DCW      0x001e,0x001f
0000a0  00200021          DCW      0x0020,0x0021
0000a4  00220023          DCW      0x0022,0x0023
0000a8  00240025          DCW      0x0024,0x0025
0000ac  00260027          DCW      0x0026,0x0027
0000b0  00280029          DCW      0x0028,0x0029
0000b4  002a002b          DCW      0x002a,0x002b
0000b8  002c002e          DCW      0x002c,0x002e
0000bc  002f0030          DCW      0x002f,0x0030
0000c0  00310033          DCW      0x0031,0x0033
0000c4  00340036          DCW      0x0034,0x0036
0000c8  00370039          DCW      0x0037,0x0039
0000cc  003a003c          DCW      0x003a,0x003c
0000d0  003d003f          DCW      0x003d,0x003f
0000d4  00400042          DCW      0x0040,0x0042
0000d8  00440046          DCW      0x0044,0x0046
0000dc  00480049          DCW      0x0048,0x0049
0000e0  004b004d          DCW      0x004b,0x004d
0000e4  004f0051          DCW      0x004f,0x0051
0000e8  00530055          DCW      0x0053,0x0055
0000ec  0058005a          DCW      0x0058,0x005a
0000f0  005c005e          DCW      0x005c,0x005e
0000f4  00610063          DCW      0x0061,0x0063
0000f8  00650068          DCW      0x0065,0x0068
0000fc  006a006d          DCW      0x006a,0x006d
000100  006f0072          DCW      0x006f,0x0072
000104  00750077          DCW      0x0075,0x0077
000108  007a007d          DCW      0x007a,0x007d
00010c  00800083          DCW      0x0080,0x0083
000110  00850088          DCW      0x0085,0x0088
000114  008b008e          DCW      0x008b,0x008e
000118  00920095          DCW      0x0092,0x0095
00011c  0098009b          DCW      0x0098,0x009b
000120  009e00a2          DCW      0x009e,0x00a2
000124  00a500a8          DCW      0x00a5,0x00a8
000128  00ab00af          DCW      0x00ab,0x00af
00012c  00b200b6          DCW      0x00b2,0x00b6
000130  00b900bd          DCW      0x00b9,0x00bd
000134  00c000c4          DCW      0x00c0,0x00c4
000138  00c700cb          DCW      0x00c7,0x00cb
00013c  00cf00d2          DCW      0x00cf,0x00d2
000140  00d600da          DCW      0x00d6,0x00da
000144  00dd00e1          DCW      0x00dd,0x00e1
000148  00e500e9          DCW      0x00e5,0x00e9
00014c  00ec00f0          DCW      0x00ec,0x00f0
000150  00f400f8          DCW      0x00f4,0x00f8
000154  00fb00ff          DCW      0x00fb,0x00ff
000158  01030106          DCW      0x0103,0x0106
00015c  010a010e          DCW      0x010a,0x010e
000160  01120115          DCW      0x0112,0x0115
000164  0119011d          DCW      0x0119,0x011d
000168  01200124          DCW      0x0120,0x0124
00016c  0128012b          DCW      0x0128,0x012b
000170  012f0133          DCW      0x012f,0x0133
000174  0136013a          DCW      0x0136,0x013a
000178  013d0141          DCW      0x013d,0x0141
00017c  01440147          DCW      0x0144,0x0147
000180  014b014e          DCW      0x014b,0x014e
000184  01510155          DCW      0x0151,0x0155
000188  0158015b          DCW      0x0158,0x015b
00018c  015e0161          DCW      0x015e,0x0161
000190  01650168          DCW      0x0165,0x0168
000194  016b016e          DCW      0x016b,0x016e
000198  01700173          DCW      0x0170,0x0173
00019c  01760179          DCW      0x0176,0x0179
0001a0  017c017e          DCW      0x017c,0x017e
0001a4  01810184          DCW      0x0181,0x0184
0001a8  01860189          DCW      0x0186,0x0189
0001ac  018b018e          DCW      0x018b,0x018e
0001b0  01900193          DCW      0x0190,0x0193
0001b4  01950197          DCW      0x0195,0x0197
0001b8  019a019c          DCW      0x019a,0x019c
0001bc  019e01a0          DCW      0x019e,0x01a0
0001c0  01a201a4          DCW      0x01a2,0x01a4
0001c4  01a601a8          DCW      0x01a6,0x01a8
0001c8  01aa01ac          DCW      0x01aa,0x01ac
0001cc  01ae01af          DCW      0x01ae,0x01af
0001d0  01b101b3          DCW      0x01b1,0x01b3
0001d4  01b501b6          DCW      0x01b5,0x01b6
0001d8  01b801b9          DCW      0x01b8,0x01b9
0001dc  01bb01bc          DCW      0x01bb,0x01bc
0001e0  01be01bf          DCW      0x01be,0x01bf
0001e4  01c101c2          DCW      0x01c1,0x01c2
0001e8  01c301c5          DCW      0x01c3,0x01c5
0001ec  01c601c7          DCW      0x01c6,0x01c7
0001f0  01c801ca          DCW      0x01c8,0x01ca
0001f4  01cb01cc          DCW      0x01cb,0x01cc
0001f8  01cd01ce          DCW      0x01cd,0x01ce
0001fc  01cf01d0          DCW      0x01cf,0x01d0
000200  01d101d2          DCW      0x01d1,0x01d2
000204  01d301d4          DCW      0x01d3,0x01d4
000208  01d501d6          DCW      0x01d5,0x01d6
00020c  01d701d7          DCW      0x01d7,0x01d7
000210  01d801d9          DCW      0x01d8,0x01d9
000214  01da01da          DCW      0x01da,0x01da
000218  01db01dc          DCW      0x01db,0x01dc
00021c  01dd01dd          DCW      0x01dd,0x01dd
000220  01de01de          DCW      0x01de,0x01de
000224  01df01e0          DCW      0x01df,0x01e0
000228  01e001e1          DCW      0x01e0,0x01e1
00022c  01e101e2          DCW      0x01e1,0x01e2
000230  01e201e3          DCW      0x01e2,0x01e3
000234  01e301e4          DCW      0x01e3,0x01e4
000238  01e401e5          DCW      0x01e4,0x01e5
00023c  01e501e6          DCW      0x01e5,0x01e6
000240  01e601e6          DCW      0x01e6,0x01e6
000244  01e701e7          DCW      0x01e7,0x01e7
000248  01e801e8          DCW      0x01e8,0x01e8
00024c  01e801e9          DCW      0x01e8,0x01e9
000250  01e901e9          DCW      0x01e9,0x01e9
000254  01ea01ea          DCW      0x01ea,0x01ea
000258  01ea01ea          DCW      0x01ea,0x01ea
00025c  01eb01eb          DCW      0x01eb,0x01eb
000260  01eb01ec          DCW      0x01eb,0x01ec
000264  01ec01ec          DCW      0x01ec,0x01ec
000268  01ec01ec          DCW      0x01ec,0x01ec
00026c  01ed01ed          DCW      0x01ed,0x01ed
000270  01ed01ed          DCW      0x01ed,0x01ed
000274  01ee01ee          DCW      0x01ee,0x01ee
000278  01ee01ee          DCW      0x01ee,0x01ee
00027c  01ee01ee          DCW      0x01ee,0x01ee
000280  01ef01ef          DCW      0x01ef,0x01ef
000284  01ef01ef          DCW      0x01ef,0x01ef
000288  01ef01ef          DCW      0x01ef,0x01ef
00028c  01ef01f0          DCW      0x01ef,0x01f0
000290  01f001f0          DCW      0x01f0,0x01f0
000294  01f001f0          DCW      0x01f0,0x01f0
000298  01f001f0          DCW      0x01f0,0x01f0
00029c  01f001f1          DCW      0x01f0,0x01f1
0002a0  01f1              DCW      0x01f1
0002a2  0000              DCB      0x00,0x00
                  deal_W
                          DCD      0x00000000
                  deal_A
                          DCD      0x00000000
                  deal_S
                          DCD      0x00000000
                  deal_D
                          DCD      0x00000000
                  t_W
                          DCD      0x00000000
                  t_A
                          DCD      0x00000000
                  t_S
                          DCD      0x00000000
                  t_D
                          DCD      0x00000000
                  follow_set
0002c4  00000000          DCFS     0x00000000 ; 0
                  total_set
                          DCD      0x00000000
                  out_fr
                          DCD      0x00000000
                  out_fl
                          DCD      0x00000000
                  out_bl
                          DCD      0x00000000
                  out_br
                          DCD      0x00000000
                  rc_x
                          DCD      0x00000000
                  rc_y
                          DCD      0x00000000
                  X_filted
                          DCD      0x00000000
                  Y_filted
                          DCD      0x00000000
                  last_rc_x
                          DCD      0x00000000
                  last_rc_y
                          DCD      0x00000000
                  ||aa||
                          DCD      0x00000000
                  state_a
0002f8  00000000          DCFS     0x00000000 ; 0
                  NIUYAO
0002fc  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\HAL\\chassismotor.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_chassismotor_c_cf74ebc4____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___14_chassismotor_c_cf74ebc4____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_chassismotor_c_cf74ebc4____REVSH|
#line 153
|__asm___14_chassismotor_c_cf74ebc4____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_chassismotor_c_cf74ebc4____RRX|
#line 328
|__asm___14_chassismotor_c_cf74ebc4____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
