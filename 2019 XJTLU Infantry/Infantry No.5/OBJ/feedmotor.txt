; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\feedmotor.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\feedmotor.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\feedmotor.crf ..\HAL\feedmotor.c]
                          THUMB

                          AREA ||i.IfJam2||, CODE, READONLY, ALIGN=2

                  IfJam2 PROC
;;;108    }
;;;109    int16_t IfJam2(int16_t state)
000000  b510              PUSH     {r4,lr}
;;;110    {
000002  ed2d8b04          VPUSH    {d8-d9}
000006  4604              MOV      r4,r0
;;;111    	if(state == 1 || state == 0)
000008  2c01              CMP      r4,#1
00000a  d000              BEQ      |L1.14|
00000c  bbd4              CBNZ     r4,|L1.132|
                  |L1.14|
;;;112    	{
;;;113    		if(fabs(feed_set.feed_angle_real - feed_set.feed_angle_set) >= Feed_Angle_Err)//绝对值
00000e  483c              LDR      r0,|L1.256|
000010  ed900a02          VLDR     s0,[r0,#8]
000014  edd00a00          VLDR     s1,[r0,#0]
000018  ee300a60          VSUB.F32 s0,s0,s1
00001c  ee101a10          VMOV     r1,s0
000020  4608              MOV      r0,r1
000022  f7fffffe          BL       __aeabi_f2d
000026  ec410b19          VMOV     d9,r0,r1
00002a  eeb00a49          VMOV.F32 s0,s18
00002e  eef00a69          VMOV.F32 s1,s19
000032  f7fffffe          BL       __hardfp_fabs
000036  eeb08a40          VMOV.F32 s16,s0
00003a  eef08a60          VMOV.F32 s17,s1
00003e  ed9f0b31          VLDR     d0,|L1.260|
000042  ec532b10          VMOV     r2,r3,d0
000046  ec510b18          VMOV     r0,r1,d8
00004a  f7fffffe          BL       __aeabi_cdrcmple
00004e  d809              BHI      |L1.100|
;;;114    			feed_state.jamTime_1ms++;
000050  482e              LDR      r0,|L1.268|
000052  e9d0300c          LDRD     r3,r0,[r0,#0x30]
000056  1c5a              ADDS     r2,r3,#1
000058  f1400000          ADC      r0,r0,#0
00005c  492b              LDR      r1,|L1.268|
00005e  e9c1200c          STRD     r2,r0,[r1,#0x30]
000062  e003              B        |L1.108|
                  |L1.100|
;;;115    		else 
;;;116    			feed_state.jamTime_1ms = 0;
000064  2000              MOVS     r0,#0
000066  4a29              LDR      r2,|L1.268|
000068  6310              STR      r0,[r2,#0x30]  ; feed_state
00006a  6350              STR      r0,[r2,#0x34]  ; feed_state
                  |L1.108|
;;;117    		if(feed_state.jamTime_1ms > Feed_All_Time)//200ms后判断是卡弹
00006c  4827              LDR      r0,|L1.268|
00006e  e9d0310c          LDRD     r3,r1,[r0,#0x30]
000072  2000              MOVS     r0,#0
000074  f1d302c8          RSBS     r2,r3,#0xc8
000078  4188              SBCS     r0,r0,r1
00007a  da3f              BGE      |L1.252|
;;;118    			return 1;
00007c  2001              MOVS     r0,#1
                  |L1.126|
;;;119    
;;;120    	}
;;;121    	else if(state == 2)
;;;122    	{
;;;123    		if(fabs(feed_set.feed_speed_real - feed_set.feed_speed_set) >= Feed_Speed_Err)
;;;124    			feed_state.jamTime_1ms++;
;;;125    		else 
;;;126    			feed_state.jamTime_1ms = 0;
;;;127    		if(feed_state.jamTime_1ms > Feed_All_Time)
;;;128    			return 1;
;;;129    
;;;130    	}
;;;131    	return 0;
;;;132    }
00007e  ecbd8b04          VPOP     {d8-d9}
000082  bd10              POP      {r4,pc}
                  |L1.132|
000084  e7ff              B        |L1.134|
                  |L1.134|
000086  2c02              CMP      r4,#2                 ;121
000088  d138              BNE      |L1.252|
00008a  481d              LDR      r0,|L1.256|
00008c  ed900a03          VLDR     s0,[r0,#0xc]          ;123
000090  edd00a01          VLDR     s1,[r0,#4]            ;123
000094  ee300a60          VSUB.F32 s0,s0,s1              ;123
000098  ee101a10          VMOV     r1,s0                 ;123
00009c  4608              MOV      r0,r1                 ;123
00009e  f7fffffe          BL       __aeabi_f2d
0000a2  ec410b19          VMOV     d9,r0,r1              ;123
0000a6  eeb00a49          VMOV.F32 s0,s18                ;123
0000aa  eef00a69          VMOV.F32 s1,s19                ;123
0000ae  f7fffffe          BL       __hardfp_fabs
0000b2  eeb08a40          VMOV.F32 s16,s0                ;123
0000b6  eef08a60          VMOV.F32 s17,s1                ;123
0000ba  ed9f0b15          VLDR     d0,|L1.272|
0000be  ec532b10          VMOV     r2,r3,d0              ;123
0000c2  ec510b18          VMOV     r0,r1,d8              ;123
0000c6  f7fffffe          BL       __aeabi_cdrcmple
0000ca  d809              BHI      |L1.224|
0000cc  480f              LDR      r0,|L1.268|
0000ce  e9d0300c          LDRD     r3,r0,[r0,#0x30]      ;124
0000d2  1c59              ADDS     r1,r3,#1              ;124
0000d4  f1400000          ADC      r0,r0,#0              ;124
0000d8  4a0c              LDR      r2,|L1.268|
0000da  e9c2100c          STRD     r1,r0,[r2,#0x30]      ;124
0000de  e003              B        |L1.232|
                  |L1.224|
0000e0  2100              MOVS     r1,#0                 ;126
0000e2  4a0a              LDR      r2,|L1.268|
0000e4  6311              STR      r1,[r2,#0x30]         ;126  ; feed_state
0000e6  6351              STR      r1,[r2,#0x34]         ;126  ; feed_state
                  |L1.232|
0000e8  4808              LDR      r0,|L1.268|
0000ea  22c8              MOVS     r2,#0xc8              ;127
0000ec  e9d0130c          LDRD     r1,r3,[r0,#0x30]      ;127
0000f0  2000              MOVS     r0,#0                 ;127
0000f2  1a51              SUBS     r1,r2,r1              ;127
0000f4  4198              SBCS     r0,r0,r3              ;127
0000f6  da01              BGE      |L1.252|
0000f8  2001              MOVS     r0,#1                 ;128
0000fa  e7c0              B        |L1.126|
                  |L1.252|
0000fc  2000              MOVS     r0,#0                 ;131
0000fe  e7be              B        |L1.126|
;;;133    
                          ENDP

                  |L1.256|
                          DCD      feed_set
                  |L1.260|
000104  00000000          DCFD     0x4059000000000000 ; 100
000108  40590000
                  |L1.268|
                          DCD      feed_state
                  |L1.272|
000110  00000000          DCFD     0x4069000000000000 ; 200
000114  40690000

                          AREA ||i.Judge_Dance||, CODE, READONLY, ALIGN=2

                  Judge_Dance PROC
;;;93     }
;;;94     int16_t Judge_Dance()
000000  480f              LDR      r0,|L2.64|
;;;95     {
;;;96     	if((feed_state.dance_flag == 1) && (feed_state.last_dance_flag == 0))
000002  8840              LDRH     r0,[r0,#2]  ; feed_state
000004  2801              CMP      r0,#1
000006  d108              BNE      |L2.26|
000008  480d              LDR      r0,|L2.64|
00000a  8880              LDRH     r0,[r0,#4]  ; feed_state
00000c  b928              CBNZ     r0,|L2.26|
;;;97     	{
;;;98     		feed_state.last_dance_flag = feed_state.dance_flag;
00000e  480c              LDR      r0,|L2.64|
000010  8840              LDRH     r0,[r0,#2]  ; feed_state
000012  490b              LDR      r1,|L2.64|
000014  8088              STRH     r0,[r1,#4]
;;;99     		return 1;
000016  2001              MOVS     r0,#1
                  |L2.24|
;;;100    	}
;;;101    	else if((feed_state.dance_flag == 0) && (feed_state.last_dance_flag == 1))
;;;102    	{
;;;103    		feed_state.last_dance_flag = feed_state.dance_flag;
;;;104    		return 2;
;;;105    	}
;;;106    	feed_state.last_dance_flag = feed_state.dance_flag;
;;;107    	return 0;
;;;108    }
000018  4770              BX       lr
                  |L2.26|
00001a  4809              LDR      r0,|L2.64|
00001c  8840              LDRH     r0,[r0,#2]            ;101  ; feed_state
00001e  b948              CBNZ     r0,|L2.52|
000020  4807              LDR      r0,|L2.64|
000022  8880              LDRH     r0,[r0,#4]            ;101  ; feed_state
000024  2801              CMP      r0,#1                 ;101
000026  d105              BNE      |L2.52|
000028  4805              LDR      r0,|L2.64|
00002a  8840              LDRH     r0,[r0,#2]            ;103  ; feed_state
00002c  4904              LDR      r1,|L2.64|
00002e  8088              STRH     r0,[r1,#4]            ;103
000030  2002              MOVS     r0,#2                 ;104
000032  e7f1              B        |L2.24|
                  |L2.52|
000034  4802              LDR      r0,|L2.64|
000036  8840              LDRH     r0,[r0,#2]            ;106  ; feed_state
000038  4901              LDR      r1,|L2.64|
00003a  8088              STRH     r0,[r1,#4]            ;106
00003c  2000              MOVS     r0,#0                 ;107
00003e  e7eb              B        |L2.24|
;;;109    int16_t IfJam2(int16_t state)
                          ENDP

                  |L2.64|
                          DCD      feed_state

                          AREA ||i.Set_FeedMotor_Current||, CODE, READONLY, ALIGN=2

                  Set_FeedMotor_Current PROC
;;;169    
;;;170    void Set_FeedMotor_Current(int16_t feed_motor_iq)//拨弹电机电流发送函数//CAN2发送函数
000000  b510              PUSH     {r4,lr}
;;;171    {
000002  b086              SUB      sp,sp,#0x18
000004  4604              MOV      r4,r0
;;;172        CanTxMsg tx_message;    
;;;173        tx_message.StdId = 0x1FF;
000006  f24010ff          MOV      r0,#0x1ff
00000a  9001              STR      r0,[sp,#4]
;;;174        tx_message.IDE = CAN_Id_Standard;
00000c  2000              MOVS     r0,#0
00000e  f88d000c          STRB     r0,[sp,#0xc]
;;;175        tx_message.RTR = CAN_RTR_Data;
000012  f88d000d          STRB     r0,[sp,#0xd]
;;;176        tx_message.DLC = 0x08;
000016  2008              MOVS     r0,#8
000018  f88d000e          STRB     r0,[sp,#0xe]
;;;177        
;;;178        tx_message.Data[0] = 0x00;
00001c  2000              MOVS     r0,#0
00001e  f88d000f          STRB     r0,[sp,#0xf]
;;;179        tx_message.Data[1] = 0x00;
000022  2100              MOVS     r1,#0
000024  f88d1010          STRB     r1,[sp,#0x10]
;;;180        tx_message.Data[2] = 0x00;
000028  f88d1011          STRB     r1,[sp,#0x11]
;;;181        tx_message.Data[3] = 0x00;
00002c  f88d1012          STRB     r1,[sp,#0x12]
;;;182    	tx_message.Data[4] = (unsigned char)(feed_motor_iq >> 8);
000030  0a21              LSRS     r1,r4,#8
000032  f88d1013          STRB     r1,[sp,#0x13]
;;;183        tx_message.Data[5] = (unsigned char)feed_motor_iq;
000036  f88d4014          STRB     r4,[sp,#0x14]
;;;184        tx_message.Data[6] = 0x00;
00003a  2100              MOVS     r1,#0
00003c  f88d1015          STRB     r1,[sp,#0x15]
;;;185        tx_message.Data[7] = 0x00;
000040  f88d1016          STRB     r1,[sp,#0x16]
;;;186        CAN_Transmit(CAN2,&tx_message);
000044  a901              ADD      r1,sp,#4
000046  4802              LDR      r0,|L3.80|
000048  f7fffffe          BL       CAN_Transmit
;;;187    }
00004c  b006              ADD      sp,sp,#0x18
00004e  bd10              POP      {r4,pc}
;;;188    
                          ENDP

                  |L3.80|
                          DCD      0x40006800

                          AREA ||i.Shoot||, CODE, READONLY, ALIGN=2

                  Shoot PROC
;;;5      
;;;6      void Shoot()
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;7      {
;;;8      	feed_state.heat_control_state = shooter_heat_control();
000004  f7fffffe          BL       shooter_heat_control
000008  4977              LDR      r1,|L4.488|
00000a  f881003e          STRB     r0,[r1,#0x3e]
;;;9      	if(feed_state.heat_control_state == 1 || rc.E == 1)
00000e  4608              MOV      r0,r1
000010  f890003e          LDRB     r0,[r0,#0x3e]  ; feed_state
000014  2801              CMP      r0,#1
000016  d003              BEQ      |L4.32|
000018  4874              LDR      r0,|L4.492|
00001a  7e40              LDRB     r0,[r0,#0x19]  ; rc
00001c  2801              CMP      r0,#1
00001e  d160              BNE      |L4.226|
                  |L4.32|
;;;10     	{
;;;11     			feed_state.now_mouse_l = (rc.mouse_l == 1) || (rc.sl == 2) || (feed_state.shoot_plan == 1);
000020  4872              LDR      r0,|L4.492|
000022  7c00              LDRB     r0,[r0,#0x10]  ; rc
000024  2801              CMP      r0,#1
000026  d008              BEQ      |L4.58|
000028  4870              LDR      r0,|L4.492|
00002a  7a00              LDRB     r0,[r0,#8]  ; rc
00002c  2802              CMP      r0,#2
00002e  d004              BEQ      |L4.58|
000030  486d              LDR      r0,|L4.488|
000032  f890003c          LDRB     r0,[r0,#0x3c]  ; feed_state
000036  2801              CMP      r0,#1
000038  d101              BNE      |L4.62|
                  |L4.58|
00003a  2001              MOVS     r0,#1
00003c  e000              B        |L4.64|
                  |L4.62|
00003e  2000              MOVS     r0,#0
                  |L4.64|
000040  4969              LDR      r1,|L4.488|
000042  8248              STRH     r0,[r1,#0x12]
;;;12     			if(feed_state.now_mouse_l == 1 )//射
000044  4608              MOV      r0,r1
000046  8a40              LDRH     r0,[r0,#0x12]  ; feed_state
000048  2801              CMP      r0,#1
00004a  d107              BNE      |L4.92|
;;;13     			{
;;;14     				feed_state.pressState = 2;
00004c  2002              MOVS     r0,#2
00004e  8508              STRH     r0,[r1,#0x28]
;;;15     				feed_set.feed_speed_set = Feed_Speed_MAX;
000050  ed9f0a67          VLDR     s0,|L4.496|
000054  4867              LDR      r0,|L4.500|
000056  ed800a01          VSTR     s0,[r0,#4]
00005a  e005              B        |L4.104|
                  |L4.92|
;;;16     			}
;;;17     			else if(feed_state.now_mouse_l == 0 )//停
00005c  4862              LDR      r0,|L4.488|
00005e  8a40              LDRH     r0,[r0,#0x12]  ; feed_state
000060  b910              CBNZ     r0,|L4.104|
;;;18     			{
;;;19     				feed_state.pressState = 0;
000062  2000              MOVS     r0,#0
000064  4960              LDR      r1,|L4.488|
000066  8508              STRH     r0,[r1,#0x28]
                  |L4.104|
;;;20     			}
;;;21     			feed_state.now_Jam = IfJam2(feed_state.pressState);//检测卡球
000068  495f              LDR      r1,|L4.488|
00006a  f9b10028          LDRSH    r0,[r1,#0x28]  ; feed_state
00006e  f7fffffe          BL       IfJam2
000072  495d              LDR      r1,|L4.488|
000074  8708              STRH     r0,[r1,#0x38]
;;;22     			
;;;23     			if(feed_state.last_Jam == 0 && feed_state.now_Jam == 1)
000076  4608              MOV      r0,r1
000078  8f40              LDRH     r0,[r0,#0x3a]  ; feed_state
00007a  b988              CBNZ     r0,|L4.160|
00007c  4608              MOV      r0,r1
00007e  8f00              LDRH     r0,[r0,#0x38]  ; feed_state
000080  2801              CMP      r0,#1
000082  d10d              BNE      |L4.160|
;;;24     			{
;;;25     				feed_state.pressState = 1;//防卡弹
000084  8508              STRH     r0,[r1,#0x28]
;;;26     				feed_set.feed_angle_set = feed_set.feed_angle_real - SingleBall;
000086  485b              LDR      r0,|L4.500|
000088  ed900a02          VLDR     s0,[r0,#8]
00008c  eddf0a5a          VLDR     s1,|L4.504|
000090  ee300a60          VSUB.F32 s0,s0,s1
000094  ed800a00          VSTR     s0,[r0,#0]
;;;27     				feed_state.jamTime_1ms = 0;//检测卡弹初始化
000098  2100              MOVS     r1,#0
00009a  4a53              LDR      r2,|L4.488|
00009c  6311              STR      r1,[r2,#0x30]  ; feed_state
00009e  6351              STR      r1,[r2,#0x34]  ; feed_state
                  |L4.160|
;;;28     			}
;;;29     			feed_state.last_Jam = feed_state.now_Jam;
0000a0  4851              LDR      r0,|L4.488|
0000a2  8f00              LDRH     r0,[r0,#0x38]  ; feed_state
0000a4  4950              LDR      r1,|L4.488|
0000a6  8748              STRH     r0,[r1,#0x3a]
;;;30     			
;;;31     			if(feed_state.press_flag == 1)
0000a8  4608              MOV      r0,r1
0000aa  8a00              LDRH     r0,[r0,#0x10]  ; feed_state
0000ac  2801              CMP      r0,#1
0000ae  d11b              BNE      |L4.232|
;;;32     			{
;;;33     				feed_state.presstime_1ms ++;
0000b0  4608              MOV      r0,r1
0000b2  e9d02002          LDRD     r2,r0,[r0,#8]
0000b6  1c52              ADDS     r2,r2,#1
0000b8  f1400000          ADC      r0,r0,#0
0000bc  e9c12002          STRD     r2,r0,[r1,#8]
;;;34     				if(feed_state.presstime_1ms > 300)
0000c0  4608              MOV      r0,r1
0000c2  f44f7396          MOV      r3,#0x12c
0000c6  e9d02102          LDRD     r2,r1,[r0,#8]
0000ca  2000              MOVS     r0,#0
0000cc  1a9a              SUBS     r2,r3,r2
0000ce  4188              SBCS     r0,r0,r1
0000d0  d20a              BCS      |L4.232|
;;;35     				{
;;;36     					feed_state.presstime_1ms = 0;
0000d2  2100              MOVS     r1,#0
0000d4  4a44              LDR      r2,|L4.488|
0000d6  6091              STR      r1,[r2,#8]  ; feed_state
0000d8  60d1              STR      r1,[r2,#0xc]  ; feed_state
;;;37     					feed_state.press_flag = 0;
0000da  2000              MOVS     r0,#0
0000dc  4611              MOV      r1,r2
0000de  8208              STRH     r0,[r1,#0x10]
0000e0  e002              B        |L4.232|
                  |L4.226|
;;;38     				}
;;;39     			}
;;;40     	}
;;;41     	else 
;;;42     	{
;;;43     //		feed_state.now_mouse_l = feed_state.last_mouse_l = 0;
;;;44     		feed_state.pressState = 0;
0000e2  2000              MOVS     r0,#0
0000e4  4940              LDR      r1,|L4.488|
0000e6  8508              STRH     r0,[r1,#0x28]
                  |L4.232|
;;;45     		
;;;46     	}
;;;47     
;;;48     	switch(feed_state.pressState)//输出
0000e8  483f              LDR      r0,|L4.488|
0000ea  f9b00028          LDRSH    r0,[r0,#0x28]  ; feed_state
0000ee  b3c0              CBZ      r0,|L4.354|
0000f0  2801              CMP      r0,#1
0000f2  d002              BEQ      |L4.250|
0000f4  2802              CMP      r0,#2
0000f6  d16f              BNE      |L4.472|
0000f8  e00a              B        |L4.272|
                  |L4.250|
;;;49     	{
;;;50     		case 1 : 
;;;51     			feed_state.press_flag = 1;//位置环后退500ms
0000fa  2001              MOVS     r0,#1
0000fc  493a              LDR      r1,|L4.488|
0000fe  8208              STRH     r0,[r1,#0x10]
;;;52     			feed_state.press_number = 1;
000100  2101              MOVS     r1,#1
000102  2000              MOVS     r0,#0
000104  4a38              LDR      r2,|L4.488|
000106  e9c21008          STRD     r1,r0,[r2,#0x20]
;;;53     			fireMotorDoubleLoopPid_out_update();
00010a  f7fffffe          BL       fireMotorDoubleLoopPid_out_update
;;;54     			break;
00010e  e063              B        |L4.472|
                  |L4.272|
;;;55     		
;;;56     		case 2 : 
;;;57     			if(feed_state.press_flag != 1)
000110  4835              LDR      r0,|L4.488|
000112  8a00              LDRH     r0,[r0,#0x10]  ; feed_state
000114  2801              CMP      r0,#1
000116  d025              BEQ      |L4.356|
;;;58     			{
;;;59     				feed_state.press_number = 2;
000118  2102              MOVS     r1,#2
00011a  2000              MOVS     r0,#0
00011c  4a32              LDR      r2,|L4.488|
00011e  e9c21008          STRD     r1,r0,[r2,#0x20]
;;;60     				feed_set.feed_angle_set = 0;
000122  ed9f0a36          VLDR     s0,|L4.508|
000126  4833              LDR      r0,|L4.500|
000128  ed800a00          VSTR     s0,[r0,#0]
;;;61     				feed_state.sum_angle = (int)feed_set.feed_angle_real;
00012c  ed900a02          VLDR     s0,[r0,#8]
000130  eebd0ac0          VCVT.S32.F32 s0,s0
000134  ee100a10          VMOV     r0,s0
000138  17c1              ASRS     r1,r0,#31
00013a  e9c20106          STRD     r0,r1,[r2,#0x18]
;;;62     				fireMotorSingleLoopPid_out_update();
00013e  f7fffffe          BL       fireMotorSingleLoopPid_out_update
;;;63     					 
;;;64     				feed_state.dance_time ++;//按下200ms后扭腰
000142  4829              LDR      r0,|L4.488|
000144  88c0              LDRH     r0,[r0,#6]  ; feed_state
000146  1c40              ADDS     r0,r0,#1
000148  b200              SXTH     r0,r0
00014a  4927              LDR      r1,|L4.488|
00014c  80c8              STRH     r0,[r1,#6]
;;;65     				if(feed_state.dance_time > Feed_All_Time)
00014e  4608              MOV      r0,r1
000150  f9b00006          LDRSH    r0,[r0,#6]  ; feed_state
000154  28c8              CMP      r0,#0xc8
000156  dd07              BLE      |L4.360|
;;;66     				{
;;;67     					feed_state.dance_time = 0;
000158  2000              MOVS     r0,#0
00015a  80c8              STRH     r0,[r1,#6]
;;;68     					feed_state.dance_flag = 1;
00015c  2001              MOVS     r0,#1
00015e  8048              STRH     r0,[r1,#2]
000160  e002              B        |L4.360|
                  |L4.354|
000162  e002              B        |L4.362|
                  |L4.356|
;;;69     				}
;;;70     			}
;;;71     			else
;;;72     			{
;;;73     				fireMotorDoubleLoopPid_out_update();
000164  f7fffffe          BL       fireMotorDoubleLoopPid_out_update
                  |L4.360|
;;;74     			}
;;;75     			break;
000168  e036              B        |L4.472|
                  |L4.362|
;;;76     						 
;;;77     
;;;78     		case 0 : 
;;;79     			if(feed_state.press_number == 1)
00016a  481f              LDR      r0,|L4.488|
00016c  e9d01008          LDRD     r1,r0,[r0,#0x20]
000170  2301              MOVS     r3,#1
000172  4059              EORS     r1,r1,r3
000174  4301              ORRS     r1,r1,r0
000176  d102              BNE      |L4.382|
;;;80     				fireMotorDoubleLoopPid_out_update();
000178  f7fffffe          BL       fireMotorDoubleLoopPid_out_update
00017c  e027              B        |L4.462|
                  |L4.382|
;;;81     			else
;;;82     			{
;;;83     				feed_set.feed_speed_set = 0;
00017e  ed9f0a1f          VLDR     s0,|L4.508|
000182  481c              LDR      r0,|L4.500|
000184  ed800a01          VSTR     s0,[r0,#4]
;;;84     				feed_set.feed_angle_set = ((feed_state.sum_angle / SingleBall) + 1) * SingleBall + feed_set.feed_angle_and;
000188  4817              LDR      r0,|L4.488|
00018a  f44f6207          MOV      r2,#0x870
00018e  2300              MOVS     r3,#0
000190  e9d06106          LDRD     r6,r1,[r0,#0x18]
000194  4630              MOV      r0,r6
000196  f7fffffe          BL       __aeabi_ldivmod
00019a  1c42              ADDS     r2,r0,#1
00019c  f1410100          ADC      r1,r1,#0
0001a0  f44f6307          MOV      r3,#0x870
0001a4  2000              MOVS     r0,#0
0001a6  fba24703          UMULL    r4,r7,r2,r3
0001aa  fb017103          MLA      r1,r1,r3,r7
0001ae  fb021100          MLA      r1,r2,r0,r1
0001b2  4620              MOV      r0,r4
0001b4  f7fffffe          BL       __aeabi_l2f
0001b8  ee000a10          VMOV     s0,r0
0001bc  480d              LDR      r0,|L4.500|
0001be  edd00a04          VLDR     s1,[r0,#0x10]
0001c2  ee300a20          VADD.F32 s0,s0,s1
0001c6  ed800a00          VSTR     s0,[r0,#0]
;;;85     				fireMotorDoubleLoopPid_out_update();
0001ca  f7fffffe          BL       fireMotorDoubleLoopPid_out_update
                  |L4.462|
;;;86     			}
;;;87     			feed_state.dance_time = 0;
0001ce  2000              MOVS     r0,#0
0001d0  4905              LDR      r1,|L4.488|
0001d2  80c8              STRH     r0,[r1,#6]
;;;88     			feed_state.dance_flag = 0;
0001d4  8048              STRH     r0,[r1,#2]
;;;89     			break;
0001d6  bf00              NOP      
                  |L4.472|
0001d8  bf00              NOP                            ;54
;;;90     	}
;;;91     	
;;;92     	feed_state.if_dance = Judge_Dance();
0001da  f7fffffe          BL       Judge_Dance
0001de  4902              LDR      r1,|L4.488|
0001e0  8008              STRH     r0,[r1,#0]
;;;93     }
0001e2  e8bd81f0          POP      {r4-r8,pc}
;;;94     int16_t Judge_Dance()
                          ENDP

0001e6  0000              DCW      0x0000
                  |L4.488|
                          DCD      feed_state
                  |L4.492|
                          DCD      ||rc||
                  |L4.496|
0001f0  43c80000          DCFS     0x43c80000 ; 400
                  |L4.500|
                          DCD      feed_set
                  |L4.504|
0001f8  45070000          DCFS     0x45070000 ; 2160
                  |L4.508|
0001fc  00000000          DCFS     0x00000000 ; 0

                          AREA ||i.fireMotorDoubleLoopPid_out_update||, CODE, READONLY, ALIGN=2

                  fireMotorDoubleLoopPid_out_update PROC
;;;145    
;;;146    void fireMotorDoubleLoopPid_out_update(void)
000000  b510              PUSH     {r4,lr}
;;;147    {
;;;148    	fireMotorPidReal_update();
000002  f7fffffe          BL       fireMotorPidReal_update
;;;149    	out[FEED_MOTOR_DOUBLE_ANGLE] = Calculate_Current_Value(&pid[FEED_MOTOR_DOUBLE_ANGLE], feed_set.feed_angle_set, feed_set.feed_angle_real);
000006  480d              LDR      r0,|L5.60|
000008  ed901a02          VLDR     s2,[r0,#8]
00000c  eef00a41          VMOV.F32 s1,s2
000010  ed901a00          VLDR     s2,[r0,#0]
000014  eeb00a41          VMOV.F32 s0,s2
000018  4809              LDR      r0,|L5.64|
00001a  f7fffffe          BL       Calculate_Current_Value
00001e  4809              LDR      r0,|L5.68|
000020  ed800a0a          VSTR     s0,[r0,#0x28]
;;;150    	Set_FeedMotor_Current((int16_t)out[FEED_MOTOR_DOUBLE_ANGLE]);
000024  4601              MOV      r1,r0
000026  ed910a0a          VLDR     s0,[r1,#0x28]
00002a  eebd0ac0          VCVT.S32.F32 s0,s0
00002e  ee101a10          VMOV     r1,s0
000032  b208              SXTH     r0,r1
000034  f7fffffe          BL       Set_FeedMotor_Current
;;;151    }
000038  bd10              POP      {r4,pc}
;;;152    
                          ENDP

00003a  0000              DCW      0x0000
                  |L5.60|
                          DCD      feed_set
                  |L5.64|
                          DCD      pid+0x2f8
                  |L5.68|
                          DCD      out

                          AREA ||i.fireMotorPidReal_update||, CODE, READONLY, ALIGN=2

                  fireMotorPidReal_update PROC
;;;133    
;;;134    void fireMotorPidReal_update(void)
000000  4807              LDR      r0,|L6.32|
;;;135    {
;;;136    	feed_set.feed_angle_real = CMFeedEncoder.ecd_angle;
000002  ed900a11          VLDR     s0,[r0,#0x44]
000006  4807              LDR      r0,|L6.36|
000008  ed800a02          VSTR     s0,[r0,#8]
;;;137    	feed_set.feed_speed_real = CMFeedEncoder.filter_rate;
00000c  4804              LDR      r0,|L6.32|
00000e  6bc0              LDR      r0,[r0,#0x3c]  ; CMFeedEncoder
000010  ee000a10          VMOV     s0,r0
000014  eeb80ac0          VCVT.F32.S32 s0,s0
000018  4802              LDR      r0,|L6.36|
00001a  ed800a03          VSTR     s0,[r0,#0xc]
;;;138    }
00001e  4770              BX       lr
;;;139    void fireMotorSingleLoopPid_out_update(void)
                          ENDP

                  |L6.32|
                          DCD      CMFeedEncoder
                  |L6.36|
                          DCD      feed_set

                          AREA ||i.fireMotorSingleLoopPid_out_update||, CODE, READONLY, ALIGN=2

                  fireMotorSingleLoopPid_out_update PROC
;;;138    }
;;;139    void fireMotorSingleLoopPid_out_update(void)
000000  b510              PUSH     {r4,lr}
;;;140    {
;;;141    	fireMotorPidReal_update();//真实值更新
000002  f7fffffe          BL       fireMotorPidReal_update
;;;142    	out[FEED_MOTOR_SINGLE] = Calculate_Current_Value(&pid[FEED_MOTOR_SINGLE], feed_set.feed_speed_set, feed_set.feed_speed_real);
000006  480d              LDR      r0,|L7.60|
000008  ed901a03          VLDR     s2,[r0,#0xc]
00000c  eef00a41          VMOV.F32 s1,s2
000010  ed901a01          VLDR     s2,[r0,#4]
000014  eeb00a41          VMOV.F32 s0,s2
000018  4809              LDR      r0,|L7.64|
00001a  f7fffffe          BL       Calculate_Current_Value
00001e  4809              LDR      r0,|L7.68|
000020  ed800a09          VSTR     s0,[r0,#0x24]
;;;143    	Set_FeedMotor_Current((int16_t)out[FEED_MOTOR_SINGLE]);
000024  4601              MOV      r1,r0
000026  ed910a09          VLDR     s0,[r1,#0x24]
00002a  eebd0ac0          VCVT.S32.F32 s0,s0
00002e  ee101a10          VMOV     r1,s0
000032  b208              SXTH     r0,r1
000034  f7fffffe          BL       Set_FeedMotor_Current
;;;144    }
000038  bd10              POP      {r4,pc}
;;;145    
                          ENDP

00003a  0000              DCW      0x0000
                  |L7.60|
                          DCD      feed_set
                  |L7.64|
                          DCD      pid+0x2ac
                  |L7.68|
                          DCD      out

                          AREA ||i.shoot_plan||, CODE, READONLY, ALIGN=2

                  shoot_plan PROC
;;;152    
;;;153    void shoot_plan()
000000  4816              LDR      r0,|L8.92|
;;;154    {
;;;155    	if(SHOOT_KEY != 0)
000002  6800              LDR      r0,[r0,#0]
000004  b160              CBZ      r0,|L8.32|
;;;156    	{
;;;157    		feed_state.shoot_plan_back = 0;
000006  2000              MOVS     r0,#0
000008  4915              LDR      r1,|L8.96|
00000a  f881003d          STRB     r0,[r1,#0x3d]
;;;158    		feed_state.shoot_plan = 1;
00000e  2001              MOVS     r0,#1
000010  f881003c          STRB     r0,[r1,#0x3c]
;;;159    		feed_set.feed_angle_and = 0;
000014  ed9f0a13          VLDR     s0,|L8.100|
000018  4813              LDR      r0,|L8.104|
00001a  ed800a04          VSTR     s0,[r0,#0x10]
00001e  e01b              B        |L8.88|
                  |L8.32|
;;;160    	}
;;;161    	else
;;;162    	{
;;;163    		feed_state.shoot_plan_back = 1;
000020  2001              MOVS     r0,#1
000022  490f              LDR      r1,|L8.96|
000024  f881003d          STRB     r0,[r1,#0x3d]
;;;164    		feed_state.shoot_plan = 0;
000028  2000              MOVS     r0,#0
00002a  f881003c          STRB     r0,[r1,#0x3c]
;;;165    		feed_set.feed_angle_and = (int16_t)feed_set.feed_angle_real % SingleBall;
00002e  480e              LDR      r0,|L8.104|
000030  ed900a02          VLDR     s0,[r0,#8]
000034  eebd0ac0          VCVT.S32.F32 s0,s0
000038  ee100a10          VMOV     r0,s0
00003c  b200              SXTH     r0,r0
00003e  f44f6107          MOV      r1,#0x870
000042  fb90f2f1          SDIV     r2,r0,r1
000046  fb010012          MLS      r0,r1,r2,r0
00004a  ee000a10          VMOV     s0,r0
00004e  eeb80ac0          VCVT.F32.S32 s0,s0
000052  4805              LDR      r0,|L8.104|
000054  ed800a04          VSTR     s0,[r0,#0x10]
                  |L8.88|
;;;166    	}
;;;167    		
;;;168    }
000058  4770              BX       lr
;;;169    
                          ENDP

00005a  0000              DCW      0x0000
                  |L8.92|
                          DCD      0x42428200
                  |L8.96|
                          DCD      feed_state
                  |L8.100|
000064  00000000          DCFS     0x00000000 ; 0
                  |L8.104|
                          DCD      feed_set

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  feed_set
                          %        24
                  feed_state
                          %        64

;*** Start embedded assembler ***

#line 1 "..\\HAL\\feedmotor.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_feedmotor_c_feed_set____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___11_feedmotor_c_feed_set____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_feedmotor_c_feed_set____REVSH|
#line 153
|__asm___11_feedmotor_c_feed_set____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_feedmotor_c_feed_set____RRX|
#line 328
|__asm___11_feedmotor_c_feed_set____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
