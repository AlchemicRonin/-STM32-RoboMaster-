; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o..\obj\stm32f4xx_cryp_tdes.o --asm_dir=..\OBJ\ --list_dir=..\OBJ\ --depend=..\obj\stm32f4xx_cryp_tdes.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\CORE -I..\SYSTEM\delay -I..\SYSTEM\sys -I..\SYSTEM\usart -I..\USER -I..\FWLIB\inc -I..\BSP -I..\HAL -I..\TASK -I..\DSP\Include -I..\AHRS -IC:\Users\15719\Desktop\Ambition-f427-步兵3.8（二段加速)\USER\RTE -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0 -IC:\Keil_v5\ARM\CMSIS\Include -IE:\MDK514\Keil\STM32F4xx_DFP\2.13.0\Device\Include -D__UVISION_VERSION=514 -DSTM32F427xx -DSTM32F427X -DUSE_STDPERIPH_DRIVER -D__FPU_USED -D__FPU_PRESENT -DARM_MATH_CM4 -D__CC_ARM -DARM_MATH_MATRIX_CHECK -DARM_MATH_ROUNDING --omf_browse=..\obj\stm32f4xx_cryp_tdes.crf ..\FWLIB\src\stm32f4xx_cryp_tdes.c]
                          THUMB

                          AREA ||i.CRYP_TDES_CBC||, CODE, READONLY, ALIGN=1

                  CRYP_TDES_CBC PROC
;;;209      */
;;;210    ErrorStatus CRYP_TDES_CBC(uint8_t Mode, uint8_t Key[24], uint8_t InitVectors[8],
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;211                              uint8_t *Input, uint32_t Ilength, uint8_t *Output)
;;;212    {
000004  b095              SUB      sp,sp,#0x54
000006  4680              MOV      r8,r0
000008  4689              MOV      r9,r1
00000a  4692              MOV      r10,r2
00000c  469b              MOV      r11,r3
;;;213      CRYP_InitTypeDef TDES_CRYP_InitStructure;
;;;214      CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
;;;215      CRYP_IVInitTypeDef TDES_CRYP_IVInitStructure;
;;;216      __IO uint32_t counter = 0;
00000e  2000              MOVS     r0,#0
000010  9004              STR      r0,[sp,#0x10]
;;;217      uint32_t busystatus = 0;
000012  9003              STR      r0,[sp,#0xc]
;;;218      ErrorStatus status = SUCCESS;
000014  2001              MOVS     r0,#1
000016  9002              STR      r0,[sp,#8]
;;;219      uint32_t keyaddr    = (uint32_t)Key;
000018  464c              MOV      r4,r9
;;;220      uint32_t inputaddr  = (uint32_t)Input;
00001a  465d              MOV      r5,r11
;;;221      uint32_t outputaddr = (uint32_t)Output;
00001c  9e1f              LDR      r6,[sp,#0x7c]
;;;222      uint32_t ivaddr     = (uint32_t)InitVectors;
00001e  4657              MOV      r7,r10
;;;223      uint32_t i = 0;
000020  2000              MOVS     r0,#0
000022  9001              STR      r0,[sp,#4]
;;;224    
;;;225      /* Crypto structures initialisation*/
;;;226      CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
000024  a809              ADD      r0,sp,#0x24
000026  f7fffffe          BL       CRYP_KeyStructInit
;;;227    
;;;228      /* Crypto Init for Encryption process */
;;;229      if(Mode == MODE_ENCRYPT) /* TDES encryption */
00002a  f1b80f01          CMP      r8,#1
00002e  d102              BNE      |L1.54|
;;;230      {
;;;231        TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
000030  2000              MOVS     r0,#0
000032  9011              STR      r0,[sp,#0x44]
000034  e001              B        |L1.58|
                  |L1.54|
;;;232      }
;;;233      else
;;;234      {
;;;235        TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
000036  2004              MOVS     r0,#4
000038  9011              STR      r0,[sp,#0x44]
                  |L1.58|
;;;236      }
;;;237      TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_CBC;
00003a  2008              MOVS     r0,#8
00003c  9012              STR      r0,[sp,#0x48]
;;;238      TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
00003e  2080              MOVS     r0,#0x80
000040  9013              STR      r0,[sp,#0x4c]
;;;239    
;;;240      CRYP_Init(&TDES_CRYP_InitStructure);
000042  a811              ADD      r0,sp,#0x44
000044  f7fffffe          BL       CRYP_Init
;;;241    
;;;242      /* Key Initialisation */
;;;243      TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000048  6820              LDR      r0,[r4,#0]
00004a  ba00              REV      r0,r0
00004c  900b              STR      r0,[sp,#0x2c]
;;;244      keyaddr+=4;
00004e  1d24              ADDS     r4,r4,#4
;;;245      TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
000050  6820              LDR      r0,[r4,#0]
000052  ba00              REV      r0,r0
000054  900c              STR      r0,[sp,#0x30]
;;;246      keyaddr+=4;
000056  1d24              ADDS     r4,r4,#4
;;;247      TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000058  6820              LDR      r0,[r4,#0]
00005a  ba00              REV      r0,r0
00005c  900d              STR      r0,[sp,#0x34]
;;;248      keyaddr+=4;
00005e  1d24              ADDS     r4,r4,#4
;;;249      TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
000060  6820              LDR      r0,[r4,#0]
000062  ba00              REV      r0,r0
000064  900e              STR      r0,[sp,#0x38]
;;;250      keyaddr+=4;
000066  1d24              ADDS     r4,r4,#4
;;;251      TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000068  6820              LDR      r0,[r4,#0]
00006a  ba00              REV      r0,r0
00006c  900f              STR      r0,[sp,#0x3c]
;;;252      keyaddr+=4;
00006e  1d24              ADDS     r4,r4,#4
;;;253      TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
000070  6820              LDR      r0,[r4,#0]
000072  ba00              REV      r0,r0
000074  9010              STR      r0,[sp,#0x40]
;;;254      CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
000076  a809              ADD      r0,sp,#0x24
000078  f7fffffe          BL       CRYP_KeyInit
;;;255      
;;;256      /* Initialization Vectors */
;;;257      TDES_CRYP_IVInitStructure.CRYP_IV0Left = __REV(*(uint32_t*)(ivaddr));
00007c  6838              LDR      r0,[r7,#0]
00007e  ba00              REV      r0,r0
000080  9005              STR      r0,[sp,#0x14]
;;;258      ivaddr+=4;
000082  1d3f              ADDS     r7,r7,#4
;;;259      TDES_CRYP_IVInitStructure.CRYP_IV0Right= __REV(*(uint32_t*)(ivaddr));
000084  6838              LDR      r0,[r7,#0]
000086  ba00              REV      r0,r0
000088  9006              STR      r0,[sp,#0x18]
;;;260      CRYP_IVInit(&TDES_CRYP_IVInitStructure);
00008a  a805              ADD      r0,sp,#0x14
00008c  f7fffffe          BL       CRYP_IVInit
;;;261      
;;;262      /* Flush IN/OUT FIFO */
;;;263      CRYP_FIFOFlush();
000090  f7fffffe          BL       CRYP_FIFOFlush
;;;264      
;;;265      /* Enable Crypto processor */
;;;266      CRYP_Cmd(ENABLE);
000094  2001              MOVS     r0,#1
000096  f7fffffe          BL       CRYP_Cmd
;;;267      
;;;268      if(CRYP_GetCmdStatus() == DISABLE)
00009a  f7fffffe          BL       CRYP_GetCmdStatus
00009e  b910              CBNZ     r0,|L1.166|
;;;269      {
;;;270        /* The CRYP peripheral clock is not enabled or the device doesn't embed 
;;;271        the CRYP peripheral (please check the device sales type. */
;;;272        status = ERROR;
0000a0  2000              MOVS     r0,#0
0000a2  9002              STR      r0,[sp,#8]
0000a4  e035              B        |L1.274|
                  |L1.166|
;;;273      }
;;;274      else
;;;275      {
;;;276        for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
0000a6  2000              MOVS     r0,#0
0000a8  9001              STR      r0,[sp,#4]
0000aa  e028              B        |L1.254|
                  |L1.172|
;;;277        {
;;;278          /* Write the Input block in the Input FIFO */
;;;279          CRYP_DataIn(*(uint32_t*)(inputaddr));
0000ac  6828              LDR      r0,[r5,#0]
0000ae  f7fffffe          BL       CRYP_DataIn
;;;280          inputaddr+=4;
0000b2  1d2d              ADDS     r5,r5,#4
;;;281          CRYP_DataIn(*(uint32_t*)(inputaddr));
0000b4  6828              LDR      r0,[r5,#0]
0000b6  f7fffffe          BL       CRYP_DataIn
;;;282          inputaddr+=4;
0000ba  1d2d              ADDS     r5,r5,#4
;;;283          
;;;284          /* Wait until the complete message has been processed */
;;;285          counter = 0;
0000bc  2000              MOVS     r0,#0
0000be  9004              STR      r0,[sp,#0x10]
;;;286          do
0000c0  bf00              NOP      
                  |L1.194|
;;;287          {
;;;288            busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
0000c2  2010              MOVS     r0,#0x10
0000c4  f7fffffe          BL       CRYP_GetFlagStatus
0000c8  9003              STR      r0,[sp,#0xc]
;;;289            counter++;
0000ca  9804              LDR      r0,[sp,#0x10]
0000cc  1c40              ADDS     r0,r0,#1
0000ce  9004              STR      r0,[sp,#0x10]
;;;290          }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
0000d0  9804              LDR      r0,[sp,#0x10]
0000d2  f5b03f80          CMP      r0,#0x10000
0000d6  d002              BEQ      |L1.222|
0000d8  9803              LDR      r0,[sp,#0xc]
0000da  2800              CMP      r0,#0
0000dc  d1f1              BNE      |L1.194|
                  |L1.222|
;;;291          
;;;292          if (busystatus != RESET)
0000de  9803              LDR      r0,[sp,#0xc]
0000e0  b110              CBZ      r0,|L1.232|
;;;293          {
;;;294            status = ERROR;
0000e2  2000              MOVS     r0,#0
0000e4  9002              STR      r0,[sp,#8]
0000e6  e007              B        |L1.248|
                  |L1.232|
;;;295          }
;;;296          else
;;;297          {
;;;298            
;;;299            /* Read the Output block from the Output FIFO */
;;;300            *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000e8  f7fffffe          BL       CRYP_DataOut
0000ec  6030              STR      r0,[r6,#0]
;;;301            outputaddr+=4;
0000ee  1d36              ADDS     r6,r6,#4
;;;302            *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000f0  f7fffffe          BL       CRYP_DataOut
0000f4  6030              STR      r0,[r6,#0]
;;;303            outputaddr+=4;
0000f6  1d36              ADDS     r6,r6,#4
                  |L1.248|
0000f8  9801              LDR      r0,[sp,#4]            ;276
0000fa  3008              ADDS     r0,r0,#8              ;276
0000fc  9001              STR      r0,[sp,#4]            ;276
                  |L1.254|
0000fe  991e              LDR      r1,[sp,#0x78]         ;276
000100  9801              LDR      r0,[sp,#4]            ;276
000102  4288              CMP      r0,r1                 ;276
000104  d202              BCS      |L1.268|
000106  9802              LDR      r0,[sp,#8]            ;276
000108  2800              CMP      r0,#0                 ;276
00010a  d1cf              BNE      |L1.172|
                  |L1.268|
;;;304          }
;;;305        }
;;;306        
;;;307        /* Disable Crypto */
;;;308        CRYP_Cmd(DISABLE);
00010c  2000              MOVS     r0,#0
00010e  f7fffffe          BL       CRYP_Cmd
                  |L1.274|
;;;309      }
;;;310      return status; 
000112  9802              LDR      r0,[sp,#8]
;;;311    }
000114  b015              ADD      sp,sp,#0x54
000116  e8bd8ff0          POP      {r4-r11,pc}
;;;312    /**
                          ENDP


                          AREA ||i.CRYP_TDES_ECB||, CODE, READONLY, ALIGN=1

                  CRYP_TDES_ECB PROC
;;;99       */
;;;100    ErrorStatus CRYP_TDES_ECB(uint8_t Mode, uint8_t Key[24], uint8_t *Input, 
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;101                              uint32_t Ilength, uint8_t *Output)
;;;102    {
000004  b08f              SUB      sp,sp,#0x3c
000006  4607              MOV      r7,r0
000008  4688              MOV      r8,r1
00000a  4691              MOV      r9,r2
00000c  469a              MOV      r10,r3
;;;103      CRYP_InitTypeDef TDES_CRYP_InitStructure;
;;;104      CRYP_KeyInitTypeDef TDES_CRYP_KeyInitStructure;
;;;105      __IO uint32_t counter = 0;
00000e  2000              MOVS     r0,#0
000010  9002              STR      r0,[sp,#8]
;;;106      uint32_t busystatus = 0;
000012  4683              MOV      r11,r0
;;;107      ErrorStatus status = SUCCESS;
000014  2001              MOVS     r0,#1
000016  9001              STR      r0,[sp,#4]
;;;108      uint32_t keyaddr    = (uint32_t)Key;
000018  4644              MOV      r4,r8
;;;109      uint32_t inputaddr  = (uint32_t)Input;
00001a  464d              MOV      r5,r9
;;;110      uint32_t outputaddr = (uint32_t)Output;
00001c  9e18              LDR      r6,[sp,#0x60]
;;;111      uint32_t i = 0;
00001e  2000              MOVS     r0,#0
000020  9000              STR      r0,[sp,#0]
;;;112    
;;;113      /* Crypto structures initialisation*/
;;;114      CRYP_KeyStructInit(&TDES_CRYP_KeyInitStructure);
000022  a803              ADD      r0,sp,#0xc
000024  f7fffffe          BL       CRYP_KeyStructInit
;;;115    
;;;116      /* Crypto Init for Encryption process */
;;;117      if(Mode == MODE_ENCRYPT) /* TDES encryption */
000028  2f01              CMP      r7,#1
00002a  d102              BNE      |L2.50|
;;;118      {
;;;119         TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Encrypt;
00002c  2000              MOVS     r0,#0
00002e  900b              STR      r0,[sp,#0x2c]
000030  e001              B        |L2.54|
                  |L2.50|
;;;120      }
;;;121      else /*if(Mode == MODE_DECRYPT)*/ /* TDES decryption */
;;;122      {
;;;123         TDES_CRYP_InitStructure.CRYP_AlgoDir = CRYP_AlgoDir_Decrypt;
000032  2004              MOVS     r0,#4
000034  900b              STR      r0,[sp,#0x2c]
                  |L2.54|
;;;124      }
;;;125    
;;;126      TDES_CRYP_InitStructure.CRYP_AlgoMode = CRYP_AlgoMode_TDES_ECB;
000036  2000              MOVS     r0,#0
000038  900c              STR      r0,[sp,#0x30]
;;;127      TDES_CRYP_InitStructure.CRYP_DataType = CRYP_DataType_8b;
00003a  2080              MOVS     r0,#0x80
00003c  900d              STR      r0,[sp,#0x34]
;;;128      CRYP_Init(&TDES_CRYP_InitStructure);
00003e  a80b              ADD      r0,sp,#0x2c
000040  f7fffffe          BL       CRYP_Init
;;;129    
;;;130      /* Key Initialisation */
;;;131      TDES_CRYP_KeyInitStructure.CRYP_Key1Left = __REV(*(uint32_t*)(keyaddr));
000044  6820              LDR      r0,[r4,#0]
000046  ba00              REV      r0,r0
000048  9005              STR      r0,[sp,#0x14]
;;;132      keyaddr+=4;
00004a  1d24              ADDS     r4,r4,#4
;;;133      TDES_CRYP_KeyInitStructure.CRYP_Key1Right= __REV(*(uint32_t*)(keyaddr));
00004c  6820              LDR      r0,[r4,#0]
00004e  ba00              REV      r0,r0
000050  9006              STR      r0,[sp,#0x18]
;;;134      keyaddr+=4;
000052  1d24              ADDS     r4,r4,#4
;;;135      TDES_CRYP_KeyInitStructure.CRYP_Key2Left = __REV(*(uint32_t*)(keyaddr));
000054  6820              LDR      r0,[r4,#0]
000056  ba00              REV      r0,r0
000058  9007              STR      r0,[sp,#0x1c]
;;;136      keyaddr+=4;
00005a  1d24              ADDS     r4,r4,#4
;;;137      TDES_CRYP_KeyInitStructure.CRYP_Key2Right= __REV(*(uint32_t*)(keyaddr));
00005c  6820              LDR      r0,[r4,#0]
00005e  ba00              REV      r0,r0
000060  9008              STR      r0,[sp,#0x20]
;;;138      keyaddr+=4;
000062  1d24              ADDS     r4,r4,#4
;;;139      TDES_CRYP_KeyInitStructure.CRYP_Key3Left = __REV(*(uint32_t*)(keyaddr));
000064  6820              LDR      r0,[r4,#0]
000066  ba00              REV      r0,r0
000068  9009              STR      r0,[sp,#0x24]
;;;140      keyaddr+=4;
00006a  1d24              ADDS     r4,r4,#4
;;;141      TDES_CRYP_KeyInitStructure.CRYP_Key3Right= __REV(*(uint32_t*)(keyaddr));
00006c  6820              LDR      r0,[r4,#0]
00006e  ba00              REV      r0,r0
000070  900a              STR      r0,[sp,#0x28]
;;;142      CRYP_KeyInit(& TDES_CRYP_KeyInitStructure);
000072  a803              ADD      r0,sp,#0xc
000074  f7fffffe          BL       CRYP_KeyInit
;;;143    
;;;144      /* Flush IN/OUT FIFO */
;;;145      CRYP_FIFOFlush();
000078  f7fffffe          BL       CRYP_FIFOFlush
;;;146    
;;;147      /* Enable Crypto processor */
;;;148      CRYP_Cmd(ENABLE);
00007c  2001              MOVS     r0,#1
00007e  f7fffffe          BL       CRYP_Cmd
;;;149    
;;;150      if(CRYP_GetCmdStatus() == DISABLE)
000082  f7fffffe          BL       CRYP_GetCmdStatus
000086  b910              CBNZ     r0,|L2.142|
;;;151      {
;;;152        /* The CRYP peripheral clock is not enabled or the device doesn't embed 
;;;153        the CRYP peripheral (please check the device sales type. */
;;;154        status = ERROR;
000088  2000              MOVS     r0,#0
00008a  9001              STR      r0,[sp,#4]
00008c  e035              B        |L2.250|
                  |L2.142|
;;;155      }
;;;156      else
;;;157      {
;;;158        for(i=0; ((i<Ilength) && (status != ERROR)); i+=8)
00008e  2000              MOVS     r0,#0
000090  9000              STR      r0,[sp,#0]
000092  e029              B        |L2.232|
                  |L2.148|
;;;159        {
;;;160          /* Write the Input block in the Input FIFO */
;;;161          CRYP_DataIn(*(uint32_t*)(inputaddr));
000094  6828              LDR      r0,[r5,#0]
000096  f7fffffe          BL       CRYP_DataIn
;;;162          inputaddr+=4;
00009a  1d2d              ADDS     r5,r5,#4
;;;163          CRYP_DataIn(*(uint32_t*)(inputaddr));
00009c  6828              LDR      r0,[r5,#0]
00009e  f7fffffe          BL       CRYP_DataIn
;;;164          inputaddr+=4;
0000a2  1d2d              ADDS     r5,r5,#4
;;;165          
;;;166          /* Wait until the complete message has been processed */
;;;167          counter = 0;
0000a4  2000              MOVS     r0,#0
0000a6  9002              STR      r0,[sp,#8]
;;;168          do
0000a8  bf00              NOP      
                  |L2.170|
;;;169          {
;;;170            busystatus = CRYP_GetFlagStatus(CRYP_FLAG_BUSY);
0000aa  2010              MOVS     r0,#0x10
0000ac  f7fffffe          BL       CRYP_GetFlagStatus
0000b0  4683              MOV      r11,r0
;;;171            counter++;
0000b2  9802              LDR      r0,[sp,#8]
0000b4  1c40              ADDS     r0,r0,#1
0000b6  9002              STR      r0,[sp,#8]
;;;172          }while ((counter != TDESBUSY_TIMEOUT) && (busystatus != RESET));
0000b8  9802              LDR      r0,[sp,#8]
0000ba  f5b03f80          CMP      r0,#0x10000
0000be  d002              BEQ      |L2.198|
0000c0  f1bb0f00          CMP      r11,#0
0000c4  d1f1              BNE      |L2.170|
                  |L2.198|
;;;173          
;;;174          if (busystatus != RESET)
0000c6  f1bb0f00          CMP      r11,#0
0000ca  d002              BEQ      |L2.210|
;;;175          {
;;;176            status = ERROR;
0000cc  2000              MOVS     r0,#0
0000ce  9001              STR      r0,[sp,#4]
0000d0  e007              B        |L2.226|
                  |L2.210|
;;;177          }
;;;178          else
;;;179          {
;;;180            
;;;181            /* Read the Output block from the Output FIFO */
;;;182            *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000d2  f7fffffe          BL       CRYP_DataOut
0000d6  6030              STR      r0,[r6,#0]
;;;183            outputaddr+=4;
0000d8  1d36              ADDS     r6,r6,#4
;;;184            *(uint32_t*)(outputaddr) = CRYP_DataOut();
0000da  f7fffffe          BL       CRYP_DataOut
0000de  6030              STR      r0,[r6,#0]
;;;185            outputaddr+=4;
0000e0  1d36              ADDS     r6,r6,#4
                  |L2.226|
0000e2  9800              LDR      r0,[sp,#0]            ;158
0000e4  3008              ADDS     r0,r0,#8              ;158
0000e6  9000              STR      r0,[sp,#0]            ;158
                  |L2.232|
0000e8  9800              LDR      r0,[sp,#0]            ;158
0000ea  4550              CMP      r0,r10                ;158
0000ec  d202              BCS      |L2.244|
0000ee  9801              LDR      r0,[sp,#4]            ;158
0000f0  2800              CMP      r0,#0                 ;158
0000f2  d1cf              BNE      |L2.148|
                  |L2.244|
;;;186          }
;;;187        }
;;;188        
;;;189        /* Disable Crypto */
;;;190        CRYP_Cmd(DISABLE);
0000f4  2000              MOVS     r0,#0
0000f6  f7fffffe          BL       CRYP_Cmd
                  |L2.250|
;;;191      }
;;;192      return status; 
0000fa  9801              LDR      r0,[sp,#4]
;;;193    }
0000fc  b00f              ADD      sp,sp,#0x3c
0000fe  e8bd8ff0          POP      {r4-r11,pc}
;;;194    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\FWLIB\\src\\stm32f4xx_cryp_tdes.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REV16|
#line 138 "..\\CORE\\core_cmInstr.h"
|__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REV16| PROC
#line 139

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REVSH|
#line 153
|__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____REVSH| PROC
#line 154

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____RRX|
#line 328
|__asm___21_stm32f4xx_cryp_tdes_c_2fc87a0d____RRX| PROC
#line 329

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
